<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Mikhail Shilkov</title>
    <link href="http://mikhail.io/feed/" rel="self"/>
    <link href="http://mikhail.io"/>
    <updated>2016-02-08T10:01:19.383Z</updated>
    <id>http://mikhail.io/</id>
    <author>
        <name>Mikhail Shilkov</name>
        <email></email>
    </author>

    
    <entry>
        <title>Akka.NET-style actors in Service Fabric</title>
        <link href="http://mikhail.io/2016/02/akka-net-style-actors-in-service-fabric"/>
        <updated>2016-02-08T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-02-08,/2016/02/akka-net-style-actors-in-service-fabric</id>
        <content type="html"><![CDATA[<p>Akka.NET and Service Fabric are the two actor frameworks that emerged in .NET world in the last year.
The two implementations of actor models are quite different. These differences are multi-faceted but
today I want to focus on API to define an actor and to communicate to it.</p>
<h2 id="service-fabric-actors">Service Fabric Actors</h2>
<p>Every actor in Service Fabric has a public interface which describes its behaviour. For this article
I&#39;m going to use a toy example based on weather reports. Our actor will be able to get whether reports
and then return the maximum temperature for a given period. An instance of actor will be created
for each city (geo partitioning). Here is our interface in Service Fabric:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IWeatherActor</span> : <span class="hljs-title">IActor</span>
{
    <span class="hljs-function">Task <span class="hljs-title">AddWeatherReport</span><span class="hljs-params">(WeatherReport report)</span></span>;

    Task&lt;<span class="hljs-keyword">int</span>?&gt; GetMaxTemperature(Period period);
}
</code></pre>
<p>We have two operations: a command and a query. They are both async (return <code>Task</code>). The data classes
are required to be mutable DTOs based on <code>DataContract</code>:</p>
<pre class="highlight"><code class="hljs cs">[DataContract]
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WeatherReport</span>
{
    [DataMember]
    <span class="hljs-keyword">public</span> DateTime Moment { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    [DataMember]
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Temperature { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    [DataMember]
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Humidity { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}

[DataContract]
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Period</span>
{
    [DataMember]
    <span class="hljs-keyword">public</span> DateTime From { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    [DataMember]
    <span class="hljs-keyword">public</span> DateTime Until { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
<p>And here is the implementation of the weather actor:</p>
<pre class="highlight"><code class="hljs undefined">internal class WeatherActor : StatefulActor&lt;List&lt;WeatherReport&gt;&gt;, IWeatherActor
{
    public Task AddWeatherReport(WeatherReport report)
    {
        this.State = this.State ?? new List&lt;WeatherReport&gt;();
        this.State.Add(report);
        return Task.FromResult(0);
    }

    public Task&lt;int?&gt; GetMaxTemperature(Period period)
    {
        return Task.FromResult(
            (this.State ?? Enumerable.Empty&lt;WeatherReport&gt;())
            .Where(r =&gt; r.Moment &gt; period.From &amp;&amp; r. Moment &lt;= period.Until)
            .Max(r =&gt; (int?)r.Temperature));
    }
}
</code></pre>
<p>Service Fabric provides reliable storage out of the box, so we are using it to
store our reports. There&#39;s no code required to instantiate an actor. Here is the
code to use it:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-comment">// Submit a new report</span>
IWeatherActor actor = ActorProxy.Create&lt;IWeatherActor&gt;(<span class="hljs-keyword">new</span> ActorId(<span class="hljs-string">"Amsterdam"</span>));
actor.AddWeatherReport(
    <span class="hljs-keyword">new</span> WeatherReport { Moment = DateTime.Now, Temperature = <span class="hljs-number">22</span>, Humidity = <span class="hljs-number">55</span> });

<span class="hljs-comment">// Make a query somewhere else</span>
IWeatherActor actor = ActorProxy.Create&lt;IWeatherActor&gt;(<span class="hljs-keyword">new</span> ActorId(<span class="hljs-string">"Amsterdam"</span>));
<span class="hljs-keyword">var</span> result = actor.GetMaxTemperature(<span class="hljs-keyword">new</span> Period { From = monthAgo, Until = now });
</code></pre>
<h2 id="akka-net-actors">Akka.NET Actors</h2>
<p>Actors in Akka.NET are message-based. The messages are immutable POCOs, which 
is a great design decision. Here are the messages for our scenario:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WeatherReport</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeatherReport</span><span class="hljs-params">(DateTime moment, <span class="hljs-keyword">int</span> temperature, <span class="hljs-keyword">int</span> humidity)</span>
    </span>{
        <span class="hljs-keyword">this</span>.Moment = moment;
        <span class="hljs-keyword">this</span>.Temperature = temperature;
        <span class="hljs-keyword">this</span>.Humidity = humidity;
    }

    <span class="hljs-keyword">public</span> DateTime Moment { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Temperature { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Humidity { <span class="hljs-keyword">get</span>; }
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Period</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Period</span><span class="hljs-params">(DateTime <span class="hljs-keyword">from</span>, DateTime until)</span>
    </span>{
        <span class="hljs-keyword">this</span>.From = <span class="hljs-keyword">from</span>;
        <span class="hljs-keyword">this</span>.Until = until;
    }

    <span class="hljs-keyword">public</span> DateTime From { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> DateTime Until { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>There&#39;s no need to define any interfaces. The basic actor implementation derives from
<code>ReceiveActor</code> and calls <code>Receive</code> generic method to setup a callback which is called
when a message of specified type is received:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WeatherActor</span> : <span class="hljs-title">ReceiveActor</span>
{
    <span class="hljs-keyword">private</span> List&lt;WeatherReport&gt; state = <span class="hljs-keyword">new</span> List&lt;WeatherReport&gt;();

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeatherActor</span><span class="hljs-params">()</span>
    </span>{
        Receive&lt;WeatherReport&gt;(<span class="hljs-keyword">this</span>.AddWeatherReport);
        Receive&lt;Period&gt;(<span class="hljs-keyword">this</span>.GetMaxTemperature);
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddWeatherReport</span><span class="hljs-params">(WeatherReport report)</span>
    </span>{
        <span class="hljs-keyword">this</span>.state.Add(report);
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetMaxTemperature</span><span class="hljs-params">(Period period)</span>
    </span>{
        <span class="hljs-keyword">var</span> response = <span class="hljs-keyword">this</span>.state
            .Where(r =&gt; r.Moment &gt; period.From &amp;&amp; r. Moment &lt;= period.Until)
            .Max(r =&gt; (<span class="hljs-keyword">int</span>?)r.Temperature);
        Sender.Tell(response, Self);
    }
}
</code></pre>
<p>Note a couple more differences in this implementation comparing to Fabric style:</p>
<ul>
<li><p>State is stored in a normal class field and is not persistent or replicated
by default. This can be solved by Akka.NET Persistence, which would save all
messages (and potentially snapshots) to the external database. Still, it won&#39;t
be the same level of convenience as in-built Service Fabric statefullness.</p>
</li>
<li><p><code>GetMaxTemperature</code> method does not return anything, because nobody would look
at the returned value. Instead, it sends yet another message to the sender actor.
So, <code>Request-Response</code> workflow is supported but is a bit less convenient and
explicit.</p>
</li>
</ul>
<p>Let&#39;s have a look at the client code. <code>ActorSelection</code> is the closest notion to
Fabric&#39;s <code>ActorProxy</code>: it does not create an actor, but just gets an endpoint
based on the name. Note that Akka.NET actor needs to be explicitly created by
another actor, but lifetime management is a separate discussion, so we&#39;ll skip 
it for now. Here is the report sender:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-comment">// Submit a new report</span>
<span class="hljs-keyword">var</span> msg = <span class="hljs-keyword">new</span> WeatherReport { Moment = DateTime.Now, Temperature = <span class="hljs-number">22</span>, Humidity = <span class="hljs-number">55</span> };
Context.ActorSelection(<span class="hljs-string">"/user/weather/Amsterdam"</span>).Tell(msg);
</code></pre>
<p>Asking <code>ActorSelection</code> is not directly possible, we would need to setup an
inbox and receive callback messages. We&#39;ll pretend that we have an <code>ActorRef</code>
for the sake of simplicity:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-comment">// Make a query somewhere else</span>
ActoRef actor = ... ; <span class="hljs-comment">// we have it</span>
<span class="hljs-keyword">var</span> result = <span class="hljs-keyword">await</span> actor.Ask(<span class="hljs-keyword">new</span> Period { From = monthAgo, Until = now });
</code></pre>
<h2 id="the-best-of-two-worlds">The Best of Two Worlds</h2>
<p>Now my goals is to come up with an implementation of Service Fabric actors with
the properties that combine the good parts of both frameworks (without explicitly
using Akka.NET), i.e.</p>
<ul>
<li>Use the full power of Service Fabric actors, including lifetime management,
cluster management and reliable state</li>
<li>Use the simplicity of Request-Response pattern implementation of Service Fabric</li>
<li>Support immutable POCO messages instead of <code>DataContract</code> DTOs</li>
<li>Use <code>ReceiveActor</code>-like API for message processing</li>
</ul>
<p>Here is the third implementation of our Weather Actor (the definitions of messages
from Akka.NET example are intact):</p>
<pre class="highlight"><code class="hljs undefined">[ActorService(Name = "WeatherActor")]
public class WeatherActor : StetefulReceiveActor&lt;List&lt;WeatherReport&gt;&gt;
{
    public WeatherActor()
    {
        Receive&lt;WeatherReport&gt;(this.AddWeatherReport);
        Receive&lt;Period, int&gt;(this.GetMaxTemperature);
    }

    public Task&lt;List&lt;WeatherReport&gt;&gt; AddWeatherReport(
        List&lt;WeatherReport&gt; state, WeatherReport report)
    {
        state = state ?? new List&lt;WeatherReport&gt;();
        state.Add(report);
        return Task.FromResult(state);
    }

    public Task&lt;int?&gt; GetMaxTemperature(List&lt;WeatherReport&gt; state, Period period)
    {
        return Task.FromResult(
            (state ?? Enumerable.Empty&lt;WeatherReport&gt;())
            .Where(r =&gt; r.Moment &gt; period.From &amp;&amp; r. Moment &lt;= period.Until)
            .Max(r =&gt; (int?)r.Temperature));
    }
}
</code></pre>
<p>The base <code>ReceiveActor</code> class is not defined yet, we&#39;ll do it in the next section. Here is
how it&#39;s being used:</p>
<ul>
<li>The base class is generic and it accepts the type of the state (similar to normal Fabric actors)</li>
<li>Constructor registers two <code>Receive</code> handlers: message handler and request handler. Note
that the later one accepts two type parameters: request type and response type</li>
<li>Both handlers get the current state as the first argument instead of pulling it from the property of
the base class</li>
<li>The both return <code>Task</code>&#39;ed data. Message handler is allowed to change the state, while
request handler does  not change the state but just returns the response back</li>
<li><code>ServiceName</code> attribute is required because there are (may be) multiple classes implementing
the same interface</li>
</ul>
<p>The client code uses our own <code>MessageActorProxy</code> class to create non-generic proxies which
are capable to <code>Tell</code> (send a message one way) and <code>Ask</code> (do request and wait for response):</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-comment">// Submit a new report</span>
<span class="hljs-keyword">var</span> actor = MessageActorProxy.Create(<span class="hljs-keyword">new</span> ActorId(<span class="hljs-string">"Amsterdam"</span>), <span class="hljs-string">"WeatherActor"</span>);
actor.Tell(<span class="hljs-keyword">new</span> WeatherReport { Moment = DateTime.Now, Temperature = <span class="hljs-number">22</span>, Humidity = <span class="hljs-number">55</span> });

<span class="hljs-comment">// Make a query somewhere else</span>
<span class="hljs-keyword">var</span> actor = MessageActorProxy.Create(<span class="hljs-keyword">new</span> ActorId(<span class="hljs-string">"Amsterdam"</span>), <span class="hljs-string">"WeatherActor"</span>);
<span class="hljs-keyword">var</span> result = actor.Ask(<span class="hljs-keyword">new</span> Period { From = monthAgo, Until = now });
</code></pre>
<h2 id="implementation-of-receiveactor">Implementation of ReceiveActor</h2>
<p>Let&#39;s start with the interface definition:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IReceiveActor</span> : <span class="hljs-title">IActor</span>
{
    <span class="hljs-function">Task <span class="hljs-title">Tell</span><span class="hljs-params">(<span class="hljs-keyword">string</span> typeName, <span class="hljs-keyword">byte</span>[] message)</span></span>;

    [Readonly]
    Task&lt;<span class="hljs-keyword">byte</span>[]&gt; Ask(<span class="hljs-keyword">string</span> typeName, <span class="hljs-keyword">byte</span>[] message);
}
</code></pre>
<p>The two methods for <code>Tell</code> and <code>Ask</code> accept serializes data together with fully qualified
type name. This will allow passing any kind of objects which can be handled by a serializer
of choice (I used Newtonsoft JSON serializer).</p>
<p>Actor implementation derives from <code>StatefulActor</code> and uses another type/bytes pair to store
the serialized state:</p>
<pre class="highlight"><code class="hljs undefined">    public abstract class StatefulReceiveActor : StatefulActor&lt;StateContainer&gt;, 
                                                 IReceiveActor
    {
        // ...
    }

    [DataContract]
    public class StateContainer
    {
        [DataMember]
        public string TypeName { get; set; }

        [DataMember]
        public byte[] Data { get; set; }
    }
</code></pre>
<p>The simplistic implementation of <code>Receive</code> generic methods uses two dictionaries
to store the handlers:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">private</span> Dictionary&lt;Type, Func&lt;<span class="hljs-keyword">object</span>, <span class="hljs-keyword">object</span>, Task&lt;<span class="hljs-keyword">object</span>&gt;&gt;&gt; handlers;
<span class="hljs-keyword">private</span> Dictionary&lt;Type, Func&lt;<span class="hljs-keyword">object</span>, <span class="hljs-keyword">object</span>, Task&lt;<span class="hljs-keyword">object</span>&gt;&gt;&gt; askers;

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReceiveActor</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">this</span>.handlers = <span class="hljs-keyword">new</span> Dictionary&lt;Type, Func&lt;<span class="hljs-keyword">object</span>, <span class="hljs-keyword">object</span>, Task&lt;<span class="hljs-keyword">object</span>&gt;&gt;&gt;();
    <span class="hljs-keyword">this</span>.askers = <span class="hljs-keyword">new</span> Dictionary&lt;Type, Func&lt;<span class="hljs-keyword">object</span>, <span class="hljs-keyword">object</span>, Task&lt;<span class="hljs-keyword">object</span>&gt;&gt;&gt;();
}

<span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> Receive&lt;T&gt;(Func&lt;<span class="hljs-keyword">object</span>, T, Task&lt;<span class="hljs-keyword">object</span>&gt;&gt; handler)
    =&gt; <span class="hljs-keyword">this</span>.handlers.Add(<span class="hljs-keyword">typeof</span>(T), <span class="hljs-keyword">async</span> (s, m) =&gt; <span class="hljs-function"><span class="hljs-keyword">await</span> <span class="hljs-title">handler</span><span class="hljs-params">(s, (T)</span>m))</span>;

<span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> Receive&lt;TI, TO&gt;(Func&lt;<span class="hljs-keyword">object</span>, TI, Task&lt;TO&gt;&gt; asker)
    =&gt; <span class="hljs-keyword">this</span>.askers.Add(<span class="hljs-keyword">typeof</span>(TI), <span class="hljs-keyword">async</span> (s, m) =&gt; <span class="hljs-function"><span class="hljs-keyword">await</span> <span class="hljs-title">asker</span><span class="hljs-params">(s, (TI)</span>m))</span>;
</code></pre>
<p>The <code>Tell</code> method deserializes the message and state, then picks a handler based on
the message type, executes it and serializes the produced state back:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">Tell</span><span class="hljs-params">(<span class="hljs-keyword">string</span> typeName, <span class="hljs-keyword">byte</span>[] message)</span>
</span>{
    <span class="hljs-keyword">var</span> type = Type.GetType(typeName);
    <span class="hljs-keyword">var</span> typedMessage = <span class="hljs-keyword">this</span>.serializer.Deserialize(message, type);

    <span class="hljs-keyword">var</span> typedState = <span class="hljs-keyword">this</span>.State != <span class="hljs-keyword">null</span>
        ? <span class="hljs-keyword">this</span>.serializer.Deserialize(<span class="hljs-keyword">this</span>.State.Data, Type.GetType(<span class="hljs-keyword">this</span>.State.TypeName))
        : <span class="hljs-keyword">null</span>;
    <span class="hljs-keyword">var</span> handler = <span class="hljs-keyword">this</span>.handlers.FirstOrDefault(t =&gt; t.Key.IsAssignableFrom(type)).Value;
    <span class="hljs-keyword">if</span> (handler != <span class="hljs-keyword">null</span>)
    {
        <span class="hljs-keyword">var</span> newState = <span class="hljs-function"><span class="hljs-keyword">await</span> <span class="hljs-title">handler</span><span class="hljs-params">(typedState, typedMessage)</span></span>;
        <span class="hljs-keyword">this</span>.State =
            newState != <span class="hljs-keyword">null</span>
            ? <span class="hljs-keyword">new</span> StateContainer 
              { 
                  Data = <span class="hljs-keyword">this</span>.serializer.Serialize(newState), 
                  TypeName = newState.GetType().AssemblyQualifiedName 
              }
            : <span class="hljs-keyword">null</span>;
    }
}
</code></pre>
<p>The implementation of <code>Ask</code> is almost identical, so I&#39;ll skip it. <code>MessageActorProxy</code> 
encapsulates the serialization around passing data to normal <code>ActorProxy</code> class:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MessageActorProxy</span>
{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> IStatefulMessageActor proxy;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> ISerializer serializer = <span class="hljs-keyword">new</span> JsonByteSerializer();

    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">MessageActorProxy</span><span class="hljs-params">(ActorId actorId, <span class="hljs-keyword">string</span> serviceName)</span>
    </span>{
        <span class="hljs-keyword">this</span>.proxy = ActorProxy.Create&lt;IReceiveActor&gt;(actorId, serviceName: serviceName);
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">Tell</span><span class="hljs-params">(<span class="hljs-keyword">object</span> message)</span>
    </span>{
        <span class="hljs-keyword">var</span> serialized = <span class="hljs-keyword">this</span>.serializer.Serialize(message);
        <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.proxy.Send(message.GetType().AssemblyQualifiedName, serialized);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> Task&lt;T&gt; Ask&lt;T&gt;(<span class="hljs-keyword">object</span> message)
    {
        <span class="hljs-keyword">var</span> serialized = <span class="hljs-keyword">this</span>.serializer.Serialize(message);
        <span class="hljs-keyword">var</span> fullName = message.GetType().AssemblyQualifiedName;
        <span class="hljs-keyword">var</span> response = <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.proxy.Ask(fullName, serialized);
        <span class="hljs-keyword">return</span> (T)<span class="hljs-keyword">this</span>.serializer.Deserialize(response, <span class="hljs-keyword">typeof</span>(T));
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MessageActorProxy <span class="hljs-title">Create</span><span class="hljs-params">(ActorId actorId, <span class="hljs-keyword">string</span> serviceType)</span>
    </span>{
        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">MessageActorProxy</span><span class="hljs-params">(actorId, serviceType)</span></span>;
    }
}
</code></pre>
<p>Let&#39;s briefly wrap it up.</p>
<h2 id="conclusion">Conclusion</h2>
<p>At this stage Azure Service Fabric lacks support of some actor model best practices
like message-based API and immutable POCO classes. At the same time, it provides
super powerful setup regarding cluster resource management, state replication, fault
tolerance and reliable communication. We can borrow some approaches that are used in Akka.NET
framework to improve the developer experience who wants to leverage the power
of Service Fabric.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Building a Poker Bot: Card Recognition</title>
        <link href="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition"/>
        <updated>2016-02-01T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-02-01,/2016/02/building-a-poker-bot-card-recognition</id>
        <content type="html"><![CDATA[<p><em>This is the first part of <strong>Building a Poker Bot</strong> series where I describe my experience developing bot software 
for online poker rooms. I&#39;m building the bot with .NET framework and F# language which makes the task relatively 
easy and very enjoyable.</em></p>
<h2 id="screen-recognition">Screen recognition</h2>
<p>For a human, the very first step to the ability to play poker is to understand the cards, what a hand is and 
what the value of your hand is. E.g. in Texas Holdem each player gets 2 hole cards which form a hand. At 
the showdown the player with the best hand wins.</p>
<p>Poker bots are no different, they also need to be taught the notion of cards and hands. A bot should &quot;watch&quot; 
the table and see which cards he is dealt with. There are several ways to achieve that but I go for a technique
called screen recognition, i.e. the bot makes a screenshot of a table and then reads the pixels to understand
what&#39;s going on. Very similar to what people do.</p>
<p>Image recognition in general is a tough task. Human beings are very good at interpreting vague images and
recognizing familiar objects. It&#39;s much more difficult for computers. General image recognition (think showing
a photo to your computer and asking whether there is an animal there) is very tough; corporations like Google
and Microsoft are spending numerous man-years and employ techniques like machine learning and neural networks.</p>
<p>Fortunately, poker table recognition is much easier. The images to be recognized are machine-generated, so
the same things are rendered more or less the same way all the time. It makes sense to keep the poker table
size fixed to some predefined value which makes recognition task fairly easy.</p>
<h2 id="card-recognition-steps">Card recognition steps</h2>
<p>There are 13 card faces (from Deuce to Ace) and 4 suits. All of them are just fixed-size images which we need to be able to
match with. So we start with a screenshot of a poker table:</p>
<p><img src="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/table.png" alt="Poker table screenshot"></p>
<p>The table size is fixed, so are the left and the top pixel positions of hole cards. So, our first step is to extract
the small images of cards out of the big screenshot:</p>
<p><img src="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/cards.png" alt="Extracted card images"></p>
<p>Now, we can take the recognition of card faces and suits separately. In our sample layout, suits are color coded.
This is very friendly to humans and super simple for the bot. We pick the suit based on the color (ignoring 
the white pixels):</p>
<p><img src="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/suits.png" alt="Recognized suits"></p>
<p>This leaves us with the task of choosing between 13 card faces. The color information is not important
here, we can make the image grey-scale. Moreover, we can reduce the color information to the single bit per 
pixel - call it white or black:</p>
<p><img src="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/blackandwhite.png" alt="Black and white pixels"></p>
<p>Now this mask is very simple, and we can compare it with 13 predefined masks for 13 cards pixel by pixel.
The one with the biggest amount of matches wins.</p>
<h2 id="suit-recognition">Suit recognition</h2>
<p>Let&#39;s put some code at the table. We start with suit recognition. <code>getSuit</code> function has type 
<code>Color -&gt; string option</code> and converts the color of a pixel into the suit name, if possible. Hearts (&quot;h&quot;)
are red, Diamonds (&quot;d&quot;) are blue, Clubs (&quot;c&quot;) are green and Spades (&quot;s&quot;) are black:</p>
<pre class="highlight"><code class="hljs fsharp"><span class="hljs-keyword">let</span> getSuit (c : Color) =
  <span class="hljs-keyword">match</span> c <span class="hljs-keyword">with</span>
  | _ <span class="hljs-keyword">when</span> c.B &lt; <span class="hljs-number">127</span>uy &amp;&amp; c.G &lt; <span class="hljs-number">127</span>uy &amp;&amp; c.R &gt; <span class="hljs-number">127</span>uy -&gt; Some <span class="hljs-string">"h"</span>
  | _ <span class="hljs-keyword">when</span> c.B &gt; <span class="hljs-number">127</span>uy &amp;&amp; c.G &lt; <span class="hljs-number">127</span>uy &amp;&amp; c.R &lt; <span class="hljs-number">127</span>uy -&gt; Some <span class="hljs-string">"d"</span>
  | _ <span class="hljs-keyword">when</span> c.B &lt; <span class="hljs-number">127</span>uy &amp;&amp; c.G &gt; <span class="hljs-number">127</span>uy &amp;&amp; c.R &lt; <span class="hljs-number">127</span>uy -&gt; Some <span class="hljs-string">"c"</span>
  | _ <span class="hljs-keyword">when</span> c.B &lt; <span class="hljs-number">127</span>uy &amp;&amp; c.G &lt; <span class="hljs-number">127</span>uy &amp;&amp; c.R &lt; <span class="hljs-number">127</span>uy -&gt; Some <span class="hljs-string">"s"</span>
  | _ -&gt; None
</code></pre>
<p>This function is used by <code>getCardSuit</code> function of type <code>(int -&gt; int -&gt; Color) -&gt; int -&gt; int -&gt; string</code>.
Its first argument is a function which returns the color of a pixel based on <code>(x, y)</code>
relative coordinates (starting with 0). The next two arguments are width and height of the cards. Result is
the same suit name that we described above. The function loops through all the pixels, gets a suit per
pixel and then returns the suit which is the most popular among them. Alternatively, we could just return
the first suit found, but my implementation looks more resilient:</p>
<pre class="highlight"><code class="hljs fsharp"><span class="hljs-keyword">let</span> getCardSuit getPixel width height =    
  seq { <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> .. width - <span class="hljs-number">1</span> <span class="hljs-keyword">do</span>
          <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> .. height - <span class="hljs-number">1</span> <span class="hljs-keyword">do</span>
            <span class="hljs-keyword">yield</span> getSuit (getPixel x y) }
  |&gt; Seq.choose id
  |&gt; Seq.countBy id
  |&gt; Seq.maxBy (<span class="hljs-keyword">fun</span> (v, c) -&gt; c)
  |&gt; fst
</code></pre>
<h2 id="producing-the-black-white-pattern">Producing the black &amp; white pattern</h2>
<p><code>getCardPattern</code> accepts the same parameters as <code>getSuits</code> but returns <code>seq&lt;BW&gt;</code> instead. This is
a sequence of black or white pixels with a helper union type:</p>
<pre class="highlight"><code class="hljs fsharp"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">BW</span> </span>= B | W
</code></pre>
<p>The function body enumerates the pixels and return black or white result as a flat sequence:</p>
<pre class="highlight"><code class="hljs fsharp"><span class="hljs-keyword">let</span> getCardPattern getPixel width height =
  <span class="hljs-keyword">let</span> isWhite (c : Color) =
    <span class="hljs-keyword">if</span> c.B &gt; <span class="hljs-number">127</span>uy &amp;&amp; c.G &gt; <span class="hljs-number">127</span>uy &amp;&amp; c.R &gt; <span class="hljs-number">127</span>uy <span class="hljs-keyword">then</span> W
    <span class="hljs-keyword">else</span> B

  seq { <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> .. width - <span class="hljs-number">1</span> <span class="hljs-keyword">do</span>
          <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> .. height - <span class="hljs-number">1</span> <span class="hljs-keyword">do</span>
            <span class="hljs-keyword">yield</span> isWhite (getPixel x y) }
</code></pre>
<h2 id="card-face-recognition">Card face recognition</h2>
<p>Having a black and white pattern, we can compare it with the predefined patterns and pick the
most similar one. A pattern is defined with a helper type</p>
<pre class="highlight"><code class="hljs fsharp"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">CardPattern</span> </span>= {
  Card: string
  Pattern: BW array
}
</code></pre>
<p><code>Pattern</code> is a sequence which is equivalent to the sequence we got on the previous step. 
<code>Card</code> is a string of hand face value 2, 3, 4 .. A. <code>getCardFace</code> has the type 
<code>CardPattern[] -&gt; seq&lt;BW&gt; -&gt; string</code>, it accepts an array of known patterns and a pattern
of the card to be recognized. It compares patterns pixel by pixel and returns the card
which has the biggest amount of matches:</p>
<pre class="highlight"><code class="hljs fsharp"><span class="hljs-keyword">let</span> getCardFace patterns bws =
  <span class="hljs-keyword">let</span> matchCount h p =
    Seq.zip h p
    |&gt; Seq.map (<span class="hljs-keyword">fun</span> (v1, v2) -&gt; <span class="hljs-keyword">if</span> v1 = v2 <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>)
    |&gt; Seq.sum
    |&gt; decimal
  <span class="hljs-keyword">let</span> maxPattern = patterns |&gt; Array.maxBy (<span class="hljs-keyword">fun</span> p -&gt; matchCount bws p.Pattern)
  maxPattern.Card
</code></pre>
<h2 id="getting-the-known-patterns">Getting the known patterns</h2>
<p>So how do we create an array of known patterns? It&#39;s tedious to do manually, so
we use a bit of code generation.
Basically we just take several screenshots of poker tables and feed them to the following 
helper function:</p>
<pre class="highlight"><code class="hljs fsharp"><span class="hljs-keyword">let</span> parsePattern getPixel width height =
  getCardPattern getPixel width height
  |&gt; Seq.map (<span class="hljs-keyword">fun</span> x -&gt; <span class="hljs-keyword">if</span> x = B <span class="hljs-keyword">then</span> <span class="hljs-string">"B"</span> <span class="hljs-keyword">else</span> <span class="hljs-string">"W"</span>) 
  |&gt; String.concat <span class="hljs-string">";"</span>
</code></pre>
<p>The function creates a string which can be copy-pasted into F# array of <code>BW</code>.</p>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>Here is the facade function that will be called from the outside:</p>
<pre class="highlight"><code class="hljs fsharp"><span class="hljs-keyword">let</span> recognizeCard getPixel width height = 
  <span class="hljs-keyword">let</span> value = 
    getCardPattern getPixel width height 
    |&gt; getCardValue patterns
  <span class="hljs-keyword">let</span> suit = getCardSuit getPixel width height
  value + suit
</code></pre>
<p>The calling code looks like this:</p>
<pre class="highlight"><code class="hljs fsharp"><span class="hljs-keyword">let</span> image = <span class="hljs-keyword">new</span> Bitmap(<span class="hljs-string">"..."</span>);

<span class="hljs-keyword">let</span> getPixel offsetX offsetY x y = 
  image.GetPixel(offsetX + x, offsetY + y)

<span class="hljs-keyword">let</span> hand = (recognizeCard (getPixel leftX top) width height) + (recognizeCard (getPixel rightX top) width height)
</code></pre>
<p><code>leftX</code>, <code>rightX</code>, <code>top</code>, <code>width</code> and <code>height</code> are well-known parameters of cards locations within a screenshot, 
which are hard coded for a given table size.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The full code for card recognition can be found in my <a href="https://github.com/mikhailshilkov/mikhailio-samples/blob/master/HandRecognition.fs">github repo</a>. It&#39;s just 75 lines of code which is
much less that one could imagine for a task of image recognition. Similar code could be used to recognize other
fixed objects at poker table: dealer button location, action buttons, checkboxes etc. In the next part of this
series I will show how to recognize non-fixed parts: text and numbers.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Monads explained in C#</title>
        <link href="http://mikhail.io/2016/01/monads-explained-in-csharp"/>
        <updated>2016-01-25T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-01-25,/2016/01/monads-explained-in-csharp</id>
        <content type="html"><![CDATA[<p>It looks like there is a mandatory post that every blogger who learns functional programming should write:
what a Monad is. Monads have the reputation of being something very abstract and very confusing for every
developer who is not a hipster Haskell programmer. They say that once you understand what a monad is, you 
loose the ability to explain it in simple language. Doug Crockford was the first one to lay this rule down, but
it becomes kind of obvious once you read 3 or 5 &quot;explanations&quot; on the web. Here is my attempt.</p>
<h2 id="monads-are-container-types">Monads are container types</h2>
<p>Monads are containers which encapsulate some kind of functionality. It&#39;s that simple. The goals of monads
are similar to generic goals of any encapsulation in software development practices: hide the implementation
details from the client, but provide a proper way to use the hidden functionality. It&#39;s not because we 
want to be able to change the implementation, it&#39;s because we want to make the client as simple as possible
and to enforce the best way of code structure. Quite often monads provide the way to avoid imperative code
in favor of functional style.</p>
<p>Monads are flexible, so in C# they should be represented as generic types:</p>
<pre class="highlight"><code class="hljs undefined">public class Monad&lt;T&gt;
{
}
</code></pre>
<h2 id="monad-instances-can-be-created">Monad instances can be created</h2>
<p>Quite an obvious statement, isn&#39;t it. Having a class <code>Monad&lt;T&gt;</code>, there should be a way to create an object
of this class out of an instance of type <code>T</code>. In functional world this operation is known as <code>Return</code> 
function. In C# it can be as simple as a constructor:</p>
<pre class="highlight"><code class="hljs undefined">public class Monad&lt;T&gt;
{
    public Monad(T instance)
    {
    }
}
</code></pre>
<p>But usually it makes sense to define an extension method to enable fluent syntax of monad creation:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MonadExtensions</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Monad&lt;T&gt; Return&lt;T&gt;(<span class="hljs-keyword">this</span> T instance) =&gt; <span class="hljs-keyword">new</span> Monad&lt;T&gt;(instance);
}
</code></pre>
<h2 id="monads-can-be-chained-to-create-new-monads">Monads can be chained to create new monads</h2>
<p>This is the property which makes monads so useful, but also a bit confusing. In functional world this
operation is known as functional composition and is expressed with the <code>Bind</code> function (or <code>&gt;&gt;=</code> operator).
Here is the signature of <code>Bind</code> method in C#:</p>
<pre class="highlight"><code class="hljs undefined">public class Monad&lt;T&gt;
{
    public Monad&lt;TO&gt; Bind&lt;TO&gt;(Func&lt;T, Monad&lt;TO&gt;&gt; func)
    {
    }
}
</code></pre>
<p>As you can see, the <code>func</code> argument is a complicated thing. It accepts an argument of type <code>T</code> (not
a monad) and returns an instance of <code>Monad&lt;TO&gt;</code> where <code>TO</code> is another type. Now, our first instance
of <code>Monad&lt;T&gt;</code> knows how to bind itself to this function to produce another instance of monad of the
new type. The full power of monads comes when we compose several of them in one chain:</p>
<pre class="highlight"><code class="hljs cs">initialValue
    .Return()
    .Bind(v1 =&gt; produceV2OutOfV1(v1))
    .Bind(v2 =&gt; produceV3OutOfV2(v2))
    .Bind(v3 =&gt; produceV4OutOfV3(v3))
    <span class="hljs-comment">//...</span>
</code></pre>
<p>And that&#39;s about it. Let&#39;s have a look at some examples.</p>
<h2 id="example-maybe-option-type">Example: Maybe (Option) type</h2>
<p><code>Maybe</code> is the 101 monad which is used everywhere. <code>Maybe</code> is another approach to dealing
with &#39;no value&#39; value which is alternative to the concept <code>null</code>. Basically your object should
never be null, but it can either have <code>Some</code> value or be <code>None</code>. F# has a maybe implementation
built into the language: it&#39;s called <code>option</code> type. Here is a sample implementation in C#:</p>
<pre class="highlight"><code class="hljs undefined">public class Maybe&lt;T&gt; where T : class
{
    private T value;

    public Maybe(T someValue)
    {
        if (someValue == null)
            throw new AgrumentNullException(nameof(someValue));
        this.value = someValue;
    }

    private Maybe()
    {
    }

    public Maybe&lt;TO&gt; Bind&lt;TO&gt;(Func&lt;T, Maybe&lt;TO&gt;&gt; func)
    {
        return value != null ? new Maybe&lt;TO&gt;(func(value)) : Maybe&lt;TO&gt;.None();
    }

    public static Maybe&lt;T&gt; None() =&gt; new Maybe&lt;T&gt;(null);
}
</code></pre>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MaybeExtensions</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Maybe&lt;T&gt; NullToMaybe&lt;T&gt;(T <span class="hljs-keyword">value</span>)
    {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span> != <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">new</span> Maybe&lt;T&gt;(<span class="hljs-keyword">value</span>) : Maybe&lt;T&gt;.None();
    }
}
</code></pre>
<p>Return function is implemented with a combination of a public constructor which accepts <code>Some</code> value
(notice that <code>null</code> is not allowed) and a static <code>None</code> method returning an object of &#39;no value&#39;.
<code>NullToMaybe</code> combines both of them in one call. </p>
<p><code>Bind</code> function is implemented explicitly. </p>
<p>Let&#39;s have a look at a use case. Imagine we have repositories which load the data from an external
storage (I&#39;ll put them to a single class for the sake of brevity):</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Repository</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> Maybe&lt;Customer&gt; <span class="hljs-title">GetCustomer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span>
    </span>{
        <span class="hljs-keyword">var</span> row = ReadRowFromDb(id); <span class="hljs-comment">// returns null if not found</span>
        <span class="hljs-keyword">return</span> row.NullToMaybe().Bind(r =&gt; ConvertRowToCustomer(r));
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> Maybe&lt;Address&gt; <span class="hljs-title">GetAddress</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>=&gt; ... <span class="hljs-comment">// similar implementation</span>

    <span class="hljs-function"><span class="hljs-keyword">public</span> Maybe&lt;Order&gt; <span class="hljs-title">GetOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>=&gt; ... <span class="hljs-comment">// similar implementation</span>
}
</code></pre>
<p>The repository reads a row from the database and then converts its value or null to a <code>Maybe&lt;DataRow&gt;</code>.
Then it&#39;s immediately bound to a function which converts the row to a domain object (I&#39;ll omit this
function&#39;s implementation but remember that it can also return a <code>Maybe&lt;Customer&gt;</code> if that&#39;s warranted
by requirements).</p>
<p>Now here is a more sophisticated example of <code>Bind</code> method composition:</p>
<pre class="highlight"><code class="hljs cs">Maybe&lt;Shipper&gt; shipperOfLastOrderOnCurrentAddress =
    repo.GetCustomer(customerId)
        .Bind(c =&gt; repo.GetAddress(c.Address.Id))
        .Bind(a =&gt; repo.GetOrder(a.LastOrder.Id))
        .Bind(o =&gt; o.Shipper);
</code></pre>
<p>If you think that the syntax looks very much like a LINQ query with a bunch of <code>Select</code> statements, you are
not the only one ;) One of the common implementations of <code>Maybe</code> implements <code>IEnumerable</code> interface
which allows a more C#-idiomatic binding composition. Actually:</p>
<h2 id="ienumerable-selectmany-is-a-monad-">IEnumerable + SelectMany is a monad </h2>
<p><code>IEnumerable</code> is an interface for enumerable containers.</p>
<p>Enumerable containers can be created - thus the <code>Return</code> monadic operation.</p>
<p>The <code>Bind</code> operation is defined by the standard LINQ extension method, here is
its signature:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IEnumerable&lt;B&gt; SelectMany&lt;A, B&gt;(
    <span class="hljs-keyword">this</span> IEnumerable&lt;A&gt; first, 
    Func&lt;A, IEnumerable&lt;B&gt;&gt; selector)
</code></pre>
<p>And here is an example of composition:</p>
<pre class="highlight"><code class="hljs cs">IEnumerable&lt;Shipper&gt; someWeirdListOfShippers =
    customers
        .SelectMany(c =&gt; c.Addresses)
        .SelectMany(a =&gt; a.Orders)
        .SelectMany(o =&gt; o.Shippers);
</code></pre>
<p>The query has no idea about how the collections are stored (encapsulated in
containers). We use functions <code>A -&gt; IEnumerable&lt;B&gt;</code> to produce new enumerables
(<code>Bind</code> operation).</p>
<h2 id="conclusion">Conclusion</h2>
<p>You should not be afraid of the &quot;M-word&quot; just because you are the C# programmer. C# does not have
a notion of monads as predefined language constructs, but it doesn&#39;t mean we can&#39;t borrow some
ideas from the functional world. Having said that, it&#39;s also true that C# is lacking some powerful
ways to combine and generalize monads which are possible in Haskell and other functional languages.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Fire-and-forget in Service Fabric actors</title>
        <link href="http://mikhail.io/2016/01/fire-and-forget-in-service-fabric-actors"/>
        <updated>2016-01-13T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-01-13,/2016/01/fire-and-forget-in-service-fabric-actors</id>
        <content type="html"><![CDATA[<p>At the <a href="http://www.meetup.com/Webscale-Architecture-NL/events/225979118/">recent Webscale Architecture meetup</a> 
we discussed two implementations of the Actor model in the .NET ecosystem: 
<a href="http://akka.net">Akka.NET</a> and <a href="https://azure.microsoft.com/en-us/documentation/articles/service-fabric-reliable-actors-introduction/">Azure Service Fabric Actors</a>. 
One important discussion was
around <strong>Ask</strong> vs <strong>Tell</strong> call model. With <strong>Tell</strong> model, the Sender just sends the
message to the Recepient without waiting for a result to come back. <strong>Ask</strong> model
means the Sender will at some point get a response back from the Receiver, potencially
blocking its own execution.</p>
<p>The default model of Akka.NET is <strong>Tell</strong>:</p>
<blockquote>
<p><strong>Tell: Fire-forget</strong></p>
<p>This is the preferred way of sending messages. No blocking waiting for 
a message. This gives the best concurrency and scalability characteristics.</p>
</blockquote>
<p>On the contrary, the default model for Service Fabric Actors is RPC-like
<strong>Ask</strong> model. Let&#39;s have a close look at this model, and then see how we can
implement <strong>Tell</strong> (or <strong>Fire-and-Forget</strong>) model.</p>
<p>Actor definition starts with an interface:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IHardWorkingActor</span> : <span class="hljs-title">IActor</span>
{
    <span class="hljs-function">Task <span class="hljs-title">DoWork</span><span class="hljs-params">(<span class="hljs-keyword">string</span> payload)</span></span>;
}
</code></pre><p>As you can see, the method does not return any useful data, which means
the client code isn&#39;t really interested in waiting for the operation to
complete. Here&#39;s how we implement this interface in the Actor class:</p>
<pre class="highlight"><code class="hljs vala"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HardWorkingActor</span> : <span class="hljs-title">Actor</span>, <span class="hljs-title">IHardWorkingActor</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> Task DoWork(<span class="hljs-keyword">string</span> payload)
    {
        ActorEventSource.Current.ActorMessage(<span class="hljs-keyword">this</span>, <span class="hljs-string">"Doing Work"</span>);
        await Task.Delay(<span class="hljs-number">500</span>);
    }
}
</code></pre><p>This test implementation simulates the hard work by means of an artificial 500 ms delay.</p>
<p>Now, let&#39;s look at the client code. Let&#39;s say, the client receives the payloads
from a queue or a web front-end and needs to go as fast as possible. It gets a payload,
creates an actor proxy to dispatch the payload to, then it just wants 
to continue with the next payload. Here is the &quot;Ask&quot; implementation based on 
the Service Fabric samples:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;
<span class="hljs-keyword">var</span> timer = <span class="hljs-keyword">new</span> Stopwatch();
timer.Start();
<span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)
{
    <span class="hljs-keyword">var</span> proxy = ActorProxy.Create&lt;IHardWorkingActor&gt;(ActorId.NewId(), <span class="hljs-string">"fabric:/Application1"</span>);
    <span class="hljs-keyword">await</span> proxy.DoWork($<span class="hljs-string">"Work ${i++}"</span>);
    Console.WriteLine($<span class="hljs-string">@"Sent work to Actor {proxy.GetActorId()}, 
                         rate is {i / timer.Elapsed.TotalSeconds}/sec"</span>);
}
</code></pre><p>Note an <code>await</code> operator related to every call. That means that the client will
block until the actor work is complete. When we run the client, no surprise that
we get the rate of about 2 messages per second:</p>
<pre class="highlight"><code class="hljs applescript">Sent work <span class="hljs-keyword">to</span> Actor <span class="hljs-number">1647857287613311317</span>, rate <span class="hljs-keyword">is</span> <span class="hljs-number">1</span>,<span class="hljs-number">98643230380293</span>/sec
</code></pre><p>That&#39;s not very exciting. What we want instead is to tell the actor to do the
work and immediately proceed to the next one. Here&#39;s how the client call should
look like:</p>
<pre class="highlight"><code class="hljs bash">proxy.DoWork($<span class="hljs-string">"Work <span class="hljs-variable">${i++}</span>"</span>).FireAndForget();
</code></pre><p>Instead of <code>await</code>-ing, we make a <code>Task</code>, pass it to some (not yet existing)
extension method and proceed immediately. It appears that the implementation 
of such extension method is trivial:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TaskHelper</span>
{       
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FireAndForget</span><span class="hljs-params">(<span class="hljs-keyword">this</span> Task task)</span>
    </span>{
        Task.Run(<span class="hljs-keyword">async</span>() =&gt; <span class="hljs-keyword">await</span> task).ConfigureAwait(<span class="hljs-keyword">false</span>);
    }
} 
</code></pre><p>The result looks quite different from what we had before:</p>
<pre class="highlight"><code class="hljs applescript">Sent work <span class="hljs-keyword">to</span> Actor -<span class="hljs-number">8450334792912439527</span>, rate <span class="hljs-keyword">is</span> <span class="hljs-number">408</span>,<span class="hljs-number">484162592517</span>/sec
</code></pre><p>400 messages per second, which is some 200x difference... </p>
<p>The conclusions are simple:</p>
<ul>
<li><p>Service Fabric is a powerful platform and programming paradigm which doesn&#39;t
limit your choice of communication patterns</p>
</li>
<li><p>Design the communication models carefully based on your use case, don&#39;t
take the defaults for granted</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
        <title>Validation with Either data type in C#</title>
        <link href="http://mikhail.io/2016/01/validation-with-either-data-type-in-csharp"/>
        <updated>2016-01-06T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-01-06,/2016/01/validation-with-either-data-type-in-csharp</id>
        <content type="html"><![CDATA[<p>In this article we will employ a functional monadic concept <strong>Either</strong> to make validation
code more expressive and easier to maintain.</p>
<h2 id="problem">Problem</h2>
<p>Let&#39;s say we get a request from some client code and we need to check if this
request is actually valid. If it&#39;s not valid, we want to make a detailed description
of the problems that we identified. If it is valid, we want to produce a response
about the successful acceptance of the request. Let&#39;s define the classes:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Request</span> { ... }
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Response</span> { ... }
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ValidationError</span> { ... }
</code></pre>
<p>Now, we need a function which would accept a <code>Request</code> and would return <code>Response</code>
or <code>ValidationError</code>. Let&#39;s look at some possible solutions.</p>
<h2 id="throw-an-exception">Throw an exception</h2>
<p>Validation <em>error</em> sounds like it could be an exception:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> Response <span class="hljs-title">Validate</span><span class="hljs-params">(Request r)</span>
</span>{
   <span class="hljs-keyword">if</span> (!Valid(r))
       <span class="hljs-function"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title">ValidationException</span><span class="hljs-params">(<span class="hljs-keyword">new</span> ValidationError(...)</span>)</span>;

   <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">Response</span><span class="hljs-params">(r)</span></span>;
}
</code></pre>
<p>This approach is really bad though. You have to declare a special exception
class to hold the validation error. But even worse, exception handling is not
explicit - you don&#39;t see the exception type when you look at method signature.
Client processing code is going to be messed up because of exception handling.
Never use exceptions for your business logic flow.</p>
<h2 id="output-parameter">Output parameter</h2>
<p>We could make an output parameter of <code>ValidationError</code> type:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> Response <span class="hljs-title">Validate</span><span class="hljs-params">(Request r, <span class="hljs-keyword">out</span> ValidationError error)</span>
</span>{
    <span class="hljs-keyword">if</span> (Valid(r))
    { 
        error = <span class="hljs-keyword">new</span> ValidationError(...);
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    }

    error = <span class="hljs-keyword">null</span>;
    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">Response</span><span class="hljs-params">(r)</span></span>;
}
</code></pre>
<p>Now the interface is more explicit: client won&#39;t be able to completely ignore
the fact that an error is possible. But output parameters are not really
easy to use in C#, especially in fluent-style client code. Moreover, we are
using nulls as a way to represent missing object, which is a smell by itself,
because nulls are not explicit. Never use nulls in your business logic.</p>
<h2 id="return-the-combined-result">Return the combined result</h2>
<p>We could declare a container class which would keep both <code>Response</code> and 
<code>ValidationError</code>, and then return it from the method.</p>
<pre class="highlight"><code class="hljs undefined">public class Both&lt;TData, TError&gt;
{
    public TData Data { get; set; }
    public TErrro Error { get; set; }
}
...
public Both&lt;Response, ValidationError&gt; Validate(Request r)
{
    return Valid(r) 
        ? new Both&lt;Response, ValidationError&gt; { Data = new Response(r) }
        : new Both&lt;Response, ValidationError&gt; { Data = new ValidationError(...) };
}
</code></pre>
<p>Looks much nicer, we are getting there. Now it&#39;s a pure function with input
and output parameters, but we still use null for result state representation.
Let&#39;s see how we can solve it with <strong>Either</strong> data structure.</p>
<h2 id="introducing-either">Introducing Either</h2>
<p>Instead of returning <code>Both</code> with nullable properties, let&#39;s return <code>Either</code> 
with just one of them. When constructing an object, you can specify either
a &#39;left&#39; or a &#39;right&#39; argument, but not both.</p>
<pre class="highlight"><code class="hljs undefined">public class Either&lt;TL, TR&gt;
{
    private readonly TL left;
    private readonly TR right;
    private readonly bool isLeft;

    public Either(TL left)
    {
        this.left = left;
        this.isLeft = true;
    }

    public Either(TR right)
    {
        this.right = right;
        this.isLeft = false;
    }
}
</code></pre>
<p>Now, the main difference is in how the client uses it. There are no properties
to accept <code>Left</code> and <code>Right</code> parts. Instead we define the following method:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> T Match&lt;T&gt;(Func&lt;TL, T&gt; leftFunc, Func&lt;TR, T&gt; rightFunc)
    =&gt; <span class="hljs-keyword">this</span>.isLeft ? leftFunc(<span class="hljs-keyword">this</span>.left) : rightFunc(<span class="hljs-keyword">this</span>.right);
</code></pre>
<p>That&#39;s the concept of pattern matching implemented in C# world. If a left value 
is specified, <code>Match</code> will return the result of the left function, otherwise the result
of the right function.</p>
<p>Another improvement would be to create explicit operators for easy conversions
from left and right types:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">implicit</span> <span class="hljs-keyword">operator</span> Either&lt;TL, TR&gt;(TL left) =&gt; <span class="hljs-keyword">new</span> Either&lt;TL, TR&gt;(left);

<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">implicit</span> <span class="hljs-keyword">operator</span> Either&lt;TL, TR&gt;(TR right) =&gt; <span class="hljs-keyword">new</span> Either&lt;TL, TR&gt;(right);
</code></pre>
<p>Let&#39;s have a look at a complete example.</p>
<h2 id="why-it-s-great">Why it&#39;s great</h2>
<p>Here is the service code written with <code>Either</code>:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> Either&lt;Response, ValidationError&gt; Validate(Request r)
{
    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">Valid</span><span class="hljs-params">(r)</span> 
        ? Data </span>= <span class="hljs-keyword">new</span> Response(r)
        : <span class="hljs-keyword">new</span> ValidationError(...);
}
</code></pre>
<p>Clean and nice! Now a simplistic client:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> validated = service.Validate(request);
Console.WriteLine(
    validated.Match(
        result =&gt; $<span class="hljs-string">"Success: {result}"</span>,
        error =&gt; $<span class="hljs-string">"Error: {error}"</span>)
    );
</code></pre>
<p>Simple, readable , no conditionals, no null checks, no way to silently ignore the fact that
validation may fail.</p>
<h2 id="show-me-the-code">Show me the code</h2>
<p>You can find the definition of <code>Either</code> class in my <a href="https://github.com/mikhailshilkov/mikhailio-samples/blob/master/Either%7BTL%2CTR%7D.cs">github repo</a>.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Weaving your domain classes with Fody</title>
        <link href="http://mikhail.io/2015/12/weaving-your-domain-classes-with-fody"/>
        <updated>2015-12-22T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-12-22,/2015/12/weaving-your-domain-classes-with-fody</id>
        <content type="html"><![CDATA[<p>When I model the business domain with C#, the resulting data structures tend to contain a lot of boilerplate code. It&#39;s repeated from class to class and it gets more difficult to see the essence of the model behind the repetitive cruft. Here is a simplistic example, which illustrates the problem. Let&#39;s say we are modelling Trips, and for each <code>Trip</code> we need to keep track of <code>Origin</code>, <code>Destination</code> and <code>Vehicle</code> which executes the <code>Trip</code>, nothing else. Here is a code to create an sample trip:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> trip = <span class="hljs-keyword">new</span> Trip(
    origin: <span class="hljs-keyword">new</span> Location(<span class="hljs-string">"Paris"</span>, geoParis), 
    destination: <span class="hljs-keyword">new</span> Location(<span class="hljs-string">"Amsterdam"</span>, geoAmsterdam),
    vehicle: <span class="hljs-keyword">new</span> Vehicle(<span class="hljs-string">"TBL-12-H"</span>, Type.HeavyTruck)
</code></pre>
<p>Let&#39;s include these requirements as parts of our trip model:</p>
<ul>
<li>It has a constructor which accepts three arguments (see above)</li>
<li>It has 3 read-only properties which are assigned from constructor parameters</li>
<li>It should not allow null values to be assigned to these properties via constructor</li>
<li>It should be a Value object, that is two objects with same properties should be equal</li>
</ul>
<h2 id="initial-version">Initial version</h2>
<p>First, let&#39;s implement these requirement in a usual way:</p>
<pre class="highlight"><code class="hljs undefined">public class Trip : IEquatable&lt;Trip&gt;
{
    public Trip(Location origin, Location destination, Vehicle vehicle)
    {
        if (origin == null) throw new ArgumentNullException(nameof(origin));
        if (destination == null) throw new ArgumentNullException(nameof(destination));
        if (vehicle == null) throw new ArgumentNullException(nameof(vehicle));

        this.Origin = origin;
        this.Destination = destination;
        this.Vehicle = vehicle;
    }

    public Location Origin { get; }
    public Location Destination { get; }
    public Vehicle Vehicle { get; }

    public bool Equals(Trip other)
    {
        return Equals(this.Origin, other.Origin) 
            &amp;&amp; Equals(this.Destination, other.Destination) 
            &amp;&amp; Equals(this.Vehicle, other.Vehicle);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
        {
            return false;
        }
        if (ReferenceEquals(this, obj))
        {
            return true;
        }
        if (obj.GetType() != this.GetType())
        {
            return false;
        }
        return Equals((Trip)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = this.Origin.GetHashCode();
            hashCode = (hashCode * 397) ^ this.Destination.GetHashCode();
            hashCode = (hashCode * 397) ^ this.Vehicle.GetHashCode();
            return hashCode;
        }
    }

    public static bool operator ==(Trip tripA, Trip tripB)
    {
        return object.Equals(tripA, tripB);
    }

    public static bool operator !=(Trip tripA, Trip tripB)
    {
        return !object.Equals(tripA, tripB);
    }
}
</code></pre>
<p>That&#39;s a lot of code! It&#39;s very repetitive but it&#39;s also tricky: you can implement it incorrectly in some slight way that wouldn&#39;t be easy to catch until it silently fails one day. So imagine how many tests you need to validate it.</p>
<p>I implemented this code with help of Resharper, which makes it so much easier, but the code is still a heavy luggage to carry on. This class is hard to read and hard to change - every time you add a property you should not forget to update all the corresponding methods. </p>
<p>Are there other options?</p>
<h2 id="introducing-fody">Introducing Fody</h2>
<p><a href="https://github.com/Fody/Fody">Fody</a> is an extensible tool for weaving .NET assemblies. It means that you can use it to improve your code automatically at the time of compilation. Fody itself doesn&#39;t do much to the code, but it has a collection of plugins to actually change it. For this example I will use two of them: </p>
<ul>
<li><a href="https://github.com/Fody/NullGuard"><strong>NullGuard</strong></a> - guards all the input parameters, output parameters and return values of all types in a current assembly not to be null. If null value is passed or returned, the weaved code with throw an exception.</li>
<li><a href="https://github.com/Fody/Equals"><strong>Equals</strong></a> - you can mark a class with <code>[Equals]</code> attribute and Fody will implement <code>Equals()</code> and <code>GetHashCode()</code> methods and <code>==</code> operator for you by comparing all public properties of the annotated class.</li>
</ul>
<p>To install them just execute </p>
<pre class="highlight"><code class="hljs ps">PM&gt; Install-Package NullGuard.Fody
PM&gt; Install-Package Equals.Fody
</code></pre>
<p>The root of your project will now contain the following configuration file:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">Weavers</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">NullGuard</span> <span class="hljs-attribute">IncludeDebugAssert</span>=<span class="hljs-value">"false"</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">Equals</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">Weavers</span>&gt;</span>
</code></pre>
<p>(I&#39;ve added <code>IncludeDebugAssert</code> attribute manually to disable assert statements in debug mode)</p>
<p>Let&#39;s adjust our class to make use of the plugins:</p>
<pre class="highlight"><code class="hljs cs">[Equals]
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Trip</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Trip</span><span class="hljs-params">(Location origin, Location destination, Vehicle vehicle)</span>
    </span>{
        <span class="hljs-keyword">this</span>.Origin = origin;
        <span class="hljs-keyword">this</span>.Destination = destination;
        <span class="hljs-keyword">this</span>.Vehicle = vehicle;
    }

    <span class="hljs-keyword">public</span> Location Origin { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Location Destination { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Vehicle Vehicle { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>And that&#39;s it! We still get the same functionality but the code is just trivial. Let&#39;s see how it works:</p>
<ul>
<li><code>Equals</code> attribute means that we want Fody plugin to implement all the equality-related boilerplate code for this class, including operators and <code>IEquatable&lt;T&gt;</code> implementation. So this plugin is in <em>opt-in</em> mode.</li>
<li>I used no attributes from <code>NullGuard</code> plugin. This plugin works in <em>opt-out</em> mode, i.e. it changes all the classes by default, and if you don&#39;t want it for some piece of code - you can always opt out. This default makes a lot of sense to me: I don&#39;t want any nulls in my code unless I really need them due to some external contracts.</li>
</ul>
<p>Let&#39;s open the resulting assembly in <a href="http://ilspy.net/">ILSpy</a> to see what it compiles to. Here is the constructor:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Trip</span><span class="hljs-params">(Location origin, Location destination, Vehicle vehicle)</span>
</span>{
    <span class="hljs-keyword">bool</span> flag = origin == <span class="hljs-keyword">null</span>;
    <span class="hljs-keyword">if</span> (flag)
    {
        <span class="hljs-function"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title">ArgumentNullException</span><span class="hljs-params">(<span class="hljs-string">"origin"</span>)</span></span>;
    }
    <span class="hljs-keyword">bool</span> flag2 = destination == <span class="hljs-keyword">null</span>;
    <span class="hljs-keyword">if</span> (flag2)
    {
        <span class="hljs-function"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title">ArgumentNullException</span><span class="hljs-params">(<span class="hljs-string">"destination"</span>)</span></span>;
    }
    <span class="hljs-keyword">bool</span> flag3 = vehicle == <span class="hljs-keyword">null</span>;
    <span class="hljs-keyword">if</span> (flag3)
    {
        <span class="hljs-function"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title">ArgumentNullException</span><span class="hljs-params">(<span class="hljs-string">"vehicle"</span>)</span></span>;
    }
    <span class="hljs-keyword">this</span>.&lt;Origin&gt;k__BackingField = origin;
    <span class="hljs-keyword">this</span>.&lt;Destination&gt;k__BackingField = destination;
    <span class="hljs-keyword">this</span>.&lt;Vehicle&gt;k__BackingField = vehicle;
}
</code></pre>
<p>It&#39;s bit more verbose but essentially equivalent to what I did manually before. By default null guard will be very strict, so you will see that even auto-property&#39;s return values are checked:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> Location Origin
{
    [CompilerGenerated]
    <span class="hljs-keyword">get</span>
    {
        Location expr_06 = <span class="hljs-keyword">this</span>.&lt;Origin&gt;k__BackingField;
        <span class="hljs-keyword">if</span> (expr_06 == <span class="hljs-keyword">null</span>)
        {
            <span class="hljs-function"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title">InvalidOperationException</span><span class="hljs-params">(<span class="hljs-string">"[NullGuard] Return value of property 'ETA.Domain.Location ETA.Domain.Trip::Origin()' is null."</span>)</span></span>;
        }
        <span class="hljs-keyword">return</span> expr_06;
    }
}
</code></pre>
<p>It doesn&#39;t make much sense to me, so I configured Fody on assembly level to check only arguments and return values:</p>
<pre class="highlight"><code class="hljs cs">[assembly: NullGuard(ValidationFlags.Arguments | ValidationFlags.ReturnValues)]
</code></pre>
<p>Here is a set of operations related to equality (I&#39;ll skip the body in sake of brevity):</p>
<pre class="highlight"><code class="hljs undefined">public class Trip : IEquatable&lt;Trip&gt;
{
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    private static bool EqualsInternal(Trip left, Trip right) { ... }
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    public override bool Equals(Trip other) { ... }
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    public override bool Equals(object obj) { ... }
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    public override int GetHashCode() { ... }
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    public static bool operator ==(Trip left, Trip right) { ... }
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    public static bool operator !=(Trip left, Trip right) { ... }
}
</code></pre>
<p>There is a catch (at least at the time of writing): the auto-generated <code>==</code> and <code>!=</code> operators won&#39;t work properly if you use them inside the same assembly where the type is defined. That&#39;s because the C# compiler will only use these operators properly if they are defined at compile time, and they only get defined after the compilation (weaving takes place after IL is produced). See <a href="https://github.com/Fody/Equals/issues/10">the issue on GitHub</a> for details.</p>
<h2 id="bonus-a-proper-solution">Bonus - a proper solution</h2>
<p>Here is how you actually should define similar types:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">Trip</span> </span>= 
  { Origin : Location
    Destination : Location
    Vehicle : Vehicle }
</code></pre>
<p>No nulls are possible here and equality works out of the box. There&#39;s just one major detail: it&#39;s F#...</p>
]]></content>
    </entry>
    
    <entry>
        <title>Deploy your SPA to Azure</title>
        <link href="http://mikhail.io/2015/12/deploy-your-spa-to-azure"/>
        <updated>2015-12-14T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-12-14,/2015/12/deploy-your-spa-to-azure</id>
        <content type="html"><![CDATA[<p>In this post I want to share a simple tutorial on how to deploy your single page application into the Azure cloud.</p>
<h2 id="the-goal">The goal</h2>
<p>Here is the initial setup:</p>
<ul>
<li><p>I have a Single Page Application (SPA) done with HTML/JavaScript in a separate local Git repository</p>
</li>
<li><p>I have a ASP.NET 4.6 Web API service which serves the data for SPA in another local Git repository</p>
</li>
<li><p>Now I want to deploy both to the Azure cloud, and make it easy to deploy changes in the future</p>
</li>
</ul>
<h2 id="the-solution">The solution</h2>
<p>We will deploy our application to Azure Cloud Services / Web application.</p>
<ol>
<li><p>Go to <a href="https://portal.azure.com">Azure Portal</a> then <code>App Services -&gt; Add</code> and follow the wizard to create your Web app. Here is mine:
<img src="http://mikhail.io/2015/12/deploy-your-spa-to-azure/azurewebapp.jpg" alt="Azure web app"></p>
</li>
<li><p>Follow <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/">this guide</a> to create a new Git repository and setup continuous deployment from this repository to Azure web application. You are good once you see this working (step 6):
<img src="http://mikhail.io/2015/12/deploy-your-spa-to-azure/git-hello-git.png" alt="Hello git running in Azure"></p>
</li>
<li><p>Copy your SPA files into the root of the new Git repository, here is my repo after I did that:
<img src="http://mikhail.io/2015/12/deploy-your-spa-to-azure/spa-copied-to-repo.jpg" alt="SPA files in the repo">
and push them to <code>azure</code> remote. Now you should be able to browse to the web app and see your SPA screen, but with all calls to Web API failing.</p>
</li>
<li><p>Inside your new Git repository, create a sub-folder to host Web API services. My SPA expects them under <code>/api</code> folder, so that&#39;s the folder name that I created:
<img src="http://mikhail.io/2015/12/deploy-your-spa-to-azure/webapi-copied-to-repo.jpg" alt="Web API files in the repo"></p>
</li>
<li><p>Copy your binary compiled files of your Web API to <code>/api</code> sub-folder. This includes the bin folder, config files, asax files etc - whatever you would need in your local IIS deployment. DO NOT copy the sln/csproj files, otherwise the Azure will also try to do the compilation himself and will change the root of your web application to the folder with csproj files. So, my <code>/api</code> folder looks like this:
<img src="http://mikhail.io/2015/12/deploy-your-spa-to-azure/api-folder.jpg" alt="Web API folder contents"></p>
</li>
<li><p>Commit the changes and Git push to <code>azure</code> remote. Once the files are deployed, your SPA app should be up and running. Well done!</p>
</li>
<li><p>You don&#39;t want to copy the files manually all the time, so make a PowerShell script or gulp task to do that for you. Remember, your changes will be applied whenever you push a new version to <code>azure</code> remote of your Git repo.</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
        <title>Review of the course &quot;Modern, Modular JavaScript with SystemJS and jspm&quot;</title>
        <link href="http://mikhail.io/2015/11/review-of-jspm-course"/>
        <updated>2015-11-24T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-11-24,/2015/11/review-of-jspm-course</id>
        <content type="html"><![CDATA[<p>Recently I was playing with <a href="http://aurelia.io">Aurelia</a> SPA framework, which makes heavy use of jspm and SystemJS for modules/packaging. This package manager is new to me, and it looked a bit like magic sometimes. So when I saw a jspm course on Pluralsight, I decided to give it a try. And I did not regret: the course is great. It&#39;s so good, that I decided to write a review for it, even though I have never done that before. </p>
<p>So, the full course name is &quot;<a href="https://www.pluralsight.com/courses/javascript-systemjs-jspm">Modern, Modular JavaScript with SystemJS and jspm</a>&quot; by Wes Higbee. The topic sounds pretty narrow (compare to something like &quot;Building a Web App with ASP.NET 5, MVC 6, EF7 and AngularJS&quot;), but the video track is surprisingly long: 7.5 hours. And every hour is packed with well structured in-depth material which lays the topic out from A to Z.</p>
<p>The majority of online courses are focusing on just explaining the <em>What</em>&#39;s of a technology: where you get it, how you start quickly, how you solve typical tasks. Wes does not stop there: he is really focusing on <em>Why</em>&#39;s: not only why we should use ES2015 modules and jspm, but the complete logical flow from the best practices in other programming environments to the module patterns to the tools that enable us use the modern approaches in javascript today. The understanding of this reasoning chain sets the solid ground, and you actually start getting the What&#39;s deeper. </p>
<p>But Wes goes even further: he mixes the <em>How</em>&#39;s in. I love watching him breaking the stuff to show why it fails and how to fix it. The references to module dependency graphs and internals of the tools are insightful; that&#39;s how &quot;the magic&quot; transforms into the comprehension of modern open source tools and libraries. </p>
<p>Of course, just watching the course won&#39;t make me an expert in the topic. Now I need to put the knowledge into practice, ask more questions and find answers myself. But I will hopefully save hours of debugging and frustration and will maybe produce better products in the end. Wes and Pluralsight, I definitely need more of courses like this - focused, deep and engaging! </p>
<p>P.S. It was a bit awkward to watch the course in the office because of solitaire cards being shown on my screen. Not sure what my colleagues thought I was doing ;)</p>
]]></content>
    </entry>
    
    <entry>
        <title>Units of measurement in domain design</title>
        <link href="http://mikhail.io/2015/08/units-of-measurement-in-domain-design"/>
        <updated>2015-08-11T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-08-11,/2015/08/units-of-measurement-in-domain-design</id>
        <content type="html"><![CDATA[<p>If you have business application of any decent size, your most important code probably resides in domain logic.
When working with 3rd party code, you can always find an answer on stack overflow or official documentation, but your domain is all yours. Try to make it as simple and readable as possible, and it will always pay you back.</p>
<p>Today I want to discuss one aspect of writing clean domain code: units of measurement. It is important for any domain (or sub-domain) where you operate some physical measurements.</p>
<h2 id="problem-statement">Problem statement</h2>
<p>Our toy example will be about cars and fuel consumption. You receive some data about the trip of your car, e.g. an instance of</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ITrip</span>
{
    <span class="hljs-keyword">double</span> FuelUsed { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">double</span> Distance { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>Now you want to calculate the fuel consumption rate of your trip. You write</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> fuelRate = trip.FuelUsed / trip.Distance;
</code></pre>
<p>You get the value, but what is it? Let&#39;s say you want a value of liters per 100 kilometers. You can assume that <code>FuelUsed</code> is in liters, and <code>Distance</code> is in kilometers. To be more explicit you refactor your code</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ITrip</span>
{
    <span class="hljs-keyword">double</span> FuelUsedInLiters { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">double</span> DistanceInKilometers { <span class="hljs-keyword">get</span>; }
}

<span class="hljs-keyword">var</span> fuelRateLitersPer100Kilometers = trip.FuelUsedInLiters * <span class="hljs-number">100.0</span> / trip.DistanceInKilometers;
</code></pre>
<p>Now it&#39;s much more explicit, and probably good enough for such a small code example. For larger code bases, you will inevitably get into more problems:</p>
<ol>
<li><p>You will start measuring same things in different units. E.g. you will store the distance in meters in the database, so you&#39;ll have to multiply by 1000 somewhere in persistence layer.</p>
</li>
<li><p>If you need to convert metric to imperial and back, you will get lots of constants here and there.</p>
</li>
<li><p>String formatting will become a tedious task. Be sure to call a right formatter for each implicit unit.</p>
</li>
</ol>
<p>This does not work well. The code smell is called <a href="http://blog.ploeh.dk/2011/05/25/DesignSmellPrimitiveObsession/">Primitive Obsession</a> and we should avoid this in production-grade code. Instead, we want the succinctness of first example in combination with strong compile-time checks and well-defined operations.</p>
<h2 id="defining-the-units">Defining the units</h2>
<p>I tried several options like generic classes for units, but I ended up having a struct per measurement. The code is very boring and repetitive, but it provides me with the strongest compile-time checks and nice readability. If you are too bored with typing, you can do some code generation or just use 3rd party that suits you.
So, my end result looks like</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ITrip</span>
{
    Volume FuelUsed { <span class="hljs-keyword">get</span>; }
    Distance Distance { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>Let&#39;s see how Distance is defined (Volume will be almost exactly same):</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> Distance
{
    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Distance</span><span class="hljs-params">(<span class="hljs-keyword">double</span> kilometers)</span>
    </span>{
        <span class="hljs-keyword">this</span>.Kilometers = kilometers;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Kilometers { <span class="hljs-keyword">get</span>; }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Meters =&gt; <span class="hljs-keyword">this</span>.Kilometers / <span class="hljs-number">1000.0</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Distance Zero = <span class="hljs-keyword">new</span> Distance(<span class="hljs-number">0.0</span>);

    ...
}
</code></pre>
<p>Several important things to notice here:</p>
<ol>
<li><p>It&#39;s a struct.</p>
</li>
<li><p>It&#39;s immutable. Once an instance is created, its properties can&#39;t be changed anymore.</p>
</li>
<li><p>Constructor is private. I don&#39;t actually want people to create instances directly: <code>new Distance(123)</code> reads pretty horribly, keep reading to see better options.
Of course, default constructor is still public, but you can only create a zero value with it.</p>
</li>
<li><p>Better way of creating zero distance is to call Zero static field.</p>
</li>
</ol>
<h2 id="instantiation">Instantiation</h2>
<p>So, how do we create measurement objects?</p>
<h3 id="factory-method">Factory method</h3>
<p>The classic way is a set of static factory methods:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Distance <span class="hljs-title">FromKilometers</span><span class="hljs-params">(<span class="hljs-keyword">double</span> kilometers)</span>
</span>{
    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">Distance</span><span class="hljs-params">(kilometers)</span></span>;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Distance <span class="hljs-title">FromMeters</span><span class="hljs-params">(<span class="hljs-keyword">double</span> meters)</span>
</span>{
    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">Distance</span><span class="hljs-params">(kilometers / <span class="hljs-number">1000.0</span>)</span></span>;
}
</code></pre>
<p>Usage is as simple as <code>var distance = Distance.FromMeters(234);</code></p>
<h3 id="extension-method">Extension method</h3>
<p>Imagine you have the following code which converts an integer value of a database result into our units</p>
<pre class="highlight"><code class="hljs cs">trip.Distance = Distance.FromMeters(database.ReadInt32(<span class="hljs-string">"TotalDistance"</span>)
                        .GetDefaultOrEmpty());
</code></pre>
<p>Such a long expression reads better with a fluent interface like</p>
<pre class="highlight"><code class="hljs cs">trip.Distance = database.ReadInt32(<span class="hljs-string">"TotalDistance"</span>)
                        .GetDefaultOrEmpty()
                        .MetersToDistance();
</code></pre>
<p><code>MetersToDistance</code> in this case is an extension method:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DistanceExtensions</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Distance <span class="hljs-title">MetersToDistance</span><span class="hljs-params">(<span class="hljs-keyword">this</span> <span class="hljs-keyword">double</span> meters)</span>
    </span>{
        <span class="hljs-keyword">return</span> Distance.FromMeters(meters);
    }
}
</code></pre>
<h3 id="operator-with-static-class-using">Operator with static class using</h3>
<p>C# 6 brings us a new language construct. Now we can import a static helper class</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">using</span> <span class="hljs-keyword">static</span> Units.Constants;
</code></pre>
<p>And then we can write something like</p>
<pre class="highlight"><code class="hljs swift"><span class="hljs-keyword">var</span> <span class="hljs-built_in">distance</span> = <span class="hljs-number">10.0</span> * km;
</code></pre><p>where liter is defined in that static class:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Constants</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Distance km = Distance.FromKilometers(<span class="hljs-number">1.0</span>);
}
</code></pre>
<p>This may not look like idiomatic C#, but I think it&#39;s very good at least for writing unit tests:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> target = <span class="hljs-keyword">new</span> Trip
{
    DistanceOnFoot = <span class="hljs-number">5</span> * km,
    DistanceOnBicycle = <span class="hljs-number">10</span> * km,
    DistanceOnCar = <span class="hljs-number">30</span> * km
};
target.TotalDistance.Should().Be((<span class="hljs-number">30</span> + <span class="hljs-number">10</span> + <span class="hljs-number">5</span>) * km);
</code></pre>
<p>For this to compile you just need to define the operator overload:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Distance <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>, Distance distance)
{
    <span class="hljs-keyword">return</span> Distance.FromKilometers(<span class="hljs-keyword">value</span> * distance.Kilometers);
}
</code></pre>
<h2 id="conversion-and-printing">Conversion and printing</h2>
<p>More advanced unit conversions are easy with unit classes. A common use case would be to convert metric units to imperial system. All you need to do is to add another calculated property</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-comment">// Distance class</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> MilesInKilometer = <span class="hljs-number">0.621371192</span>;
<span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> FeetInMeter = = <span class="hljs-number">3.2808399</span>;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Miles =&gt; <span class="hljs-keyword">this</span>.Kilometers * MilesInKilometer;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Feet =&gt; <span class="hljs-keyword">this</span>.Meters * FeetInMeter;
</code></pre>
<p>Another common task is printing (formatting) unit values into string. While you can (and should) implement some basic version of it in <code>ToString()</code> method, I advise against doing all the formatting inside the unit class. The formatting scenarios can be quite complex:</p>
<ul>
<li>Format based on user preferences (metric/imperial)</li>
<li>Pick units based on the value (e.g. 30 m but 1.2 km, not 1200 m)</li>
<li>Localization to different languages</li>
<li>Rounding to some closest value</li>
</ul>
<p>If you do all that in the unit class, it&#39;s going to violate the single responsibility principle. Just create a separate class for formatting and put all those rules there.</p>
<h2 id="unit-derivation">Unit derivation</h2>
<p>Once you write more unit classes, you will definitely want to derive the calculation result of two units into the third one. In our example, we want to divide <code>Volume</code> of fuel used by <code>Distance</code> to get fuel <code>ConsumptionRate</code>.</p>
<p>There&#39;s no magic that you could do here. You will have to define <code>ConsumptionRate</code> class the same way you defined the other two, and then just overload the operation</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConsumptionRate <span class="hljs-keyword">operator</span>/(Volume volume, Distance distance)
{
    <span class="hljs-keyword">return</span> ConsumptionRate
        .FromLitersPer100Kilometers(volume.Liters * <span class="hljs-number">100.0</span> / distance.Kilometers);
}
</code></pre>
<p>Of course, you&#39;ll have to define all the required combinations explicitly.</p>
<p>If you defined Constants as described above, you&#39;ll be able to instantiate values in your tests in the following way:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> fuelRate = <span class="hljs-number">7.5</span> * lit / (<span class="hljs-number">100</span> * km);
</code></pre>
<h2 id="should-i-use-3rd-party-libraries-for-that-">Should I use 3rd party libraries for that?</h2>
<p>It depends. Of course, people implemented all this functionality about 1 million times before you, so there are numerous libraries on GitHub.</p>
<p>I would say, if you start a new project and you don&#39;t have a strong opinion about the unit code, just go grab the library and try to use it.</p>
<p>At the same time, for existing code base, it might be easier to introduce your own implementation which would resemble something that you already use.</p>
<p>Also, I have another reason for my own implementation. I&#39;m using units all over the code base of domain logic, the very heart of the software, the exact place where I want full control. I find it a bit awkward to introduce a 3rd party dependency in domain layer.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Aurelia element animation with custom attribute</title>
        <link href="http://mikhail.io/2015/07/aurelia-element-animation-with-custom-attribute"/>
        <updated>2015-07-28T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-07-28,/2015/07/aurelia-element-animation-with-custom-attribute</id>
        <content type="html"><![CDATA[<p>I&#39;ve been exploring <a href="http://aurelia.io">Aurelia</a> javascript UI framework recently to get some experience needed
for our next big project. One thing that I couldn&#39;t implement out of the box was a kind 
of animation.</p>
<p>I have a grid of values bound to View Model. View Model communicates to server, receives
any updates of data and the grid got immediately updated, all that works great with Aurelia.
Now I want to highlight the cell which has just received an updated value with a small
background animation, like this:</p>
<p><img src="http://mikhail.io/2015/07/aurelia-element-animation-with-custom-attribute/animation.gif" alt="Updated cell animation"></p>
<p>Aurelia has a library called <a href="https://github.com/aurelia/animator-css">aurelia-animator-css</a> with a helper
class to run CSS animation. If you use it directly in your View Model, you will end up with the code like</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">this</span>.newMessageReceived =
    msg =&gt; {
        <span class="hljs-keyword">this</span>.data.filter(i =&gt; i.id === msg.id).forEach(t =&gt; {
            <span class="hljs-keyword">let</span> editedItemIdx = <span class="hljs-keyword">this</span>.data.indexOf(i);
            <span class="hljs-keyword">var</span> elem = <span class="hljs-keyword">this</span>.element.querySelectorAll(<span class="hljs-string">'tbody tr'</span>)[editedItemIdx + <span class="hljs-number">1</span>]
                                   .querySelectorAll(<span class="hljs-string">'td'</span>)[<span class="hljs-number">3</span>];

            <span class="hljs-keyword">this</span>.animator.addClass(elem, <span class="hljs-string">'background-animation'</span>).then(() =&gt; {
                <span class="hljs-keyword">this</span>.animator.removeClass(elem, <span class="hljs-string">'background-animation'</span>);
            });
        });
    };
</code></pre>
<p>So we get a new message, find the related item in our data, then find the index of that data. Then we use this
index in query selector to get the exact row that needs animation, find the cell by hard coded index, and 
finally use animator to highlight the background.</p>
<p>Ouch... That smells. We spoiled our view model with view details, and all this code is very ugly and fragile.</p>
<p>Good news: we can improve the solution with the Aurelia&#39;s feature called Custom Attributes. Let&#39;s create a new
javascript file and call it <code>animateonchange.js</code>:</p>
<pre class="highlight"><code class="hljs javascript">import {customAttribute} from <span class="hljs-string">'aurelia-framework'</span>;

@customAttribute(<span class="hljs-string">'animateonchange'</span>)
export <span class="hljs-keyword">class</span> AnimateOnChangeCustomAttribute {

}
</code></pre>
<p>I declared a class for our new attribute, so far it&#39;s empty. I imported customAttribute decorator from
Aurelia framework: that the way we can define a name for our custom attribute. This can be avoided: if I
change the name to <code>AnimateonchangeCustomAttribute</code>, Aurelia will infer the name from class name, but I want
to stay explicit and keep the class name readable. Note that capital letters are not allowed in attribute name.</p>
<p>Now, let&#39;s declare the constructor of the new class and inject all the dependencies:</p>
<pre class="highlight"><code class="hljs javascript">import {inject, customAttribute} from <span class="hljs-string">'aurelia-framework'</span>;
import {CssAnimator} from <span class="hljs-string">'aurelia-animator-css'</span>;

@customAttribute(<span class="hljs-string">'animateonchange'</span>)
@inject(Element, CssAnimator)
export <span class="hljs-keyword">class</span> AnimateOnChangeCustomAttribute {

    constructor(element, animator) {
        <span class="hljs-keyword">this</span>.element = element;
        <span class="hljs-keyword">this</span>.animator = animator;
    }

}
</code></pre>
<p>I used dependency injection to get attribute&#39;s element and CSS animator and save them into class fields.
Here&#39;s how to use them:</p>
<pre class="highlight"><code class="hljs javascript">import {inject, customAttribute} from <span class="hljs-string">'aurelia-framework'</span>;
import {CssAnimator} from <span class="hljs-string">'aurelia-animator-css'</span>;

@customAttribute(<span class="hljs-string">'animateonchange'</span>)
@inject(Element, CssAnimator)
export <span class="hljs-keyword">class</span> AnimateOnChangeCustomAttribute {
    constructor(element, animator) {
        <span class="hljs-keyword">this</span>.element = element;
        <span class="hljs-keyword">this</span>.animator = animator;
        <span class="hljs-keyword">this</span>.initialValueSet = <span class="hljs-literal">false</span>;
    }

    valueChanged(newValue){
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.initialValueSet) {
            <span class="hljs-keyword">this</span>.animator.addClass(<span class="hljs-keyword">this</span>.element, <span class="hljs-string">'background-animation'</span>).then(() =&gt; {
                <span class="hljs-keyword">this</span>.animator.removeClass(<span class="hljs-keyword">this</span>.element, <span class="hljs-string">'background-animation'</span>);
            });
        }
        <span class="hljs-keyword">this</span>.initialValueSet = <span class="hljs-literal">true</span>;
    }
}
</code></pre>
<p>The new method <code>valueChanged</code> will be called every time the bound value changes. I want to ignore the
first value (it&#39;s not an update yet), so I did that with <code>initialValueSet</code> flag. Then I just run CSS 
animator. No DOM-related queries!</p>
<p>Here is how we use the custom attribute from a view:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">template</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">require</span> <span class="hljs-attribute">from</span>=<span class="hljs-value">"./animateonchange"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">require</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">table</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"table"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span> <span class="hljs-attribute">repeat.for</span>=<span class="hljs-value">"item of data"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>${item.value1}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>${item.value2}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">td</span> <span class="hljs-attribute">animateonchange.bind</span>=<span class="hljs-value">"item.value3ToUpdate"</span>&gt;</span>${item.value3ToUpdate}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>${item.value4}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">table</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-title">template</span>&gt;</span>
</code></pre>
<p>First, we use <code>require</code> element to import custom attribute definition (make sure the path is correct
and no <code>.js</code> extension is present).</p>
<p>Second, we use <code>animateonchange.bind</code> to bind the value to the custom attributes. And it works!</p>
<p>Of course, you need to define the CSS class, e.g.</p>
<pre class="highlight"><code class="hljs css"><span class="hljs-class">.background-animation-add</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">-webkit-animation</span>:<span class="hljs-value"> changeBack <span class="hljs-number">0.5s</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">animation</span>:<span class="hljs-value"> changeBack <span class="hljs-number">0.5s</span></span></span>;
<span class="hljs-rule">}</span></span>
<span class="hljs-class">.background-animation-remove</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">-webkit-animation</span>:<span class="hljs-value"> fadeIn <span class="hljs-number">0.5s</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">animation</span>:<span class="hljs-value"> fadeIn <span class="hljs-number">0.5s</span></span></span>;
<span class="hljs-rule">}</span></span>
<span class="hljs-at_rule">@<span class="hljs-keyword">-webkit-keyframes</span> changeBack </span>{
    0% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> white</span></span>; <span class="hljs-rule">}</span></span>
    50% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> lightgreen</span></span>; <span class="hljs-rule">}</span></span>
    100% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> white</span></span>; <span class="hljs-rule">}</span></span>
}
<span class="hljs-at_rule">@<span class="hljs-keyword">keyframes</span> changeBack </span>{
    0% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> white</span></span>; <span class="hljs-rule">}</span></span>
    50% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> lightgreen</span></span>; <span class="hljs-rule">}</span></span>
    100% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> white</span></span>; <span class="hljs-rule">}</span></span>
}
</code></pre>
<p>Here is a <a href="http://plnkr.co/edit/oa0Kb1hf6D9M2jl22vWD">plunkr link to a complete example</a></p>
<p>Happy coding!</p>
<p>Useful links:</p>
<ul>
<li><p><a href="http://aurelia.io/docs.html#custom-attributes">Aurelia Custom Attributes documentation</a></p>
</li>
<li><p><a href="http://blog.durandal.io/2015/07/17/animating-apps-with-aurelia-part-1/">Animating Apps with Aurelia - Part 1 by Rob Eisenberg</a></p>
</li>
</ul>
]]></content>
    </entry>
    
</feed>