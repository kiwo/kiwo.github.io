<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Mikhail Shilkov</title>
    <link href="http://mikhail.io/feed/" rel="self"/>
    <link href="http://mikhail.io"/>
    <updated>2016-07-27T07:52:38.374Z</updated>
    <id>http://mikhail.io/</id>
    <author>
        <name>Mikhail Shilkov</name>
        <email></email>
    </author>

    
    <entry>
        <title>Mocking API calls in Aurelia</title>
        <link href="http://mikhail.io/2016/07/mocking-api-calls-in-aurelia"/>
        <updated>2016-07-27T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-07-27,/2016/07/mocking-api-calls-in-aurelia</id>
        <content type="html"><![CDATA[<p><a href="http://aurelia.io">Aurelia</a> is a modern and slick single-page application framework. 
&quot;Single-page application&quot; aspect means that it&#39;s loaded
into the browser once, and then the navigation happens on the client side and
all the data are loaded from a REST API endpoint.</p>
<p>Let&#39;s say that our front-end Aurelia app is hosted at
<code>myaureliaapp.com</code> while the REST API is hosted at
<code>myaureliaapp.com/api</code>. The REST API is a server-side application,
which can be implemented in .NET, Java, Node.JS etc., and it talks to
a database of some kinds.</p>
<p>For the front-end development purpose, it&#39;s usually useful to be able to
mock the connection to API with some static manually generated data. This
cuts the hard dependency between the client code, the backend code and database.
It&#39;s much easier to mock the exact data set which is needed for the current
development task.</p>
<p>Fortunately, it can be easily done, and here is how.</p>
<h2 id="identify-your-requests">Identify your requests</h2>
<p>Create a list of the requests that you need to mock. For our example let&#39;s
say you do the following requests from the application:</p>
<pre class="highlight"><code class="hljs groovy">GET <span class="hljs-regexp">/api/</span>products
GET <span class="hljs-regexp">/api/</span>products/{id}
POST <span class="hljs-regexp">/api/</span>products
</code></pre><h2 id="put-your-mock-data-into-files">Put your mock data into files</h2>
<p>Go to the root folder of your Aurelia app and create an <code>/api</code> folder. </p>
<p>Create a <code>/api/products</code> subfolder and put a new file called <code>GET.json</code>. This
file should contain the JSON of the product list, e.g.</p>
<pre class="highlight"><code class="hljs json">[ { "<span class="hljs-attribute">id</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>, "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Keyboard"</span></span>, "<span class="hljs-attribute">price</span>": <span class="hljs-value"><span class="hljs-string">"60$"</span> </span>},
  { "<span class="hljs-attribute">id</span>": <span class="hljs-value"><span class="hljs-number">2</span></span>, "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Mouse"</span></span>, "<span class="hljs-attribute">price</span>": <span class="hljs-value"><span class="hljs-string">"20$"</span> </span>},
  { "<span class="hljs-attribute">id</span>": <span class="hljs-value"><span class="hljs-number">3</span></span>, "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Headphones"</span></span>, "<span class="hljs-attribute">price</span>": <span class="hljs-value"><span class="hljs-string">"80$"</span> </span>}
]
</code></pre>
<p>Create a new file called <code>POST.json</code> in the same folder. POST response won&#39;t 
return any data, so the file can be as simple as</p>
<pre class="highlight"><code class="hljs json">{}
</code></pre>
<p>Create subfolders <code>1</code>, <code>2</code> and <code>3</code> under <code>products</code> and create a <code>GET.json</code> 
file in each of them. Every file contains the data for a specific product, e.g.</p>
<pre class="highlight"><code class="hljs json">{ "<span class="hljs-attribute">id</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>, 
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Keyboard"</span></span>, 
  "<span class="hljs-attribute">price</span>": <span class="hljs-value"><span class="hljs-string">"60$"</span></span>,
  "<span class="hljs-attribute">category</span>": <span class="hljs-value"><span class="hljs-string">"Computer Accessories"</span></span>,
  "<span class="hljs-attribute">brand</span>": <span class="hljs-value"><span class="hljs-string">"Mousytech"</span>
</span>}
</code></pre>
<h2 id="configure-browsersync-to-mock-your-api-calls">Configure BrowserSync to mock your API calls</h2>
<p>For the purpose of this post, I assume you are using 
<a href="https://github.com/aurelia/skeleton-navigation">Aurelia Skeleton Navigation</a>
starter kit, specifically 
<a href="https://github.com/aurelia/skeleton-navigation/tree/master/skeleton-esnext">the version with Gulp-based tasks and BrowserSync</a>.
If so, you should be familiar with <code>gulp serve</code> command, which serves your 
application at <code>http://localhost:9000</code>. We will extend this command to host
your API mock too.</p>
<p>Navigate to <code>/build/tasks</code> folder and edit the <code>serve.js</code> file. Change the 
definition of <code>serve</code> task to the following code:</p>
<pre class="highlight"><code class="hljs javascript">gulp.task(<span class="hljs-string">'serve'</span>, [<span class="hljs-string">'build'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span> </span>{
  browserSync({
    online: <span class="hljs-literal">false</span>,
    open: <span class="hljs-literal">false</span>,
    port: <span class="hljs-number">9000</span>,
    server: {
      baseDir: [<span class="hljs-string">'.'</span>],
      middleware: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res, next)</span> </span>{
        res.setHeader(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>);

        <span class="hljs-comment">// Mock API calls</span>
        <span class="hljs-keyword">if</span> (req.url.indexOf(<span class="hljs-string">'/api/'</span>) &gt; -<span class="hljs-number">1</span>) {
          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'[serve] responding '</span> + req.method + <span class="hljs-string">' '</span> + req.originalUrl);

          <span class="hljs-keyword">var</span> jsonResponseUri = req._parsedUrl.pathname + <span class="hljs-string">'/'</span> + req.method + <span class="hljs-string">'.json'</span>;

          <span class="hljs-comment">// Require file for logging purpose, if not found require will </span>
          <span class="hljs-comment">// throw an exception and middleware will cancel the retrieve action</span>
          <span class="hljs-keyword">var</span> jsonResponse = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../..'</span> + jsonResponseUri);

          <span class="hljs-comment">// Replace the original call with retrieving json file as reply</span>
          req.url = jsonResponseUri;
          req.method = <span class="hljs-string">'GET'</span>;
        }

        next();
      }
    }
  }, done);
});
</code></pre>
<h2 id="run-it">Run it</h2>
<p>Now just run <code>gulp serve</code> (or <code>gulp watch</code>, which does <code>serve</code> and then watches
files for changes). Every time your app makes an API call, you will see
a line in the gulp console:</p>
<pre class="highlight"><code class="hljs gradle">[serve] responding GET <span class="hljs-regexp">/api/</span>products
</code></pre><p>If you happen to make an invalid request with no mock defined, you will
get an error:</p>
<pre class="highlight"><code class="hljs vbnet">[serve] responding <span class="hljs-keyword">GET</span> /api/notproducts
<span class="hljs-keyword">Error</span>: Cannot find <span class="hljs-keyword">module</span> <span class="hljs-comment">'../../api/notproducts/GET.json'</span>
</code></pre><p>A complete example can be found in 
<a href="https://github.com/mikhailshilkov/mikhailio-samples/tree/master/aurelia-api-mocks">my github repository</a>.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Building a Poker Bot: Functional Fold as Decision Tree Pattern</title>
        <link href="http://mikhail.io/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern"/>
        <updated>2016-07-22T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-07-22,/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern</id>
        <content type="html"><![CDATA[<p><em>This is the fifth part of <strong>Building a Poker Bot</strong> series where I describe my experience developing bot software 
to play in online poker rooms. I&#39;m building the bot with .NET framework and F# language which makes the task relatively 
easy and very enjoyable. Here are the previous parts:</em></p>
<ul>
<li><a href="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/"><em>Building a Poker Bot: Card Recognition</em></a></li>
<li><a href="http://mikhail.io/2016/02/building-a-poker-bot-string-recognition/"><em>Building a Poker Bot: String and Number Recognition</em></a></li>
<li><a href="http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements/"><em>Building a Poker Bot: Mouse Movements</em></a></li>
<li><a href="http://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors/"><em>Building a Poker Bot with Akka.NET Actors</em></a></li>
</ul>
<p>In this post I describe a simple pattern to structure the complex decision making
code using partial function application and fold operation applied to a list of functions.</p>
<h2 id="context">Context</h2>
<p>Poker decisions are complex and depend on the multitude of parameters and attributes.
We can visualize the decision making process as a Decision Tree where leaf nodes are
decisions being made, and the branches are different conditions. Here is a simplistic
example of such a poker decision tree:</p>
<p><img src="http://mikhail.io/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern/simple-poker-decision-tree.png" alt="Simplistic Poker Decision Tree"></p>
<p>Now, if we need to implement a similar tree in code, the most straightforward way to
do that is to translate each condition to an <code>if</code> statement. This way, the nested
conditions will guide the application through the branches right to the point where
an appropriate decision can be returned.</p>
<p>This approach works for small cases, but in reality it does not scale particularly 
well in terms of the tree size. Namely, the two problems are:</p>
<p><strong>Tree depth</strong>. In many cases, you might need to pass ten or more conditions before
you find your way to the leaf. Obviously, ten levels of <code>if</code> statements are not
particularly readable and maintainable. We can try to split the sub-trees into
sub-functions, but that only gives a limited relief.</p>
<p><strong>Subtree correlation</strong>. Some tree branches deep down the hiereachy might be correlated
to each other. Say, you pass 10 levels of conditions and make a bet on flop. Now,
on turn, you would probably take quite a different decision path, but the logic
would be based on similar &#39;thinking&#39; in human terms. Ideally, we want to keep this
kind of related decisions together, while isolating them from the other unrelated
decision paths.</p>
<p>In fact, the decision tree should be generalized to the Decision <em>Graph</em> to allow
different decision branches to merge back at some point, e.g.</p>
<blockquote>
<p>If there is one Ace on flop, or an overcard came on turn or river</p>
<p>and stacks pre-flop were 20+ BB, or 12+ BB in limped pot</p>
<p>then bet 75% of the pot</p>
</blockquote>
<p>There are multiple paths to the same decisions.</p>
<h2 id="solution">Solution</h2>
<p><strong>Break the decision graph down</strong> vertically into smaller chunks. Each chunk should
represent multiple layers of conditions and lead to eventual decisions. All
conditions in sub-graph should be related to each other (high cohesion) and as 
isolated from other sub-graphs as possible (low coupling).</p>
<p>Here are two examples of such sub-graphs:</p>
<p><img src="http://mikhail.io/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern/decision-subgraphs.png" alt="Isolated Decision Sub-graphs"></p>
<p>Each sub-graph is very focused on very specific paths and ignores all the branches
which do not belong to this decision process. The idea is that those branches
will be handled by other sub-graphs.</p>
<p><strong>Represent each sub-graph as a function</strong> with arbitrary signature which accepts
all the parameters that are required for this sub-graph. Do not accept any parameters
which are not related. </p>
<p>The last parameter of each function should be a 
<a href="http://mikhail.io/2016/01/monads-explained-in-csharp/#maybe">Maybe</a> of Decision,
so should be the function&#39;s return type.</p>
<p><strong>Produce a flat list</strong> of all the sub-graph functions. Partially apply the parameters
to those functions to unify the signature of all of them.</p>
<p>Now, when making a decision, <strong>left-fold the list of functions</strong> with the data of
current poker hand. If a function returns <code>Some</code> value of decision, return it
as the decision produced from the graph.</p>
<h2 id="code-sample">Code sample</h2>
<p>We define a number of functions, each one of which represents one piece of decision 
logic. Then we put them all into the list:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> rules = [
  overtakeLimpedPot overtakyHand snapshot value history;
  increaseTurnBetEQvsAI snapshot;
  allInTurnAfterCheckRaiseInLimpedPot snapshot history;
  checkCallPairedTurnAfterCallWithSecondPairOnFlop snapshot value.Made history;
  bluffyCheckRaiseFlopInLimpedPotFlop bluffyCheckRaiseFlopsLimp snapshot value history;
  bluffyOvertakingRiver bluffyOvertaking snapshot history
]
</code></pre>
<p>The type of this list is <code>(Decision option -&gt; Decision option) list</code>.</p>
<p>Note how each individual function accepts different set of parameters. Current hand&#39;s
<code>snapshot</code> is used by all of them, while calculated hand <code>value</code> and previous
action <code>history</code> are used only by some of the functions. </p>
<p>Now, here is the definition of the facade decision making function:</p>
<pre class="highlight"><code class="hljs fs">rules |&gt; List.fold (<span class="hljs-keyword">fun</span> opt rule -&gt; rule opt) None
</code></pre>
<p>It calculates the decision by folding the list of rules and passing current decision
between them. <code>None</code> is the initial seed of the fold.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Vertical slices are an efficient way to break down the complex decision making
into smaller cohesive manageable parts. Once you get the parts right, it&#39;s easy
to compose them by folding a flat list of partially applied functions into a
<code>Maybe</code> of decision result.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Dependency Inversion Implies Interfaces Are Owned by High-level Modules</title>
        <link href="http://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules"/>
        <updated>2016-05-27T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-05-27,/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules</id>
        <content type="html"><![CDATA[<p>Dependency Inversion is one of the five principles of widely known and 
acknowledged S.O.L.I.D. design guidelines. This principle is very powerful
and useful when applied consistently. But in my experience, it&#39;s actually
quite easy to misunderstand the idea, or at least to mentally simplify it
to somewhat less profound technique of Dependency Injection.</p>
<p>In this post I will try to give my understanding of the principle, and 
the difference between <em>Inversion</em> and <em>Injection</em>.</p>
<p>Let&#39;s start with the Dependency Inversion principle definition. It was given
by Uncle Bob Martin, and consists of two parts.</p>
<h2 id="part-1-abstractions">Part 1: Abstractions</h2>
<blockquote>
<p>High-level modules should not depend on low-level modules. 
Both should depend on abstractions.</p>
</blockquote>
<p>Ok, this is easy to understand. High-level modules are also high-importance
modules, they are about the business domain and are not specific about
technical details. Low-level modules are about wiring those high-level
functions to execution environment, tools and third parties. </p>
<p>Thus, the implementation of high level policy should not depend on 
implementation of low level code, but rather on interfaces (or other
abstractions).</p>
<p>Let&#39;s take a look at an example. Our high-level business domain is about
planning and executing trips from geographical point A to point B. Our
low-level code talks to a service which knows how to calculate the time 
required for a vehicle to go from A to B:</p>
<p><img src="http://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules/uml-dependency-inversion-violated.png" alt="UML: dependency inversion violated"></p>
<p>So the following code <strong>violates</strong> the first part of the Dependency Inversion:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Mapping</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RouteCalculator</span>
    {
        <span class="hljs-function"><span class="hljs-keyword">public</span> TimeSpan <span class="hljs-title">CalculateDuration</span><span class="hljs-params">(
            <span class="hljs-keyword">double</span> fromLat, <span class="hljs-keyword">double</span> fromLng, <span class="hljs-keyword">double</span> toLat, <span class="hljs-keyword">double</span> toLng)</span>
        </span>{
            <span class="hljs-comment">// Call a 3rd party web service</span>
        }
    }
}

<span class="hljs-keyword">namespace</span> <span class="hljs-title">Planning</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TripPlanner</span>
    {
        <span class="hljs-function"><span class="hljs-keyword">public</span> DateTime <span class="hljs-title">ExpectedArrival</span><span class="hljs-params">(Trip trip)</span>
        </span>{
            <span class="hljs-keyword">var</span> calculator = <span class="hljs-keyword">new</span> RouteCalculator();
            <span class="hljs-keyword">var</span> duration = calculator.CalculateDuration(
                trip.Origin.Latitude, 
                trip.Origin.Longitude, 
                trip.Destination.Latitude, 
                trip.Destination.Longitude);
            <span class="hljs-keyword">return</span> trip.Start.Add(duration);
        }
    }
}
</code></pre>
<p>It&#39;s not compliant to the principle because the high-level code (<code>TripPlanner</code>)
explicitly depends on low-level service (<code>RouteCalculator</code>). Note that I&#39;ve put
them to distinct namespaces to emphasize the required separation.</p>
<p>To improve on that, we might introduce an interface to decouple the 
implementations:</p>
<p><img src="http://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules/uml-dependency-inversion-with-dependency-injection.png" alt="UML: dependency inversion with dependency injection"></p>
<p>In Trip Planner we accept the interface as constructor parameter, and we&#39;ll get the 
specific implementation at run time:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Mapping</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IRouteCalculator</span>
    {
        <span class="hljs-function">TimeSpan <span class="hljs-title">CalculateDuration</span><span class="hljs-params">(
            <span class="hljs-keyword">double</span> fromLat, <span class="hljs-keyword">double</span> fromLng, <span class="hljs-keyword">double</span> toLat, <span class="hljs-keyword">double</span> toLng)</span></span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RouteCalculator</span> : <span class="hljs-title">IRouteCalculator</span>
    {
        <span class="hljs-comment">// Same implementation as before...</span>
    }
}

<span class="hljs-keyword">namespace</span> <span class="hljs-title">Planning</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TripPlanner</span>
    {
        <span class="hljs-keyword">private</span> IRouteCalculator calculator;

        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TripPlanner</span><span class="hljs-params">(IRouteCalculator calculator)</span>
        </span>{
            <span class="hljs-keyword">this</span>.calculator = calculator;
        }

        <span class="hljs-function"><span class="hljs-keyword">public</span> DateTime <span class="hljs-title">ExpectedArrival</span><span class="hljs-params">(Trip trip)</span>
        </span>{
            <span class="hljs-keyword">var</span> duration = <span class="hljs-keyword">this</span>.calculator.CalculateDuration(
                trip.Origin.Latitude, 
                trip.Origin.Longitude, 
                trip.Destination.Latitude, 
                trip.Destination.Longitude);
            <span class="hljs-keyword">return</span> trip.Start.Add(duration);
        }
    }
}
</code></pre>
<p>This technique is called <em>dependency 
injection</em> or, more specifically, <em>constructor injection</em>. This way 
we can easily substitute the implementation later or inject a test 
double while unit testing.</p>
<p>But that&#39;s just one part of the principle. Let&#39;s move on to part 2.</p>
<h2 id="part-2-details">Part 2: Details</h2>
<p>The second part of the principle says</p>
<blockquote>
<p>Abstractions should not depend upon details. 
Details should depend upon abstractions.</p>
</blockquote>
<p>I find this wording unfortunate because it might be confusing. There are 
some valid examples which explain it with base and derived classes. 
But in our example we solved the part 1 with an interface. So now we are told that
the abstraction (interface) should not depend upon details (implementation).</p>
<p>That probably means that the interface should not leak any entities which
are specific to the given implementation, to make other implementation
equally possible.</p>
<p>While this is try, this second part of the principle may seem to be subordinate
to part one, reducing to an idea &quot;design your interfaces well&quot;. So 
many people tend to leave the part 2 out (
<a href="https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design#dependency-inversion-principle">example 1</a>,
<a href="http://www.codeproject.com/Articles/495019/Dependency-Inversion-Principle-and-the-Dependency">example 2</a>), focusing 
solely on part 1 - the Dependency Injection.</p>
<h2 id="interface-ownership">Interface Ownership</h2>
<p>But Dependency Inversion is <strong>not</strong> just Dependency Injection. So, to revive
the part 2 I would add the following statement to make it clearer:</p>
<blockquote>
<p><strong>Abstractions should be owned by higher-level modules and implemented by
lower-level modules.</strong></p>
</blockquote>
<p>This rule is violated in our last example. The interface is defined together
with implementation, and is basically just extracted from it. It&#39;s <strong>owned</strong>
by the mapping namespace. </p>
<p>To improve the design, we can transfer the interface ownership to domain
level:</p>
<p><img src="http://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules/uml-dependency-inversion.png" alt="UML: dependency inversion"></p>
<p>As you can see, I also renamed the interface. The name should reflect the way
how the domain experts would think of this abstraction. Here is the result:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Planning</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IDurationCalculator</span>
    {
        <span class="hljs-function">TimeSpan <span class="hljs-title">CalculateDuration</span><span class="hljs-params">(Hub origin, Hub destination)</span></span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TripPlanner</span>
    {
        <span class="hljs-keyword">private</span> IDurationCalculator calculator;

        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TripPlanner</span><span class="hljs-params">(IDurationCalculator calculator)</span>
        </span>{
            <span class="hljs-keyword">this</span>.calculator = calculator;
        }

        <span class="hljs-function"><span class="hljs-keyword">public</span> DateTime <span class="hljs-title">ExpectedArrival</span><span class="hljs-params">(Trip trip)</span>
        </span>{
            <span class="hljs-keyword">var</span> duration = <span class="hljs-keyword">this</span>.calculator.CalculateDuration(
                trip.Origin, trip.Destination);
            <span class="hljs-keyword">return</span> trip.Start.Add(duration);
        }
    }
}

<span class="hljs-keyword">namespace</span> <span class="hljs-title">Mapping</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RouteCalculator</span> : <span class="hljs-title">IRouteCalculator</span>
    {
        <span class="hljs-function"><span class="hljs-keyword">public</span> TimeSpan <span class="hljs-title">CalculateDuration</span><span class="hljs-params">(Hub origin, Hub destination)</span>
        </span>{
            <span class="hljs-comment">// Extract latitude and longitude from Hubs</span>
            <span class="hljs-comment">// Call a 3rd party web service</span>
        }
    }
}
</code></pre>
<p>Now, the interface is defined in <code>Planning</code> namespace, close to its <em>Client</em>,
not its <em>Implementation</em>. That&#39;s the dependency inversion in action. Even
more importantly, it&#39;s defined in terms of our domain - notice the use of
<code>Hub</code> in the interface instead of low-level <code>double</code>.</p>
<h2 id="why-high-level-code-should-own-interfaces">Why High Level Code Should Own Interfaces</h2>
<p>There are multiple benefits to this approach, here are the most important
advantages:</p>
<h3 id="concise-readable-high-level-code">Concise, readable high-level code</h3>
<p>The high-level domain code has the highest value, so the ultimate goal
is to keep it as clean as possible. The interface ownership enables us to
design the most concise interfaces to achieve this goal. We avoid any kind
of adaptation of domain entities to whatever lower-level details.</p>
<h3 id="better-abstractions">Better abstractions</h3>
<p>The interfaces themselves get better as well. They are closer to business,
so abstractions get more ubiquitous and better understood by everyone.</p>
<p>They tend to live longer, just because they are born from the domain side, 
not the infrastructure side.</p>
<h3 id="dependencies-in-outer-layers">Dependencies in outer layers</h3>
<p>Code organization tends to improve too. If an interface is defined in the 
same module as the implementation, the domain module now has
to reference the infrastructure module just to use the interface.</p>
<p>With domain-level interface, the reference goes in the other direction, so
dependencies are pushed up to the outer layers of application. </p>
<p>This principle is the foundation of domain-centric architectures
<a href="https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean architecture</a>,
<a href="http://alistair.cockburn.us/Hexagonal+architecture">Ports and Adapters</a> and the likes.</p>
<h3 id="less-cross-domain-dependencies">Less cross-domain dependencies</h3>
<p>In large systems, the business domains should be split into smaller sub-domains, or
bounded contexts. Still, sub-domains are not totally isolated and must 
cooperate to achieve the ultimate business goal. </p>
<p>It might be compelling to reference the interfaces of one sub-domain 
from another sub-domain and then say that the dependency is minimal because
they are hidden behind abstractions.</p>
<p>But coupling with abstractions is still coupling. Instead, each domain should
operate its own abstractions at the high level, and then different abstractions
should be wired together on lower level with techniques like adapters, facades,
context mapping etc.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Here is my working definition of Dependency Inversion principle:</p>
<blockquote>
<p>High-level modules should not depend on low-level modules. 
Both should depend on abstractions.</p>
<p>Abstractions should not depend upon details. 
Details should depend upon abstractions.</p>
<p>Abstractions should be owned by higher-level modules and implemented by
lower-level modules.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
        <title>Tweaking immutable objects with C# and Fody</title>
        <link href="http://mikhail.io/2016/05/tweaking-immutable-objects-with-csharp-and-fody"/>
        <updated>2016-05-13T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-05-13,/2016/05/tweaking-immutable-objects-with-csharp-and-fody</id>
        <content type="html"><![CDATA[<p>Immutable data structures provide a lot of benefits
to programmers, especially when representing domain 
<a href="https://lostechies.com/joeocampo/2007/04/23/a-discussion-on-domain-driven-design-value-objects/">value objects</a>. 
Immutability is an essential part of functional programming paradigm.
The concept is useful in object-oriented languages too, but you have
to pay some price to get this advantage.</p>
<p>In C# immutable classes are usually implemented with read-only
properties which are populated from constructor parameters. One of the 
disadvantages of this approach is the verbosity of creating a copy of an object
with one property value modified.</p>
<h2 id="example">Example</h2>
<p>Let&#39;s have a look at an illustration of this problem. Let&#39;s say we have a value
type representing poker player statistics:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerStats</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PlayerStats</span><span class="hljs-params">(
        <span class="hljs-keyword">int</span> hands, 
        <span class="hljs-keyword">int</span> daysOnline,
        Money won, 
        Money expectedValue)</span>
    </span>{
        <span class="hljs-keyword">this</span>.Hands = hands;
        <span class="hljs-keyword">this</span>.DaysOnline = daysOnline;
        <span class="hljs-keyword">this</span>.Won = won;
        <span class="hljs-keyword">this</span>.ExpectedValue = expectedValue;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Hands { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> DaysOnline { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Money Won { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Money ExpectedValue { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>We already see that it&#39;s quite verbose: basically we repeat each property name
five times. But the issue I&#39;m discussing today is related to how we create 
a new object based on another object. Let&#39;s say we need to make a copy of 
a given statistics, but with <code>Hands</code> property increased by 1:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> increasedHands = <span class="hljs-keyword">new</span> PlayerStats(
    existing.Hands + <span class="hljs-number">1</span>,
    existing.DaysOnline,
    existing.Won,
    existing.ExpectedValue);
</code></pre>
<p>Not as simple as we could hope. Also, there is some room for mistakes here. For 
instance, we could swap <code>Won</code> and <code>ExpectedValue</code> property calls
and compiler won&#39;t let us know because the types are the same. So we probably
want to use explicit constructor parameter names:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> increasedHands = <span class="hljs-keyword">new</span> PlayerStats(
    hands: existing.Hands + <span class="hljs-number">1</span>,
    daysOnline: existing.DaysOnline,
    won: existing.Won,
    expectedValue: existing.ExpectedValue);
</code></pre>
<p>But that leads to even more typing and repetition...</p>
<h2 id="inspiration">Inspiration</h2>
<p>F# is a functional-first language with immutability as first-class concept.
In F# value objects are usually modelled with Records, here is our example
reimplemented:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">PlayerStats</span> </span>= {
    Hands: int
    DaysOnline: int
    Won: Money
    ExpectedValue: Money
}
</code></pre>
<p>Creation of new objects based on other objects is also solved properly in F#,
thanks to the <strong><code>with</code></strong> keyword :</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> increasedHands = { existing <span class="hljs-keyword">with</span> Hands = existing.Hands + <span class="hljs-number">1</span> }
</code></pre>
<p>All the properties are copied from the source record except for the ones
explicitly mentioned in the expression.</p>
<h2 id="defining-with-in-c-">Defining With in C#</h2>
<p>There&#39;s no <strong><code>with</code></strong> operator in C#, but we can try to come up with an
alternative. We can define some fluent methods which would change
property values one by one (they don&#39;t change the original object, but
return a copy with changed value):</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithHands</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hands)</span> 
</span>{
    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">PlayerStats</span><span class="hljs-params">(
        hands: hands,
        daysOnline: existing.DaysOnline,
        won: existing.Won,
        expectedValue: existing.ExpectedValue)</span></span>;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithDaysOnline</span><span class="hljs-params">(<span class="hljs-keyword">int</span> daysOnline)</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithWon</span><span class="hljs-params">(Money won)</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithExpectedValue</span> <span class="hljs-params">(Money expectedValue)</span> </span>{ ... }
</code></pre>
<p>The method implementation is very tedious but the usage gets much cleaner:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> increasedHands = existing.WithHands(existing.Hands + <span class="hljs-number">1</span>);
</code></pre>
<p>One way to avoid repetitive code is to generate it.</p>
<h2 id="with-fody-plugin">With.Fody Plugin</h2>
<p>In <a href="http://mikhail.io/2015/12/weaving-your-domain-classes-with-fody/">one of my previous posts</a>
I described how C# value objects can be made less painful with 
<a href="https://github.com/Fody/Fody">Fody</a> - a tool which changes your assembly at
compilation time to provide some desired properties in automated and reliable
fashion.</p>
<p>Please welcome the new Fody plugin <a href="https://github.com/mikhailshilkov/With.Fody"><strong>With.Fody</strong></a> 
which auto-implements <code>With</code> method bodies for C# immutable classes.</p>
<p>Here is how to use this plugin for our imaginary example.</p>
<p>First, add a reference to NuGet pakages <code>Fody</code> and <code>With.Fody</code>.</p>
<p>Then, keep the <code>PlayerStats</code> class definition, but get rid of the bodies
of <code>WithXyz</code> methods. Keep the signature but return something trivial like
<code>null</code> or <code>this</code>:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithHands</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hands)</span> </span>=&gt; <span class="hljs-keyword">this</span>;
<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithDaysOnline</span><span class="hljs-params">(<span class="hljs-keyword">int</span> daysOnline)</span> </span>=&gt; <span class="hljs-keyword">this</span>;
<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithWon</span><span class="hljs-params">(Money won)</span> </span>=&gt; <span class="hljs-keyword">this</span>;
<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithExpectedValue</span> <span class="hljs-params">(Money expectedValue)</span> </span>=&gt; <span class="hljs-keyword">this</span>;
</code></pre>
<p>Compile the project and you will see the following line in Build Output:</p>
<pre class="highlight"><code class="hljs oxygene">&gt;      Fody/<span class="hljs-keyword">With</span>:   Added <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">With</span>' <span class="hljs-title">to</span> <span class="hljs-title">type</span> '<span class="hljs-title">PlayerStats</span>'.
</span></code></pre><p>It means that the method bodies were re-implemented with calls to 
class constructor with proper parameter values.</p>
<p>The method stubs are needed to satisfy code completion tools like 
IntelliSense and Resharper, otherwise we could skip them altogether.</p>
<h2 id="single-with-for-multiple-properties">Single With() for Multiple Properties</h2>
<p>In case you avoid <a href="http://mikhail.io/2015/08/units-of-measurement-in-domain-design/">Primitive Obsession</a>
antipattern, you will often end up with classes which have unique types of 
properties, e.g.</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TripProfile</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TripProfile</span><span class="hljs-params">(
        Distance totalDistance,
        Speed averageSpeed,
        Volume fuelConsumed)</span>
    </span>{
        <span class="hljs-keyword">this</span>.TotalDistance = totalDistance;
        <span class="hljs-keyword">this</span>.AverageSpeed = averageSpeed;
        <span class="hljs-keyword">this</span>.FuelConsumed = fuelConsumed;
    }

    <span class="hljs-keyword">public</span> Distance TotalDistance { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Speed AverageSpeed { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Volume FuelConsumed { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>In this case, the plugin can be smart enough to figure out which property
you want to modify just by looking at the type of the argument. The single stub
method can look like this:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> TripProfile With&lt;T&gt;(T <span class="hljs-keyword">value</span>) =&gt; <span class="hljs-keyword">this</span>;
</code></pre>
<p>This would get compiled into 3 strongly typed <code>With</code> methods with <code>Distance</code>,
<code>Speed</code> and <code>Volume</code> arguments respectively. Resharper is still happy. And
if you make a mistake and try to call the generic <code>With</code> method with an
argument of wrong type (say <code>int</code>), the compiler will give you an error.</p>
<p>It is safe to call <code>With</code> methods in the same assembly where the class is defined:
the calls get adapted to the real implementation automatically.</p>
<h2 id="how-to-get-started-with-your-classes">How to Get Started with Your Classes</h2>
<p>Here are the requirements for the classes to be picked up by <strong><code>Fody.With</code></strong>:</p>
<ol>
<li>Have a single constructor.</li>
<li>The constructor should have more than one argument.</li>
<li>For each constructor agrument, there must be a gettable property with
same name (case insensitive).</li>
<li>At least one <code>With</code> stub must be defined as described above.</li>
</ol>
<p>You can check out more examples, look at the source code or raise an issue in
<a href="https://github.com/mikhailshilkov/With.Fody">With.Fody github repository</a>.</p>
<p>Give it a try and let me know what your think!</p>
]]></content>
    </entry>
    
    <entry>
        <title>T-SQL MERGE statement is underrated</title>
        <link href="http://mikhail.io/2016/04/t-sql-merge-statement-is-underrated"/>
        <updated>2016-04-15T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-04-15,/2016/04/t-sql-merge-statement-is-underrated</id>
        <content type="html"><![CDATA[<p>How many times did you write a SQL to <strong>save</strong> a row without knowing whether the same
primary key already exists or not? You just get an object in your data access layer and
you want to save all fields into the database. </p>
<p>But there is no SAVE statement in SQL, so effectively you need to come up with your 
implementation of &quot;INSERT or UPDATE&quot; command.</p>
<h2 id="example">Example</h2>
<p>Let&#39;s take a concrete example. You have a person object with just 3 fields, here is the
type definition:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>
{
    <span class="hljs-keyword">public</span> Guid Id { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Name { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Email { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
<p>Persons are entities, so we chose a GUID for the primary key column. We always generate
the unique identifier at client side and just want to save the <code>Person</code>.</p>
<h2 id="typical-solutions">Typical Solutions</h2>
<p>The typical T-SQL developer&#39;s toolbox contains <code>SELECT</code>, <code>INSERT</code>,
<code>UPDATE</code> and <code>DELETE</code> statements. <code>DELETE</code> is of no use here, but the combination of the other
three can be employed to complete the task. The most straightforward option is</p>
<pre class="highlight"><code class="hljs sql">IF NOT EXISTS(<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> Person <span class="hljs-keyword">WHERE</span> Id = @Id)
  <span class="hljs-keyword">INSERT</span> Person (Id, Name, Email) <span class="hljs-keyword">VALUES</span> (@Id, @Name, @Email)
<span class="hljs-keyword">ELSE</span>
  <span class="hljs-keyword">UPDATE</span> Person <span class="hljs-keyword">SET</span> Name = @Name <span class="hljs-keyword">AND</span> Email = @Email <span class="hljs-keyword">WHERE</span> Id = @Id
</span></code></pre>
<p>It&#39;s 4 lines of code instead of one, but it works. Being more fancy, we can reduce the code to
3 lines of code:</p>
<pre class="highlight"><code class="hljs sql"><span class="hljs-operator"><span class="hljs-keyword">UPDATE</span> Person <span class="hljs-keyword">SET</span> Name = @Name <span class="hljs-keyword">AND</span> Email = @Email <span class="hljs-keyword">WHERE</span> Id = @Id
<span class="hljs-keyword">IF</span> @@ROWCOUNT = <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span>
  <span class="hljs-keyword">INSERT</span> Person (Id, Name, Email) <span class="hljs-keyword">VALUES</span> (@Id, @Name, @Email)
</span></code></pre>
<p>It should also perform faster if you update more often then insert.</p>
<p>Solved? Not completely...</p>
<p>The problem is that sometimes it doesn&#39;t
work. By default, <code>SELECT</code> doesn&#39;t lock the table, so in race condition scenario there
may be another thread which would insert another row with same Id between the execution of
two statements (or delete the existing row for that matter). Ouch.</p>
<p>If you think that&#39;s just a theoretical problem... Well, it might be for our tiny shiny <code>Person</code>
table, but it will happen for the tables of decent sizes with complex update patterns.</p>
<h2 id="transactions">Transactions</h2>
<p>What do we do when the execution of two statements can cause race conditions with
unpredictable results? We use transactions! So, start a transaction before the statement,
then lock the table in <code>SELECT</code> and commit after all is done. It works, but quite some downsides
again:</p>
<ul>
<li>Lots of boilerplate code</li>
<li>Easy to make a mistake (Which lock do we need? <code>updlock</code>? <code>holdlock</code>? <code>tablockx</code>?)</li>
<li>You might get into a deadlock, so need to handle it gracefully</li>
</ul>
<h2 id="merge">MERGE</h2>
<p>Starting with SQL Server 2008, Microsoft introduced the <a href="https://msdn.microsoft.com/ru-ru/library/bb510625.aspx">MERGE</a>
statement. Generally, it&#39;s quite powerful and can be used to save all the different rows of a source
table into a target table. But we can also use it for our simple task of saving a person.</p>
<p><code>MERGE</code> is just one statement, so it&#39;s atomic and consistent. It performs very well. 
But the syntax is... oh my god, it&#39;s horrible. Your eyes might bleed:</p>
<pre class="highlight"><code class="hljs sql"><span class="hljs-operator"><span class="hljs-keyword">MERGE</span> Person <span class="hljs-keyword">AS</span> target
<span class="hljs-keyword">USING</span> (<span class="hljs-keyword">SELECT</span> @Id, @Name, @Email) <span class="hljs-keyword">AS</span> source (Id, Name, Email)
   <span class="hljs-keyword">ON</span> (target.Id = source.Id)
 <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">MATCHED</span> <span class="hljs-keyword">THEN</span> 
      <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">SET</span> Name = source.Name, Email = source.Email
 <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">MATCHED</span> <span class="hljs-keyword">THEN</span>
      <span class="hljs-keyword">INSERT</span> (Id, Name, Email) <span class="hljs-keyword">VALUES</span> (source.Id, source.Name, source.Email)
</span></code></pre>
<p>Yes, we repeat the name of each column 6 times. And we say <code>source</code> 7 times. And you can imagine
how the <code>MERGE</code> of a table with 50 columns would look like. And how painful it is to add a new column
to an existing statement written 2 years ago.</p>
<p>By the way, the deadlocks are still possible with <code>MERGE</code> statement, so you need to handle them
properly.</p>
<p>So the developers, even the ones who know about the <code>MERGE</code>, usually choose to use the good old <code>CRUD</code>
combination. But when isn&#39;t the syntax a problem?</p>
<h2 id="generate-it-">Generate It!</h2>
<p>More and more developers shift from writing the stored procedures to using ORMs. With full-blown
ORMs you don&#39;t need to care about particular SQL statements, but you get a bunch of other problems
related to <a href="https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch">Object-relational impedance mismatch</a>.</p>
<p>One possible approach is to use a mini-ORM, for instance <a href="https://github.com/StackExchange/dapper-dot-net">Dapper</a>. 
You do your work in your favourite 
general-purpose language, but stay &quot;close to the metal&quot;, or rather to SQL engine statements.</p>
<p>Here is how I invoke a <code>MERGE</code> statement for a Person object (given a connection from the pool):</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(...);
DapperAdapter.Merge(connection, person);
</code></pre>
<p>Voila! The implementation of generic <code>Merge</code> method takes care of the syntax complications.
Write once, use everywhere:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> Merge&lt;TEntity&gt;(IDbConnection dbConnection, TEntity entity) <span class="hljs-keyword">where</span> TEntity : <span class="hljs-keyword">class</span>
{
    <span class="hljs-keyword">var</span> props = entity.GetType().GetProperties().Select(p =&gt; p.Name).ToList();
    <span class="hljs-keyword">var</span> names = <span class="hljs-keyword">string</span>.Join(<span class="hljs-string">", "</span>, props);
    <span class="hljs-keyword">var</span> values = <span class="hljs-keyword">string</span>.Join(<span class="hljs-string">", "</span>, props.Select(n =&gt; <span class="hljs-string">"@"</span> + n));
    <span class="hljs-keyword">var</span> updates = <span class="hljs-keyword">string</span>.Join(<span class="hljs-string">", "</span>, props.Select(n =&gt; $<span class="hljs-string">"{n} = @{n}"</span>));
    dbConnection.Execute(
        $<span class="hljs-string">@"MERGE {entity.GetType().Name} as target
          USING (VALUES({values}))
          AS SOURCE ({names})
          ON target.Id = @Id
          WHEN matched THEN
            UPDATE SET {updates}
          WHEN not matched THEN
            INSERT({names}) VALUES({values});"</span>,
        entity);
}
</code></pre>
<p>Of course, it will only work if you use the convention of naming the <code>Person</code> properties
after the database table. In most cases, there will be a domain class <code>Person</code> and a property
bag class <code>PersonRow</code>, so you&#39;ll have to do the mapping between them. But that might be
easier than writing T-SQL code.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Don&#39;t let the bulky syntax scare you away from the <code>MERGE</code> T-SQL statement. Extend your 
toolbox, and use the tools wisely.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Building a Poker Bot with Akka.NET Actors</title>
        <link href="http://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors"/>
        <updated>2016-04-09T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-04-09,/2016/04/building-a-poker-bot-with-akka-net-actors</id>
        <content type="html"><![CDATA[<p><em>This is the fourth part of <strong>Building a Poker Bot</strong> series where I describe my experience developing bot software 
to play in online poker rooms. I&#39;m building the bot with .NET framework and F# language which makes the task relatively 
easy and very enjoyable. Here are the previous parts:</em></p>
<ul>
<li><a href="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/"><em>Building a Poker Bot: Card Recognition</em></a></li>
<li><a href="http://mikhail.io/2016/02/building-a-poker-bot-string-recognition/"><em>Building a Poker Bot: String and Number Recognition</em></a></li>
<li><a href="http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements/"><em>Building a Poker Bot: Mouse Movements</em></a></li>
</ul>
<p>This post lays out the most exciting part of the bot. I&#39;ll compose the recognition, flow, decision and mouse clicking
parts together into the bot application. The application is a console executable interacting with multiple 
windows of poker room software.</p>
<h2 id="flow">Flow</h2>
<p>The following picture shows the outline of the application data flow:</p>
<p><img src="http://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors/pokeractors.png" alt="Actor Diagram"></p>
<p><strong>Find Tables</strong> - Every half a second or so we scan all the windows and search for open poker tables among them.
For each poker table we make a screenshot and send those to recognition.</p>
<p><strong>Recognize Screen</strong> - Parse the data from the screenshot. Check whether it&#39;s our turn to make a play now, what
the <a href="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/">hole cards</a> and 
<a href="http://mikhail.io/2016/02/building-a-poker-bot-string-recognition/">stacks</a> are, produce the detailed
screen information and send it to decision maker.</p>
<p><strong>Make Decision</strong> - Understand if that&#39;s a new hand or there was a past history before. See
what the villains did and which new cards we got. Here the secret sauce comes to play and produces 
a move to be made. Send the action to the mouse clicker.</p>
<p><strong>Click Buttons</strong> - Based on the decision made, click the right buttons. It should be done with proper delays
and <a href="http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements/">human-like movements</a> so that the villain
and poker room don&#39;t understand that it&#39;s bot who is playing.</p>
<hr>
<h2 id="let-the-actors-play">Let the Actors Play</h2>
<p>Because of the multi-tabling, the application is intrinsically multi-threaded. At the same time,
the different parts of the flow are executed at different cadence:</p>
<ul>
<li>Finding tables is triggered by time and is single-threaded</li>
<li>Screen recognition, history detection and decision making run in sequence and can be executed in parallel
for multiple tables</li>
<li>Clicking the buttons is again single-threaded, as it must synchronize the outputs from the previous steps,
put them in sequence with appropriate delays</li>
</ul>
<p>Here are the other treats of the flow:</p>
<ul>
<li>It is reactive and event based</li>
<li>The flow is unidirectional, the output of one step goes to the input of the next step</li>
<li>Most steps are stateless, but the history state needs to be preserved and, ideally, isolated from the other
steps</li>
</ul>
<p>This list of features made me pick the Actor-based <a href="http://getakka.net">Akka.NET</a> framework to implement the flow.</p>
<p>For sure, the application could be done with a bunch of procedural code instead. 
But I found actors to be a useful modeling technique to be employed. 
It goes well with reactive nature of the application and builds the nice 
foundation for more complicated scenarios in the future.</p>
<p>Also, I was curious how F# and Akka.NET would work together.</p>
<h2 id="supervision-hierachy">Supervision Hierachy</h2>
<p>In Akka.NET each actor has a supervisor actor who is managing its lifecycle. All actors together form a
supervision tree. Here is the tree shown for the Player application:</p>
<p><img src="http://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors/actorhierachy.png" alt="Actor Hierachy"></p>
<p>There is just one copy of both Table Finder and Button Clicker actors and they are supervised by the root
User actor. </p>
<p>For each poker table a Recognizer actor gets created. These actors are managed by Table 
Finder. </p>
<p>Each Recognizer actor creates an instance of Decision actor who keeps the hand history
and makes decisions. </p>
<p>Finally, all decisions are sent to one centralized Button Clicker actor whose job is 
to click all the tables with proper delays and in order.</p>
<hr>
<h2 id="implementation-patterns">Implementation Patterns</h2>
<p>All actors are implemented with <a href="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/">Functional Actor Patterns</a>
which are described in <a href="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/">my previous post</a>.</p>
<p>The basic idea is that each actor is defined in functional style with these
building blocks:</p>
<ul>
<li>Type of incoming and, if needed, outgoing messages</li>
<li>A domain function with business logic</li>
<li>Actor function which puts those parts together</li>
<li>Expression to spawn an actor based on actor function</li>
</ul>
<p>Let&#39;s look at the examples to understand this structure better.</p>
<h2 id="table-finder">Table Finder</h2>
<p>Table Finder does not have any meaningful input message. It gets a message from
Akka.NET scheduling system just to be periodically activated.</p>
<p>The domain function is called <code>findWindows</code> and has the type <code>unit -&gt; WindowInfo seq</code>.
It returns the poker window screenshots and titles.</p>
<p>Actor function of type <code>int -&gt; seq&lt;string * WindowInfo&gt;</code> is used by the 
<a href="http://mikhail.test/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/#RouterSupervisor">Router-Supervisor</a> pattern to 
define the behavior. The ouput tuple defines an ID of an output actor and a
message to send to it:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> findActor msg = 
  findWindows ()
  |&gt; Seq.map (<span class="hljs-keyword">fun</span> x -&gt; (<span class="hljs-string">"recognizer-actor-"</span> + x.TableName, x))
</code></pre>
<p>Here is how I spawn the singleton instance of this actor:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> tableFinderRef = 
  actorOfRouteToChildren findActor (spawnChild recognizer)
  |&gt; spawn system <span class="hljs-string">"table-finder-actor"</span>
</code></pre>
<p>Where <code>spawnChild</code> is a helper function - essentially an adapter of standard
<code>spawn</code> function with proper parameter order:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> spawnChild childActor name (mailbox : Actor&lt;<span class="hljs-attribute">'a</span>&gt;) = 
  spawn mailbox.Context name childActor
</code></pre>
<p>We can also extend it to debug messages when new actors get created.</p>
<h2 id="recognizer">Recognizer</h2>
<p>Recognizer receives the <code>WindowInfo</code> produced by the Table Finder.</p>
<p>The domain function has the type of <code>Bitmap -&gt; Screen</code>. You can read more about table
recognition in <a href="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/">Part 1</a> and
<a href="http://mikhail.io/2016/02/building-a-poker-bot-string-recognition/">Part 2</a>
of these series.</p>
<p>Actor function is an implementation of 
<a href="http://mikhail.test/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/#ConverterSupervisor">Converter-Supervisor</a> pattern. 
The output is a decision message for Decision Maker actor which is a supervised 
child of the Recognizer. Here is the actor function:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> recognizeActor (window : WindowInfo) =
  <span class="hljs-keyword">let</span> result = recognize window.Bitmap
  { WindowTitle = window.Title 
    TableName = window.TableName 
    Screen = result 
    Bitmap = window.Bitmap }
</code></pre>
<p>And here is the spawn function:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> recognizer = actorOfConvertToChild recognizeActor (spawnChild decider <span class="hljs-string">"decider"</span>)
</code></pre>
<p>Notice how this expression was used in Table Finder instantiation above.</p>
<h2 id="decision-maker">Decision Maker</h2>
<p>Decision Maker actor function is an implementation of 
<a href="http://mikhail.test/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/#StatefulConverter">Stateful Converter</a> pattern. It receives
a decision message from a Recognizer. The output is a click message for a 
singleton Clicker actor. It also needs to preserve some state between two calls.
In the minimalistic implementation this state holds the previous screen that
it received, so that if the same message is received twice, the later message is 
ignored.</p>
<p>This way the actor function has the type of 
<code>DecisionMessage -&gt; Screen option -&gt; ClickerMessage * Screen option</code> 
and looks like this:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> decisionActor msg lastScreen =
  <span class="hljs-keyword">let</span> screen = msg.Screen
  <span class="hljs-keyword">match</span> lastScreen <span class="hljs-keyword">with</span>
  | Some s <span class="hljs-keyword">when</span> s = screen -&gt; (None, lastScreen)
  | _ -&gt;
    <span class="hljs-keyword">let</span> action = decide screen
    <span class="hljs-keyword">let</span> outMsg = { WindowTitle = msg.WindowTitle; Clicks = action }
    (Some outMsg, Some screen)
</code></pre>
<p>Here is the spawn function:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> decider = actorOfStatefulConvert decisionActor None clickerRef
</code></pre>
<p>where <code>None</code> represents the initial state.</p>
<h2 id="button-clicker">Button Clicker</h2>
<p>Clicker actor has the simplest implementation because it does not send messages to other actors.
Here is the message that it receives from Decision Maker:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ClickTarget</span> </span>= (int * int * int * int)
<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ClickerMessage</span> </span>= {
  WindowTitle: string
  Clicks: ClickTarget[]
}
</code></pre>
<p>The domain function has the simple type <code>ClickerMessage -&gt; unit</code> with mouse
clicks as side effect. You can read more about the mouse movements in 
<a href="http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements/">Part 3</a>
of these series.</p>
<p><a href="http://mikhail.test/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/#MessageSink">Message Sink</a>
pattern is used for this actor, so actor function isn&#39;t
really needed. We spawn the singleton instance with the following statement:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> clickerRef = actorOfSink click |&gt; spawn system <span class="hljs-string">"clicker-actor"</span>
</code></pre>
<p>Actor goes under supervision by actor system with <code>click</code> as message handler.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The top layer of poker player application is composed of small single-purpose
actors which talk to each other by sending messages. </p>
<p>Thanks to succinct F# language and functional actor patterns this layer is
very thin, and thus easy to understand and maintain. </p>
<p>The business logic is isolated and by itself has no dependency on Akka.NET.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Functional Actor Patterns with Akka.NET and F#</title>
        <link href="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp"/>
        <updated>2016-03-21T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-03-21,/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp</id>
        <content type="html"><![CDATA[<p>My exploration of Actor model started with <a href="http://getakka.net">Akka.NET</a> framework - a .NET port of
JVM-based <a href="http://akka.io">Akka</a>. Actor programming model made a lot of sense to me, but once
I started playing with it, some questions arose. Most of those questions were related to the
following <a href="http://doc.akka.io/docs/akka/2.4.2/general/actors.html">definition</a>:</p>
<blockquote>
<p>An actor is a container for <code>State</code>, <code>Behavior</code>, a <code>Mailbox</code>, <code>Children</code> and a <code>Supervisor Strategy</code>.</p>
</blockquote>
<p>So, based on the <a href="https://github.com/petabridge/akka-bootcamp">Akka.NET Bootcamp</a> course I understood that
an Actor</p>
<ul>
<li>knows what kind of messages it can accept</li>
<li>does some processing of each message</li>
<li>holds some state which is changed during message processing</li>
<li>potentially changes its behavior based on the current state</li>
<li>creates and stores references to child actors</li>
<li>obtains references to other actors</li>
<li>sends messages to children and other actors</li>
</ul>
<p>While it&#39;s nice that the framework enables us to develop for different aspects of actor 
behavior, it might also be dangerous in case you do all the things in one place. Ball of spaghetti mud
was where I ended up during my first attempt. My actors were doing all the things from 
the above list and the code got messy very quick. So, the following questions popped up
in my head:</p>
<p><em>How do I avoid mixing several concerns in one piece of code?</em></p>
<p><em>How do I make the code easily testable?</em></p>
<p><em>How do I minimize the usage of mutable state?</em></p>
<p><em>How do I avoid boilerplate code when it&#39;s not needed?</em></p>
<h2 id="functional-actors">Functional Actors</h2>
<p>I am now developing the actor-based application in F#, the functional first
language. Functions are easy to reason about, reusable and testable. But the
actors are usually defined in terms of objects and classes. F# supports classes
but that&#39;s not the path that I&#39;m willing to go.</p>
<p>How do we make actors out of functions? Well, most of the time actors don&#39;t 
need all the features of the framework. In this case we can define the required actor
behavior in terms of a minimal function and then use creational patterns to
spawn actor instances out of it.</p>
<p>Let&#39;s look at some common patterns that I identified. For each pattern, I will
define </p>
<ul>
<li>an example of a core function which implements the business logic</li>
<li>a generic function to create actors with behavior of a core function</li>
<li>an example of actor instantiation using the two functions above</li>
</ul>
<hr>
<p><a name="MessageSink" href="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharpundefined"></a></p>
<h2 id="message-sink">Message Sink</h2>
<p>Stateless Message Sink is the simplest type of actor.</p>
<p><img src="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/messagesink.png" alt="Message Sink actor"></p>
<p>It receives a message and executes some action on it. The action is not related
to any other actors, and there is no state, so the processing of each message
is always the same. Obviously, it&#39;s related to some kind of side effects:
logging the message, saving the data to the external storage and so on.</p>
<p>So, we don&#39;t need the majority of actor features in this case. The whole actor
processing could be represented by a function of type <code>&#39;a -&gt; unit</code>. Here 
is an example of a core function:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> print msg =
  printn <span class="hljs-string">"Message received: %A"</span> msg
</code></pre>
<p>So how do we make an actor out of this function? The <code>actorOf2</code> helper function
from Akka.NET F# extensions comes into play:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> actorOfSink (f : <span class="hljs-attribute">'a</span> -&gt; unit) =
  actorOf2 (<span class="hljs-keyword">fun</span> _ msg -&gt; f msg)
</code></pre>
<p>And here is how we spawn an actor instance:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> printActorRef = 
  actorOfSink print 
  |&gt; spawn system <span class="hljs-string">"print-actor"</span>

printActorRef &lt;! <span class="hljs-number">3</span>
<span class="hljs-comment">// "Message received: 3" is printed</span>
</code></pre>
<p>That&#39;s the simplicity that I&#39;m searching for. Let&#39;s look at a slightly more
complex example.</p>
<hr>
<p><a name="Converter" href="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharpundefined"></a></p>
<h2 id="converter">Converter</h2>
<p>Stateless Converter maps the incoming message into another message and sends
it to another predefined actor.</p>
<p><img src="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/converter.png" alt="Converter actor"></p>
<p>The core of this actor is a classic function with one input and one output
parameter (type <code>&#39;a - &#39;b</code>):</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> square msg =
  msg * msg
</code></pre>
<p>The actor function is similar to the one of Message Sink, but it also accepts
a reference to the output actor and knows how to send messages to it:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> actorOfConvert f outputRef =
  actorOf2 (<span class="hljs-keyword">fun</span> _ msg -&gt; outputRef &lt;! f msg)
</code></pre>
<p>Here is how we spawn an instance of a Converter using our <code>print-actor</code> as the
output:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> squareActorRef = 
  actorOfConvert square printActorRef 
  |&gt; spawn system <span class="hljs-string">"square-actor"</span>

squareActorRef &lt;! <span class="hljs-number">3</span>
<span class="hljs-comment">// "Message received: 9" is printed</span>
</code></pre>
<p>Both actor patterns had no notion of state so far. Let&#39;s see how we can 
treat the statefulness in a functional way.</p>
<hr>
<h2 id="stateful-sink">Stateful Sink</h2>
<p>Let&#39;s get back to our Message Sink actor with side-effects, and make it
dependent on its internal state. The state is affected by the incoming 
messages and is preserved until the next message comes in.</p>
<p><img src="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/statefulsink.png" alt="Stateful Sink actor"></p>
<p>Does not look very functional, right? But this impression is wrong in fact.
We can represent the state before a message came in - as an extra input parameter, 
and  the state after the message got processed - as an output parameter. 
We start with an initial state and the output of the
first message becomes the input state of the second message:</p>
<p><img src="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/statefulsinkfunctional.png" alt="Stateful Sink functional actor"></p>
<p>Here is an example of a function which prints out the index of a message together
with the message contents:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> printIndex index msg =
  printn <span class="hljs-string">"Message [%i] received: %A"</span> index msg
  index + <span class="hljs-number">1</span>
</code></pre>
<p>For the actor implementation we need a recursive function so we can&#39;t use 
<code>actorOf2</code> anymore. Actor workflow is a bit more lines but still very simple:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> actorOfStatefulSink f initialState (mailbox : Actor&lt;<span class="hljs-attribute">'a</span>&gt;) =

  <span class="hljs-keyword">let</span> <span class="hljs-keyword">rec</span> imp lastState =
    actor {
      <span class="hljs-keyword">let</span>! msg = mailbox.Receive()
      <span class="hljs-keyword">let</span> newState = f msg lastState
      <span class="hljs-keyword">return</span>! imp newState
    }

  imp initialState
</code></pre>
<p>And here is a usage example:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> printIndexActorRef = 
  actorOfSink printIndex <span class="hljs-number">1</span>
  |&gt; spawn system <span class="hljs-string">"print-ix-actor"</span>

printActorRef &lt;! <span class="hljs-number">3</span>
<span class="hljs-comment">// "Message [1] received: 3" is printed</span>

printActorRef &lt;! <span class="hljs-number">4</span>
<span class="hljs-comment">// "Message [2] received: 4" is printed</span>
</code></pre>
<hr>
<p><a name="StatefulConverter" href="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharpundefined"></a></p>
<h2 id="stateful-converter">Stateful Converter</h2>
<p>By now, the core function of the Stateful Converter actor should be a no-brainer for you. The actor
would have two input parameters and two outputs (in a tuple). One of the outputs
is a message and goes to another actor, the other output becomes an input for the
next actor:</p>
<p><img src="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/statefulconverter.png" alt="Stateful Converter actor"></p>
<p>Here is a function which squares the messaged number, then calculates the running total
and sends it forward:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> squareAndSum sum msg =
  <span class="hljs-keyword">let</span> result = sum + msg*msg
  (result, result)
</code></pre>
<p>In this particular case the output message and state are equal, but they don&#39;t
have to be. Here is the actor implementation:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> actorOfStatefulConvert f initialState outputRef (mailbox : Actor&lt;<span class="hljs-attribute">'a</span>&gt;) =

  <span class="hljs-keyword">let</span> <span class="hljs-keyword">rec</span> imp lastState =
    actor {
      <span class="hljs-keyword">let</span>! msg = mailbox.Receive()
      <span class="hljs-keyword">let</span> (result, newState) = f msg lastState
      outputRef &lt;! result
      <span class="hljs-keyword">return</span>! imp newState
    }

  imp initialState
</code></pre>
<p>And a usage example:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> squareAndSumActorRef = 
  actorOfConvert square <span class="hljs-number">0</span> printIndexActorRef 
  |&gt; spawn system <span class="hljs-string">"square-sum-actor"</span>

squareAndSumActorRef &lt;! <span class="hljs-number">3</span>
<span class="hljs-comment">// "Message [1] received: 9" is printed</span>

squareAndSumActorRef &lt;! <span class="hljs-number">4</span>
<span class="hljs-comment">// "Message [2] received: 25" is printed</span>
</code></pre>
<hr>
<p><a name="ConverterSupervisor" href="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharpundefined"></a></p>
<h2 id="converter-supervisor">Converter-Supervisor</h2>
<p>In the previous patterns the Converter actors were sending messages 
to predefined actor references which were not managed (or supervised in Akka terms)
by those actors. Now, let&#39;s say that the actor needs to create a child
to send converted messages to it afterwards: </p>
<p><img src="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/supervisedchild.png" alt="Supervised Child actor"></p>
<p>We can treat such child reference as the state and instantiate it when the first message
comes in. (We can&#39;t spawn it before the first message because the
<code>mailbox</code> object is required.) The message goes to the actor
reference that we store in the state, something like this:</p>
<p><img src="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/childasstate.png" alt="Supervised Child as State"></p>
<p>Here is the generic actor implementation:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> actorOfConvertToChild f spawnChild (mailbox : Actor&lt;<span class="hljs-attribute">'a</span>&gt;) =

  <span class="hljs-keyword">let</span> <span class="hljs-keyword">rec</span> imp state =
    actor {
      <span class="hljs-keyword">let</span> newstate =
        <span class="hljs-keyword">match</span> state <span class="hljs-keyword">with</span>
        | Some s -&gt; s
        | None -&gt; spawnChild mailbox

      <span class="hljs-keyword">let</span>! msg = mailbox.Receive()
      newstate &lt;! f msg
      <span class="hljs-keyword">return</span>! imp (Some newstate)
    }

  imp None
</code></pre>
<p>The only difference is that we accept a <code>spawnChild</code> function instead of
pre-baked actor reference. Here is the first calculator example refactored
to Print actor being a child of Square actor.</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> squareWithChildRef = 
  actorOfConvertToChild print (spawnChild square <span class="hljs-string">"print-actor"</span>)
  |&gt; spawn system <span class="hljs-string">"square-with-child-actor"</span>
</code></pre>
<p>Notice that the <code>square</code> and <code>print</code> functions have exactly the same signatures
and implementations as we used before, and the concern of actor hierarchy is 
completely separated from the business logic of the actors.</p>
<p>This hierarchy is handy whenever you need multiple instances of one actor type
(<code>f</code>-actor from the picture) and corresponding instances of another actor type
(<code>g</code>-actor):</p>
<p><img src="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/multiparents.png" alt="Multiple Parents and Children actor"></p>
<hr>
<p><a name="RouterSupervisor" href="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharpundefined"></a></p>
<h2 id="router-supervisor">Router-Supervisor</h2>
<p>Routers are the kind of actors which forward each incoming message to one
or more downstream actors. In this example the downstream actors are supervised
by the Router itself.
So, the Router-Supervisor can have multiple children and send the result of 
message processing to one or more of them:</p>
<p><img src="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/router.png" alt="Router actor"></p>
<p>To keep the spirit of functional actors, we represent the router logic with a function
of type <code>&#39;a -&gt; seq&lt;string * &#39;b&gt;</code>, where <code>&#39;a</code> is the type of incoming messages,
<code>&#39;b</code> is the type of outgoing messages, and <code>string</code> represents the identifier of the 
actor to get the message. Here is a sample implementation:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> routeSensorData msg = 
  msg |&gt; Seq.map (<span class="hljs-keyword">fun</span> x -&gt; (<span class="hljs-string">"sensor-actor-"</span> + x.SensorId, x.Temperature))
</code></pre>
<p>Based on the incoming metadata (sensor identifier) the actor forwards its
temperature to corresponding sensor-specific actor. </p>
<p>Here is the implementation of the generic actor function:</p>
<pre class="highlight"><code class="hljs fsharp"><span class="hljs-keyword">let</span> actorOfRouteToChildren f spawnChild (mailbox : Actor&lt;<span class="hljs-attribute">'a</span>&gt;) =

  <span class="hljs-keyword">let</span> getActor id = 
    <span class="hljs-keyword">let</span> actorRef = mailbox.Context.Child(id)
    <span class="hljs-keyword">if</span> actorRef.IsNobody() <span class="hljs-keyword">then</span>
      spawnChild id mailbox
    <span class="hljs-keyword">else</span> 
      actorRef

  <span class="hljs-keyword">let</span> <span class="hljs-keyword">rec</span> imp () =
    actor {
      <span class="hljs-keyword">let</span>! msg = mailbox.Receive()
      f msg |&gt; Seq.iter (<span class="hljs-keyword">fun</span> (id, x) -&gt; (getActor id) &lt;! x) 
      <span class="hljs-keyword">return</span>! imp ()
    }

  imp ()
</code></pre><p>And a usage example:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> sensorRouterRef = 
  actorOfRouteToChildren routeSensorData (spawnChild square)
  |&gt; spawn system <span class="hljs-string">"route-sensor-actor"</span>
</code></pre>
<p>Note that <code>spawnChild</code> does not accept the child ID anymore because it&#39;s being
controlled by the router itself.</p>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>With the patterns that we have so far we should be able to build quite powerful
hierarchies like the one shown below:</p>
<p><img src="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/usecase.png" alt="Actor use case"></p>
<p>There might be many other scenarios and types of actors that would make sense
in your use case. I&#39;m just showing the basic patterns, but more importantly the way of 
reasoning about the code. Don&#39;t 
let the multitude of actor aspects push you into the world of poorly structured 
code.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Aurelia Map Component with Leaflet</title>
        <link href="http://mikhail.io/2016/03/aurelia-map-component-with-leaflet"/>
        <updated>2016-03-11T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-03-11,/2016/03/aurelia-map-component-with-leaflet</id>
        <content type="html"><![CDATA[<p>This is a short tutorial on how to create a map control in <a href="http://aurelia.io">Aurelia.js</a> 
application. I am using the <a href="http://leafletjs.com">Leaflet</a> library with custom tile
source and I also show the way to implement your own overlay layer. Here is what
my map looks like:</p>
<p><img src="http://mikhail.io/2016/03/aurelia-map-component-with-leaflet/map.png" alt="Map"></p>
<p>So, I assume you already have an existing Aurelia application, and let&#39;s start.</p>
<h2 id="install-leaflet">Install Leaflet</h2>
<p>The following command will install Leaflet module to the application:</p>
<pre class="highlight"><code class="hljs cmake">jspm <span class="hljs-keyword">install</span> leaflet
</code></pre><p>If you are using TypeScript, don&#39;t forget to add type definitions</p>
<pre class="highlight"><code class="hljs cmake">tsd <span class="hljs-keyword">install</span> leaflet
</code></pre><h2 id="define-a-map-component">Define a Map Component</h2>
<p>Create a new <code>map.html</code> file and put the following contents there:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">require</span> <span class="hljs-attribute">from</span>=<span class="hljs-value">"leaflet/dist/leaflet.css"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">require</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"mapid"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"height: 100%"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">template</span>&gt;</span>
</code></pre>
<p>We import the CSS required by leaflet and define the <code>div</code> element to host
the map in. Then, create a new <code>map.js</code> file (or <code>map.ts</code> for typescript),
here is the minimum code:</p>
<pre class="highlight"><code class="hljs javascript">export <span class="hljs-keyword">class</span> Map {
}
</code></pre>
<h2 id="load-the-map-with-tiles">Load the Map with Tiles</h2>
<p>First, import the leaflet module in your codebehind:</p>
<pre class="highlight"><code class="hljs javascript">import * as L from <span class="hljs-string">'leaflet'</span>;
</code></pre>
<p>Now, define the <code>attached</code> function, which would be called by Aurelia when
control&#39;s HTML is loaded, and make a map there:</p>
<pre class="highlight"><code class="hljs javascript">export <span class="hljs-keyword">class</span> Map {
  attached() {
    <span class="hljs-keyword">let</span> map = L.map(<span class="hljs-string">'mapid'</span>).setView([<span class="hljs-number">51.505</span>, -<span class="hljs-number">0.09</span>], <span class="hljs-number">13</span>);

    <span class="hljs-keyword">let</span> urlTemplate = <span class="hljs-string">'http://{s}.tile.osm.org/{z}/{x}/{y}.png'</span>;
    map.addLayer(L.tileLayer(urlTemplate, { minZoom: <span class="hljs-number">4</span> }));
  }
}
</code></pre>
<p>The example above uses the URL template of Open Street Maps as per the Leaflet&#39;s
tutorial, but I needed to use our privately hosted maps, so I changed it to
something like:</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">let</span> urlTemplate = <span class="hljs-string">'http://www.mysite.com/tiles?layer=background&amp;level={z}&amp;x={x}&amp;y={y}'</span>;
map.addLayer(L.tileLayer(urlTemplate, { minZoom: <span class="hljs-number">4</span>, zoomOffset: <span class="hljs-number">8</span> }));
</code></pre>
<p>The <code>zoomOffset</code> parameter was required to fix impedance mismatch of zoom levels.</p>
<h2 id="custom-overlay-layer">Custom Overlay Layer</h2>
<p>For our custom maps we needed to show two layers on top of each other:</p>
<ul>
<li>The usual tile layer for the map background</li>
<li>The overlay layer for the map labels and additional information</li>
</ul>
<p>The overlay layer can&#39;t be broken down into tiles (not supported by our map provider),
so we need to show the whole layer as a single picture and then refresh it every
time user pans or zooms the map.</p>
<p>The overlay layer can be implemented with <code>onAdd</code> and <code>onRemove</code> functions
and then feeding an image element to the Leaflet as a layer. Here is the code:</p>
<pre class="highlight"><code class="hljs javascript">import * as L from <span class="hljs-string">'leaflet'</span>;

export <span class="hljs-keyword">class</span> LabelOverlayLayer {
  map;
  image;

  onAdd(map) {
    <span class="hljs-keyword">this</span>.map = map;

    <span class="hljs-keyword">this</span>.image = L.DomUtil.create(<span class="hljs-string">'img'</span>, <span class="hljs-string">'leaflet-tile-loaded'</span>);
    map.getPanes().overlayPane.appendChild(<span class="hljs-keyword">this</span>.image);

    map.on(<span class="hljs-string">'moveend'</span>, <span class="hljs-keyword">this</span>.render, <span class="hljs-keyword">this</span>);
    <span class="hljs-keyword">this</span>.render();
  }

  onRemove (map) {
    map.getPanes().overlayPane.removeChild(<span class="hljs-keyword">this</span>.image);
    map.off(<span class="hljs-string">'moveend'</span>, <span class="hljs-keyword">this</span>.render, <span class="hljs-keyword">this</span>);
  }

  render() {
    <span class="hljs-keyword">let</span> bounds = <span class="hljs-keyword">this</span>.map.getBounds(), mapSize = <span class="hljs-keyword">this</span>.map.getSize();
    <span class="hljs-keyword">let</span> se = bounds.getSouthEast(), nw = bounds.getNorthWest();

    <span class="hljs-keyword">let</span> tileUrl = `http:<span class="hljs-comment">//www.mysite.com/tiles?layer=labels&amp;lonmin=${nw.lng}&amp;latmin=${se.lat}&amp;lonmax=${se.lng}&amp;latmax=${nw.lat}&amp;width=${Math.floor(mapSize.x)}&amp;height=${Math.floor(mapSize.y)}`;</span>
    <span class="hljs-keyword">this</span>.image.src = tileUrl;

    <span class="hljs-keyword">let</span> pos = <span class="hljs-keyword">this</span>.map.latLngToLayerPoint(nw);
    L.DomUtil.setPosition(<span class="hljs-keyword">this</span>.image, pos, <span class="hljs-literal">false</span>);
  }
};
</code></pre>
<p>The usage of this layer in the map component is trivial:</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">this</span>.map.addLayer(<span class="hljs-keyword">new</span> LabelOverlayLayer());
</code></pre>
<h2 id="use-the-map-component">Use the Map Component</h2>
<p>The map component is ready to be used in the application:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">require</span> <span class="hljs-attribute">from</span>=<span class="hljs-value">"./components/map"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">require</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span>  <span class="hljs-attribute">style</span>=<span class="hljs-value">"height: 700px"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">map</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">map</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>The container around the map should have a non-zero height, so I made it fixed
in the example above.</p>
<p>Don&#39;t forget to bundle the leaflet assets by including the following lines
into your <code>bundles.json</code>:</p>
<pre class="highlight"><code class="hljs undefined">"includes": [
  "aurelia-framework",
  // ...
  "leaflet",
  "leaflet/dist/leaflet.css!text"
],
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title>Building a Poker Bot: Mouse Movements</title>
        <link href="http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements"/>
        <updated>2016-03-01T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-03-01,/2016/03/building-a-poker-bot-mouse-movements</id>
        <content type="html"><![CDATA[<p><em>This is the third part of <strong>Building a Poker Bot</strong> series where I describe my experience developing bot software 
to play in online poker rooms. I&#39;m building the bot with .NET framework and F# language which makes the task relatively 
easy and very enjoyable. Here are the previous parts:</em></p>
<ul>
<li><a href="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/"><em>Building a Poker Bot: Card Recognition</em></a></li>
<li><a href="http://mikhail.io/2016/02/building-a-poker-bot-string-recognition/"><em>Building a Poker Bot: String and Number Recognition</em></a></li>
</ul>
<p>In this short post I write about the last step of the poker bot flow: clicking
the buttons. So, the screen is already recognized, the hand is understood,
the decisions are made and now the bot needs to execute the actions. Except for
the bet sizing, this simply means clicking the right button at the poker table.</p>
<p>The stealthiness of such clicks is a valid concern here. Ideally, we want all
the mouse movements to look as similar as possible to the movements produced
by a human being. For this post, I will simplify the task to the following steps:</p>
<ul>
<li>Identify where the mouse cursor is right now</li>
<li>Decide where the mouse should be moved to</li>
<li>Gradually move the mouse cursor</li>
<li>Click the button</li>
</ul>
<h2 id="cursor-position">Cursor Position</h2>
<p>It&#39;s really easy to understand where the mouse cursor currently is: just
use <code>Control.MousePosition</code> property from the standard library:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> currentPosition () = 
  <span class="hljs-keyword">let</span> mp = System.Windows.Forms.Control.MousePosition
  (mp.X, mp.Y)
</code></pre>
<p>Note that your application doesn&#39;t have to be based on WinForms, just reference
the required assembly.</p>
<h2 id="move-the-cursor">Move the Cursor</h2>
<p>I use the third party <a href="https://inputsimulator.codeplex.com/">WindowsInput</a> 
library to control the mouse and the keyboard programmatically. It uses some
weird coordinate system, so the function to move the mouse cursor looks like this:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> simulator = <span class="hljs-keyword">new</span> InputSimulator()

<span class="hljs-keyword">let</span> moveTo x y =
  <span class="hljs-keyword">let</span> toX = <span class="hljs-number">65535.</span> * x / (Screen.PrimaryScreen.Bounds.Width |&gt; float)
  <span class="hljs-keyword">let</span> toY = <span class="hljs-number">65535.</span> * y / (Screen.PrimaryScreen.Bounds.Height |&gt; float)
  simulator.Mouse.MoveMouseTo(toX, toY)
</code></pre>
<p>The input parameters <code>x</code> and <code>y</code> are the pixel location starting at 
the top-left corner of the screen.</p>
<h2 id="move-it-smoothly">Move It Smoothly</h2>
<p>Now we want to simulate the human-like movements. It won&#39;t be perfect, but
at least it should look decent. For this gradual movement function I used
a nice F# feature called asynchronous workflows. Effectively, it looks like
a loop with async sleep statements inside.</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> moveToWorkflow step (toX, toY) = async {
  <span class="hljs-keyword">let</span> (fromX, fromY) = currentPosition()
  <span class="hljs-keyword">let</span> count = Math.Max(<span class="hljs-number">10</span>, (Math.Abs (toX - fromX) + Math.Abs (toY - fromY)) / <span class="hljs-number">20</span>)
  <span class="hljs-keyword">for</span> i = <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> count <span class="hljs-keyword">do</span>
    <span class="hljs-keyword">let</span> x = step fromX toX count i |&gt; float
    <span class="hljs-keyword">let</span> y = step fromY toY count i |&gt; float
    moveTo x y
    <span class="hljs-keyword">do</span>! Async.Sleep <span class="hljs-number">3</span>
  }
</code></pre>
<p>The key parameter here is the <code>step</code> function of obscure type <code>int -&gt; int -&gt; int -&gt; int -&gt; int</code>.
Basically, it calculates a coordinate for n-th step of the movement. We can
plug different implementations of this function to find the right balance of
the movement style. Here is the simplest linear implementation:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> linearStep from until max i =
  from + (until - from) * i / max
</code></pre>
<p>The sinus-based implementation is a bit more verbose because of float-int 
conversions:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> sinStep (from:int) (until:int) (max:int) (index:int) =
  <span class="hljs-keyword">let</span> fromf = from |&gt; float
  <span class="hljs-keyword">let</span> untilf = until |&gt; float
  <span class="hljs-keyword">let</span> maxf = max |&gt; float
  <span class="hljs-keyword">let</span> indexf = index |&gt; float
  fromf + (untilf - fromf) * Math.Sin(Math.PI / <span class="hljs-number">2.</span> * indexf / maxf) |&gt; int
</code></pre>
<p>The following animation illustrates the concept: </p>
<svg width="778" height="190" viewbox="0 0 500 190">
  <image id="mouse1" x="0" y="20" width="16" height="16" xlink:href="/2016/03/building-a-poker-bot-mouse-movements/mouse_cursor-16.png"></image>
  <image id="mouse2" x="0" y="90" width="16" height="16" xlink:href="/2016/03/building-a-poker-bot-mouse-movements/mouse_cursor-16.png"></image>
  <image id="mouse3" x="0" y="160" width="16" height="16" xlink:href="/2016/03/building-a-poker-bot-mouse-movements/mouse_cursor-16.png"></image>

  <animate xlink:href="#mouse1" attributename="x" from="0" to="0" values="0;450;0" keytimes="0;0.5;1" repeatcount="indefinite" dur="2s" begin="0s" fill="none" calcmode="discrete" id="img-anim1"></animate>
  <animate xlink:href="#mouse2" attributename="x" from="0" to="0" values="0;450;0" keytimes="0;0.5;1" repeatcount="indefinite" dur="2s" begin="0s" fill="none" id="img-anim2"></animate>
  <animate xlink:href="#mouse3" attributename="x" from="0" to="0" values="0;70;139;204;264;318;364;401;428;444;450;380;311;246;186;132;86;49;22;6;0" keytimes="0;0.05;0.1;0.15;0.2;0.25;0.3;0.35;0.4;0.45;0.5;0.55;0.6;0.65;0.7;0.75;0.8;0.85;0.9;0.95;1" repeatcount="indefinite" dur="2s" begin="0s" fill="none" id="img-anim3"></animate><br></svg>

<p>The top mouse cursor just
jumps from left to right and back (no animation). The middle cursor moves with
linear speed (<code>linearStep</code> function above). The bottom cursor moves based on
the <code>sinStep</code> function derived from sinus of time.</p>
<h2 id="click-the-button">Click the Button</h2>
<p>A button is a rectangle and we want to click a random point inside it. So, all
we need is to pick random coordinates, move the mouse there and send a 
click event via the simulator:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> clickButton (minX, minY, maxX, maxY) =
  <span class="hljs-keyword">let</span> r = <span class="hljs-keyword">new</span> Random()
  <span class="hljs-keyword">let</span> p = (r.Next(minX, maxX), r.Next(minY, maxY))
  moveToWorkflow sinStep p |&gt; Async.RunSynchronously
  simulator.Mouse.LeftButtonClick()
</code></pre>
<h2 id="demo-time">Demo Time</h2>
<p>Here is the demo of the mouse movements:</p>
<p><img src="http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements/mouseclicking.gif" alt="Mouse clicking the button"></p>
<p>It looks fun, doesn&#39;t it? The full code for the mouse movements can be found in 
<a href="https://github.com/mikhailshilkov/mikhailio-samples/blob/master/Clicker.fs">my github repo</a>.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Unit testing Dapper repositories</title>
        <link href="http://mikhail.io/2016/02/unit-testing-dapper-repositories"/>
        <updated>2016-02-23T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-02-23,/2016/02/unit-testing-dapper-repositories</id>
        <content type="html"><![CDATA[<p><a href="https://github.com/StackExchange/dapper-dot-net">Dapper</a> is a micro-ORM library which is 
very simple and super fast. In our projects we use Dapper for the tasks where something like
EntityFramework or NHibernate would be an overkill.</p>
<p>Quite often the data access code is difficult to be unit tested. Objects like
database connections, commands, transactions and contexts are hard to mock, and
thus the data access code is not easily isolated. Dapper relies heavily on SQL
statements inside C# code, which gives an extra complication. Some people would
argue that unit tests are not warranted for data access layer, and integration
tests should be used instead. Let&#39;s have a look at another possibility.</p>
<h2 id="an-example-of-a-repository">An Example of a Repository</h2>
<p>Let&#39;s say we have a simple class and we want to populate instances of this class
from the database:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Product</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Id { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Name { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Description { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
<p>To be able to use Dapper for data access, we need an instance of <code>IDbConnection</code>.
As we want to be able to mock the connection for unit tests, we need to create
a factory interface to abstract it away:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IDatabaseConnectionFactory</span>
{
    <span class="hljs-function">IDbConnection <span class="hljs-title">GetConnection</span><span class="hljs-params">()</span></span>;
}
</code></pre>
<p>Now the repository would get a connection from this factory and execute 
Dapper queries on it:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ProductRepository</span>
{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> IDatabaseConnectionFactory connectionFactory;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProductRepository</span><span class="hljs-params">(IDatabaseConnectionFactory connectionFactory)</span>
    </span>{
        <span class="hljs-keyword">this</span>.connectionFactory = connectionFactory;
    }

    <span class="hljs-keyword">public</span> Task&lt;IEnumerable&lt;Product&gt;&gt; GetAll()
    {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.connectionFactory.GetConnection().QueryAsync&lt;Product&gt;(
            <span class="hljs-string">"select * from Product"</span>);
    }
}
</code></pre>
<h2 id="testing-without-a-real-database">Testing Without a real Database</h2>
<p>Here is my approach to testing the repository:</p>
<ol>
<li>Use an in-memory <a href="https://www.sqlite.org/">SQLite3</a> database.</li>
<li>Create a table there and put some data in.</li>
<li>Run the repository against this database.</li>
<li>Compare the result to the expected values.</li>
</ol>
<p>Here is a helper class which uses another micro-ORM library <a href="http://ormlite.com/">OrmLite</a> to talk
to SQLite database:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InMemoryDatabase</span>
{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> OrmLiteConnectionFactory dbFactory = 
        <span class="hljs-keyword">new</span> OrmLiteConnectionFactory(<span class="hljs-string">":memory:"</span>, SqliteOrmLiteDialectProvider.Instance);

    <span class="hljs-function"><span class="hljs-keyword">public</span> IDbConnection <span class="hljs-title">OpenConnection</span><span class="hljs-params">()</span> </span>=&gt; <span class="hljs-keyword">this</span>.dbFactory.OpenDbConnection();

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> Insert&lt;T&gt;(IEnumerable&lt;T&gt; items)
    {
        <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> db = <span class="hljs-keyword">this</span>.OpenConnection())
        {
            db.CreateTableIfNotExists&lt;T&gt;();
            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> items)
            {
                db.Insert(item);
            }
        }
    }
}
</code></pre>
<p>And here is the test for our <code>ProductRepository</code> class:</p>
<pre class="highlight"><code class="hljs cs">[Test]
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">QueryTest</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment">// Arrange</span>
    <span class="hljs-keyword">var</span> products = <span class="hljs-keyword">new</span> List&lt;Product&gt;
    {
        <span class="hljs-keyword">new</span> Product { ... },
        <span class="hljs-keyword">new</span> Product { ... }
    };
    <span class="hljs-keyword">var</span> db = <span class="hljs-keyword">new</span> InMemoryDatabase();
    db.Insert(products);
    connectionFactoryMock.Setup(c =&gt; c.GetConnection()).Returns(db.OpenConnection());

    <span class="hljs-comment">// Act</span>
    <span class="hljs-keyword">var</span> result = <span class="hljs-function"><span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title">ProductRepository</span><span class="hljs-params">(connectionFactoryMock.Object)</span>.<span class="hljs-title">GetAll</span><span class="hljs-params">()</span></span>;

    <span class="hljs-comment">// Assert</span>
    result.ShouldBeEquivalentTo(products);
}
</code></pre>
<h2 id="is-it-a-unit-test-">Is It a Unit Test?</h2>
<p>Well, not completely. This approach does not mock the database, but instead puts
an in-memory database in place of the normal one. The problem is that we don&#39;t 
control all the details how it works, so it might not be as flexible as we need.
For instance, SQLite type system is quite simplistic, so while <code>INT</code> and <code>BIGINT</code>
are different column types in SQL Server, they are the same <code>INTEGER</code> type in
SQLite. This can lead to false positive or false negative tests in edge cases.</p>
<p>Nevertheless, the concept is simple and requires very little amount of code,
so it&#39;s useful to have it in the toolbox anyway. The resulting tests are fast,
have no external dependencies and are always consistent between multiple runs.
That makes them better than real integration tests for the simple scenarios 
during TDD development.</p>
]]></content>
    </entry>
    
</feed>