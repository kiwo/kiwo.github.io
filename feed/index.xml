<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Mikhail Shilkov</title>
    <link href="http://mikhail.io/feed/" rel="self"/>
    <link href="http://mikhail.io"/>
    <updated>2016-10-17T11:07:46.729Z</updated>
    <id>http://mikhail.io/</id>
    <author>
        <name>Mikhail Shilkov</name>
        <email></email>
    </author>

    
    <entry>
        <title>Leaflet plugin to render geographic corridors</title>
        <link href="http://mikhail.io/2016/10/leaflet-plugin-to-render-geographic-corridors"/>
        <updated>2016-10-17T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-10-17,/2016/10/leaflet-plugin-to-render-geographic-corridors</id>
        <content type="html"><![CDATA[<p>Yesterday I&#39;ve published a simple <a href="http://leafletjs.com/">Leaflet</a> plugin called
<a href="https://github.com/mikhailshilkov/leaflet-corridor">leaflet-corridor</a>. 
The plugin defines a new Leaflet primitive <code>L.Corridor</code>.</p>
<p>When initialized with an array of geo points and width, it renders a polyline 
with width fixed in meters, not in pixels. That means that line width changes whenever 
zoom level changes. </p>
<p><img src="http://mikhail.io/2016/10/leaflet-plugin-to-render-geographic-corridors/leaflet-corridor.gif" alt="Leaflet-corridor animation"></p>
<p>The plugin is handy to denote geographic corridors: ranges of specified width around 
a polyline. In our project we used it to show a predefined vehicle route from Origin to
Destination, with only limited allowed violation from this predefined route. Whenever
vehicle&#39;s position falls out of this corridor, the event of Out-of-corridor violation
is recorded and shown on the map.</p>
<p>Here are all the links for the corridor plugin:</p>
<ul>
<li><a href="https://github.com/mikhailshilkov/leaflet-corridor">Github repository</a> with source code, documentation and usage example</li>
<li><a href="http://mikhail.io/demos/leaflet-corridor/">Demo page</a> to try it out</li>
<li><a href="http://stackoverflow.com/questions/26206636/is-there-any-method-to-draw-path-polyline-on-leaflet-with-constant-width-strok/40064379">Stackoverflow question</a> which inspired me to open-source the implementation</li>
</ul>
]]></content>
    </entry>
    
    <entry>
        <title>Azure SQL Databases: backups, disaster recovery, import and export</title>
        <link href="http://mikhail.io/2016/10/azure-sql-databases-backups-disaster-recovery-import-export"/>
        <updated>2016-10-11T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-10-11,/2016/10/azure-sql-databases-backups-disaster-recovery-import-export</id>
        <content type="html"><![CDATA[<p>Azure SQL Database is a managed cloud database-as-a-service. It provides
application developers with SQL Server databases which are hosted in the
cloud and fully managed by Microsoft.</p>
<p>The service is very easy to start with. Several clicks in the portal and
you have a database running. Now you can copy the connection string to
your application config file, and boom - you have all up and running.
No installation, no license to buy - just pay the hourly fee.</p>
<p>Any production database is a very important asset, so we are used to 
give it a good care in self-hosted scenario. A number of questions appear
when you try to apply those practices to the cloud offering:</p>
<ul>
<li>How do I make a backup of my database? Where should I store it?</li>
<li>How do I move my database including schema and data from on-premise 
to the cloud?</li>
<li>How do I move it from the cloud to my local server?</li>
<li>What is a point-in-time restore offered by Azure?</li>
<li>Should I use geo-replication? What is geo-restore?</li>
</ul>
<p>In this post I&#39;ll give the short answers to these questions and the links
for further reading. </p>
<h2 id="what-is-point-in-time-restore-">What is Point-in-time Restore?</h2>
<p>All your databases are always automatically backed-up by Azure. They take
full, differential and log backups in the background to guarantee you always
have your data safe.</p>
<p>These backups are retained for 7 days for Basic, 14 days for Standard and 
35 days for Premium tier.</p>
<p>Within this period, you can choose any <em>minute</em> and restore your database
to that point in time. The restore always happens to a <strong>new</strong> database,
it does not overwrite your current database. </p>
<p><img src="http://mikhail.io/2016/10/azure-sql-databases-backups-disaster-recovery-import-export/PointInTimeRestore.png" alt="Point-in-time Restore"></p>
<p>That&#39;s very handy to recover from &quot;oops&quot; operations when data was deleted 
from one or more tables by a human or code error. In this case, you restore 
a copy of the database, and then move the data missing without stopping
the original database.</p>
<p>If the restored database must replace the current one, be prepared to change
connection strings once the restore operation is done. Alternatively, you
can rename both databases to point applications to the new database without
any other configuration changes.</p>
<p>Depending on the database size, the restore may take long time, up to several
hours, 12 hours max guaranteed. So, point-in-time restore is very flexible 
but not instant.</p>
<p>Further reading: 
<a href="https://azure.microsoft.com/en-us/blog/azure-sql-database-point-in-time-restore/">Azure SQL Database Point in Time Restore</a></p>
<h2 id="what-about-disaster-recovery-">What about disaster recovery?</h2>
<p>The same Point-in-time Restore can be used for disaster recovery. The backups
are automatically replicated to other Azure regions, and can be restored
in <em>any</em> Azure region. This is called <strong>Geo Restore</strong>.</p>
<p>In case of failure of the primary region, you can immediately start restoring
the database in another region. Remember that the restore might still take
up to several hours depending on the database size.</p>
<p>Also, because the replication is done asynchronously, the geo-restore will 
probably lead to some data loss. Usually it will be under 5 minutes of data,
but guarantee is 1 hour at max.</p>
<p>Further reading: 
<a href="https://azure.microsoft.com/en-us/blog/azure-sql-database-geo-restore/">Azure SQL Database Geo-Restore</a></p>
<h2 id="can-i-reduce-the-downtime-and-data-loss-">Can I reduce the downtime and data loss?</h2>
<p>If you want to be prepared to the failure of the database&#39;s Azure region
and be able to fail over much faster, you can use <strong>Active Geo Replication</strong>. 
Effectively, you are creating other (up to 5 in total) database(s) which
would be replicated from the primary database.</p>
<p><img src="http://mikhail.io/2016/10/azure-sql-databases-backups-disaster-recovery-import-export/GeoReplication.png" alt="Geo Replication"></p>
<p>The replication happens asynchronously, which means that the latency
of the primary database does not increase. That also means that some data
may be lost when replica database is promoted to be the new primary.
Microsoft guarantees that the loss will be limited to 5 seconds worth of data.</p>
<p>The failover can be done any time, manually or by your script.</p>
<p>Having replica databases means that you pay for them too. The performance
level (and the fee) is configurable per database.</p>
<p>As a bonus, you can use secondary databases as read-only replicas. Just
remember that the data might be slightly stale.</p>
<p>Geo Replication is only available for Standard and Premium pricing tiers.</p>
<p>Further reading: 
<a href="https://azure.microsoft.com/ru-ru/blog/spotlight-on-sql-database-active-geo-replication/">Spotlight on SQL Database Active Geo-Replication</a>,
<a href="https://azure.microsoft.com/en-us/documentation/articles/sql-database-geo-replication-overview/">Overview: SQL Database Active Geo-Replication</a></p>
<h2 id="do-i-still-need-to-make-manual-backups-">Do I still need to make manual backups?</h2>
<p>Well, it&#39;s possible that you don&#39;t have to.</p>
<p>But there are at least two scenarios when you might still need to make 
manual backups:</p>
<ol>
<li><p>You need to keep a copy of your database for longer period than 
Point-in-time restore allows (7 to 35 days depending on the service tier).</p>
</li>
<li><p>You need a copy of your Azure database to be restored on premise.</p>
</li>
</ol>
<p>Let&#39;s look at manual backups.</p>
<h2 id="how-do-i-make-a-bak-file-from-my-azure-database-">How do I make a BAK file from my Azure Database?</h2>
<p>The <code>BAK</code> backup files are not directly supported by Azure SQL Databases. 
Instead, there is a feature called <code>Export Data tier application</code>, which
creates a <code>BACPAC</code> file in Azure Storage account.</p>
<p>The easiest way to do that is to use SQL Server Management Studio, connect to
Azure SQL Database, then right-click and select <code>Tasks -&gt; Export Data tier application</code>
in the menu. </p>
<p><img src="http://mikhail.io/2016/10/azure-sql-databases-backups-disaster-recovery-import-export/ExportDataTier.png" alt="Export Data Tier Application"></p>
<p>You can export the file to the local storage name or Azure Storage account. </p>
<p><img src="http://mikhail.io/2016/10/azure-sql-databases-backups-disaster-recovery-import-export/ExportSettings.png" alt="Export Settings"></p>
<p>Export will take some time and will consume your database DTUs, so you shouldn&#39;t
do it too often.</p>
<p>Export can also be triggered from Azure Portal and PowerShell scripts.</p>
<h2 id="how-do-i-restore-a-copy-of-my-cloud-database-to-a-local-server-">How do I restore a copy of my cloud database to a local server?</h2>
<p>Now, when you have a <code>BACPAC</code> file, it&#39;s really easy to restore it to any
SQL server instance. Right-click <code>Databases</code> node in SQL Server Management
Studio and select <code>Import Data-tier Application...</code>. </p>
<p><img src="http://mikhail.io/2016/10/azure-sql-databases-backups-disaster-recovery-import-export/ImportDataTier.png" alt="Import Data Tier Application"></p>
<p>Then pick the location of the saved file.</p>
<h2 id="how-do-i-move-my-existing-database-to-azure-sql-database-">How do I move my existing database to Azure SQL Database?</h2>
<p>The process is exactly the same as described above, just the other direction:</p>
<ul>
<li>Export Data-tier Application from your local SQL Server to Azure Storage</li>
<li>Import Data-tier Application to a new Azure SQL Database</li>
</ul>
<h2 id="summary">Summary</h2>
<p>Azure SQL Database is a production-ready fully managed service, which can
dramatically reduce the amount of manual administration compared to on-premise
setup. You can choose between several disaster recovery scenarios based on
your objectives and budget. Import and export of databases are available,
allowing operators to move databases between the cloud and self-hosted servers.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Getting started with Azure Application Insights in Aurelia</title>
        <link href="http://mikhail.io/2016/08/getting-started-with-azure-application-insights-in-aurelia"/>
        <updated>2016-08-21T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-08-21,/2016/08/getting-started-with-azure-application-insights-in-aurelia</id>
        <content type="html"><![CDATA[<p><a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-overview/">Azure Application Insights</a>
is an analytics service to monitor live web applications,
diagnose performance issues, and understand what users actually do with the app. 
<a href="http://aurelia.io">Aurelia</a> is a modern and slick single-page application framework.
Unfortunately, there&#39;s not much guidance on the web about how to use AppInsights and
Aurelia together in a proper manner. The task gets even more challenging in case you are
using TypeScript and want to stay in type-safe land. This post will set you up and
running in no time.</p>
<h2 id="get-your-appinsights-instrumentation-key">Get Your AppInsights Instrumentation Key</h2>
<p>If not done yet, go register in Azure Application Insights portal. To start sending
telemetry data from your application you would need a unique identifier of 
your web application, which is called an Instrumentation Key (it&#39;s just a guid). 
See <a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-javascript/">Application Insights for web pages</a>
walk-through.</p>
<h2 id="install-a-jspm-package">Install a JSPM Package</h2>
<p>I&#39;m using JSPM as a front-end package manager for Aurelia applications. If you use it
as well, run the following command to install AppInsights package:</p>
<pre class="highlight"><code class="hljs cmake">jspm <span class="hljs-keyword">install</span> github:Microsoft/ApplicationInsights-js
</code></pre><p>it will add a line to <code>config.js</code> file:</p>
<pre class="highlight"><code class="hljs r">map: {
  <span class="hljs-string">"Microsoft/ApplicationInsights-js"</span>: <span class="hljs-string">"github:Microsoft/ApplicationInsights-js@1.0.0"</span>,
<span class="hljs-keyword">...</span>
</code></pre><p>To keep the names simple, change the line to </p>
<pre class="highlight"><code class="hljs perl">  <span class="hljs-string">"ApplicationInsights"</span>: <span class="hljs-string">"github:Microsoft/ApplicationInsights-js<span class="hljs-variable">@1</span>.0.0"</span>,
</code></pre><p>Do exactly the same change in <code>project.json</code> file, <code>jspm</code> -&gt; <code>dependencies</code> section.</p>
<h2 id="create-an-aurelia-plugin">Create an Aurelia Plugin</h2>
<p>In order to track Aurelia page views, we are going to plug into the routing pipeline
with a custom plugin. Here is how my plugin looks like in JavaScript (see TypeScript
version below):</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-comment">// app-insights.js</span>
export <span class="hljs-keyword">class</span> AppInsights {
  client;

  constructor() {
    <span class="hljs-keyword">let</span> snippet = {
      config: {
        instrumentationKey: <span class="hljs-string">'YOUR INSTRUMENTATION KEY GUID'</span>
      }
    };
    <span class="hljs-keyword">let</span> init = <span class="hljs-keyword">new</span> Microsoft.ApplicationInsights.Initialization(snippet);
    <span class="hljs-keyword">this</span>.client = init.loadAppInsights();
  }

  run(routingContext, next) {
    <span class="hljs-keyword">this</span>.client.trackPageView(routingContext.fragment, <span class="hljs-built_in">window</span>.location.href);
    <span class="hljs-keyword">return</span> next();
  }
}
</code></pre>
<p>The constructor instantiates an AppInsights client. It is used inside a <code>run</code> method,
which would be called by Aurelia pipeline during page navigation.</p>
<h2 id="add-the-plugin-to-aurelia-pipeline">Add the Plugin to Aurelia Pipeline</h2>
<p>Go the the <code>App</code> class of your Aurelia application. Import the new plugin</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-comment">// app.js</span>
import {AppInsights} from <span class="hljs-string">'./app-insights'</span>;
</code></pre>
<p>and change the <code>configureRouter</code> method to register a new pipeline step:</p>
<pre class="highlight"><code class="hljs javascript">configureRouter(config, router): <span class="hljs-keyword">void</span> {
  config.addPipelineStep(<span class="hljs-string">'modelbind'</span>, AppInsights);
  config.map(<span class="hljs-comment">/*routes are initialized here*/</span>);
}
</code></pre>
<p>After re-building the application, you should be all set to go. Navigate several pages
and wait for events to appear in Application Insights portal.</p>
<h2 id="typescript-obtain-the-definition-file">TypeScript: Obtain the Definition File</h2>
<p>If you are using TypeScript, you are not done yet. In order to compile the <code>AppInsights</code>
plugin you need the type definitions for <code>ApplicationInsights</code> package. Unfortunately,
at the time of writing there is no canonical definition in <code>typings</code> registry, so
you will have to provide a custom <code>.d.ts</code> file. You can download mine from
<a href="https://github.com/mikhailshilkov/mikhailio-samples/blob/master/aurelia-app-insights/applicationinsights.d.ts">my github</a>. 
I created it based on a file from 
<a href="https://www.nuget.org/packages/Microsoft.ApplicationInsights.TypeScript">this NuGet repository</a>.</p>
<p>I&#39;ve put it into the <code>custom_typings</code> folder and then made the following adjustment
to <code>build/paths.js</code> file of Aurelia setup:</p>
<pre class="highlight"><code class="hljs gherkin">  dtsSrc: [
    'typings/<span class="hljs-keyword">*</span><span class="hljs-keyword">*</span>/<span class="hljs-keyword">*</span>.d.ts',
    'custom_typings/<span class="hljs-keyword">*</span><span class="hljs-keyword">*</span>/<span class="hljs-keyword">*</span>.d.ts'
  ],
</code></pre><p>For the reference, here is my TypeScript version of the <code>AppInsights</code> plugin:</p>
<pre class="highlight"><code class="hljs ts"><span class="hljs-keyword">import</span> {NavigationInstruction, Next} from <span class="hljs-string">'aurelia-router'</span>;
<span class="hljs-keyword">import</span> {Microsoft} from <span class="hljs-string">'ApplicationInsights'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppInsights {
  <span class="hljs-keyword">private</span> client: Microsoft.ApplicationInsights.AppInsights;

  <span class="hljs-constructor"><span class="hljs-keyword">constructor</span>() </span>{
    <span class="hljs-keyword">let</span> snippet = {
      config: {
        instrumentationKey: <span class="hljs-string">'YOUR INSTRUMENTATION KEY GUID'</span>
      },
      queue: []
    };
    <span class="hljs-keyword">let</span> init = <span class="hljs-keyword">new</span> Microsoft.ApplicationInsights.Initialization(snippet);
    <span class="hljs-keyword">this</span>.client = init.loadAppInsights();
  }

  run(routingContext: NavigationInstruction, next: Next): Promise&lt;<span class="hljs-built_in">any</span>&gt; {
    <span class="hljs-keyword">this</span>.client.trackPageView(routingContext.fragment, <span class="hljs-built_in">window</span>.location.href);
    <span class="hljs-keyword">return</span> next();
  }
}
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>This walk-through should get you started with Azure Application Insights in your
Aurelia application. Once you have page view metrics coming into the dashboard,
spend more time to discover all the exciting ways to improve your application
with Application Insights.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Comparing Scala to F#</title>
        <link href="http://mikhail.io/2016/08/comparing-scala-to-fsharp"/>
        <updated>2016-08-05T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-08-05,/2016/08/comparing-scala-to-fsharp</id>
        <content type="html"><![CDATA[<p>F# and Scala are quite similar languages from 10.000 feet view. Both are
functional-first languages developed for the virtual machines where imperative
languages dominate. C# for .NET and Java for JVM are still <em>lingua franca</em>, 
but alternatives are getting stronger.</p>
<p>My background is in .NET ecosystem, so F# was the first of the two that I started
learning. At the same time, Scala seems to have more traction, largely due to
successful products and frameworks like Spark, Akka and Play. That&#39;s why I decided
to broaden my skill set and pick up some Scala knowledge. I&#39;ve started with 
<a href="https://www.coursera.org/specializations/scala">Functional Programming in Scala Specialization</a> at Coursera.
While following the coursera, I&#39;m doing some notes about which language features
in Scala I find interesting, or vice versa - missing compared to F#.</p>
<p>In no particular order, I want to share my notes of Scala vs F# in this blog post.</p>
<p><em>Post updated based on comments by Mark Lewis and Giacomo Citi.</em></p>
<h2 id="implicit-parameters">Implicit Parameters</h2>
<p>A parameter of a function can be marked as implicit</p>
<pre class="highlight"><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">work</span>(</span><span class="hljs-keyword">implicit</span> i:<span class="hljs-type">Int</span>) = print(i)
</code></pre>
<p>and that means you can call the function without specifying the value for this parameter
and the compiler will try to figure out that value you (according to
the extensive set of rules), e.g.</p>
<pre class="highlight"><code class="hljs scala"><span class="hljs-keyword">implicit</span> <span class="hljs-function"><span class="hljs-keyword">val</span> <span class="hljs-title">v</span> =</span> <span class="hljs-number">2</span>;
<span class="hljs-comment">// ... somewhere below</span>
work <span class="hljs-comment">// prints '2'</span>
</code></pre>
<p>I am not aware of any similar features in other language that I know, so I&#39;m pretty sure
I don&#39;t understand it well enough yet :) At the same time, I think implicits are
very characteristic for Scala: they are a powerful tool, which can be used in many
valid scenarios, or can be abused to shoot in one&#39;s feet.</p>
<h2 id="underscore-in-lambdas">Underscore In Lambdas</h2>
<p>Underscores <code>_</code> can be used to represent parameters in lambda expressions
without explicitly naming them:</p>
<pre class="highlight"><code class="hljs scala">employees.sortBy(_.dateOfBirth)
</code></pre>
<p>I think that&#39;s brilliant - very short and readable. Tuple values are represented
by <code>_1</code> and <code>_2</code>, so we can sort an array of tuples like</p>
<pre class="highlight"><code class="hljs scala">profitByYear.sortBy(_._1)
</code></pre>
<p>This looks a bit hairy and should probably be used only when the meaning is obvious.
(In the example above I&#39;m not sure if we sort by year or by profit...)</p>
<p>In F# underscore is used in a different sense - as &quot;something to ignore&quot;. That makes
sense, but I would love to have a shorter way of writing lambda in</p>
<pre class="highlight"><code class="hljs fs">empoyees |&gt; List.sort (<span class="hljs-keyword">fun</span> e -&gt; e.dateOfBirth)
</code></pre>
<p>Any hint how?</p>
<h2 id="tail-recursion-mark">Tail-Recursion Mark</h2>
<p>Any recursive function in Scala can be marked with <code>@tailrec</code> annotation,
which would result in compilation error if the function is not tail-recursive.
This guarantees that you won&#39;t get a nasty stack overflow exception. </p>
<pre class="highlight"><code class="hljs scala"><span class="hljs-annotation">@tailrec</span> 
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">boom</span>(</span>x: <span class="hljs-type">Int</span>): <span class="hljs-type">Int</span> = {
  <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-number">0</span>
  <span class="hljs-keyword">else</span> boom(x-<span class="hljs-number">1</span>) + <span class="hljs-number">1</span>
}
</code></pre>
<p>The code above won&#39;t compile, as the recursion can&#39;t be optimized by the
compiler.</p>
<p>The feature sounds very reasonable, although I must admit that I have 
never needed it in <em>my</em> F# code yet.</p>
<h2 id="call-by-name">Call By Name</h2>
<p>When you call a function in F#, the parameter values are evaluated before
the function body. This style of function substitution model is known as
Call by Value.</p>
<p>Same is the default in Scala. But there is an alternative: you can defer the
evaluation of parameters by marking them with an <code>=&gt;</code> symbol:</p>
<pre class="highlight"><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callByName</span>(</span>x: =&gt; <span class="hljs-type">Int</span>) = {
  println(<span class="hljs-string">"x is "</span> + x)
}
</code></pre>
<p>This style is known as Call by Name, and the evaluation is defered until the
parameter is actually used. So, if parameter is never used, its value
will never be evaluated. This code:</p>
<pre class="highlight"><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">val</span> <span class="hljs-title">a</span>:</span><span class="hljs-type">Option</span>[<span class="hljs-type">Int</span>] = <span class="hljs-type">Some</span>(<span class="hljs-number">1</span>)
<span class="hljs-function"><span class="hljs-keyword">val</span> <span class="hljs-title">b</span> =</span> a getOrElse (<span class="hljs-number">2</span>/<span class="hljs-number">0</span>)
</code></pre>
<p>will set <code>b</code> to <code>1</code>, and no error will be thrown, even though we are dividing by zero 
in function parameter. This is because the parameter of <code>getOrElse</code> is passed
by name.</p>
<p>The F# alternative <code>defaultArg</code> doesn&#39;t work this way, so the following code
will blow up:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> a = Some(<span class="hljs-number">1</span>)
<span class="hljs-keyword">let</span> b = defaultArg b (<span class="hljs-number">2</span>/<span class="hljs-number">0</span>) <span class="hljs-comment">// boom</span>
</code></pre>
<p>You can get deferred evaluation by passing a function:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> defaultArgFunc o (f: unit -&gt; <span class="hljs-attribute">'a</span>) = 
  <span class="hljs-keyword">match</span> o <span class="hljs-keyword">with</span> | Some v -&gt; v | None -&gt; f()

<span class="hljs-keyword">let</span> b2 = defaultArgFunc a (<span class="hljs-keyword">fun</span> () -&gt; <span class="hljs-number">2</span> / <span class="hljs-number">0</span>)
</code></pre>
<p>That&#39;s essentially what happens in Scala too, but the Scala syntax is 
arguably cleaner.</p>
<h2 id="lack-of-type-inference">Lack of Type Inference</h2>
<p>Slowly moving towards language design flavours, I&#39;ll start with Type Inference.
In Scala, type inference seems to be quite limited. Yes, you don&#39;t have to
explicitly define the types of local values or (most of the time) function return
types, but that&#39;s about it.</p>
<pre class="highlight"><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max</span> (</span>a: <span class="hljs-type">Int</span>, b:<span class="hljs-type">Int</span>) = <span class="hljs-keyword">if</span> (a &gt; b) a <span class="hljs-keyword">else</span> b
</code></pre>
<p>You have to specify the types of all input parameters, and that&#39;s quite a bummer
for people who are used to short type-less code of F# (or Haskell, OCaml and others, 
for that matter).</p>
<p>Type inference in F# plays another significant role: automatic type generalization.
F# compiler would make types as generic as possible, based on implementation.</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> max a b = <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">then</span> a <span class="hljs-keyword">else</span> b
</code></pre>
<p>The type of the function above is <code>&#39;a -&gt; &#39;a -&gt; &#39;a</code>. Most people wouldn&#39;t make
it generic from get-go, but compiler helps in this case.</p>
<h2 id="functional-vs-object-oriented-style">Functional vs Object-Oriented Style</h2>
<p>Both F# and Scala are running on top of managed object-oriented virtual machines,
and at the same time both languages enable developers to write functional code.
Functional programming means operating immutable data structures in pure, free of
side effects operations. Without questioning all this, I find pure functional 
Scala code to be written in much more object-oriented <em>style</em> compared to F#.</p>
<p>Classes and objects are ubiquitous in Scala: they are in each example given 
in Martin Odersky&#39;s courses. Most F# examples refrain from classes unless needed.
F# official guidance is to never expose non-abstract classes from F# API!</p>
<p>Scala is really heavy about inheritance. They even introduced quasi-multiple inheritance:
traits. <code>Stream</code> inherits from <code>List</code>, and <code>Nothing</code> is a subtype of every other type, 
to be used for some covariance tricks.</p>
<p>Operations are usually defined as class methods instead of separate functions. For
example the following Scala code</p>
<pre class="highlight"><code class="hljs scala">word filter (c =&gt; c.isLetter)
</code></pre>
<p>would filter a string to letters only. Why is <code>isLetter</code> defined as a method of 
<code>Char</code>? I don&#39;t think it&#39;s essential for the type itself...</p>
<h2 id="usage-of-operators">Usage of Operators</h2>
<p>It looks like Scala culture inclines more towards the usage of different
operators, not only for arithmetic operations but also for different classes
from standard library and domain-specific code too. The basic ones are nice,
e.g. list concatenation:</p>
<pre class="highlight"><code class="hljs scala"><span class="hljs-type">List</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) ++ <span class="hljs-type">List</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)
</code></pre>
<p>but others look awkward to me, e.g. stream concatenation:</p>
<pre class="highlight"><code class="hljs scala"><span class="hljs-type">Stream</span>(<span class="hljs-number">1</span>) #::: <span class="hljs-type">Stream</span>(<span class="hljs-number">2</span>)
</code></pre>
<p>Akka streams sweetness:</p>
<pre class="highlight"><code class="hljs scala">in ~&gt; f1 ~&gt; bcast ~&gt; f2 ~&gt; merge ~&gt; f3 ~&gt; out
            bcast ~&gt; f4 ~&gt; merge
</code></pre>
<p>This can go to quite an extreme, similar to what <code>scalaz</code> library does.</p>
<p>My default would be not to use operators unless you are sure that every 
reader is able to instantly understand what it means.</p>
<h2 id="partial-application">Partial Application</h2>
<p>Not a huge difference, but F# functions are curried by default, while Scala
functions aren&#39;t. Thus, in F# partial application just works, all the time</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> add a b = a + b
<span class="hljs-keyword">let</span> add3 = add <span class="hljs-number">3</span>
<span class="hljs-keyword">let</span> sum = add3 <span class="hljs-number">5</span> <span class="hljs-comment">// 8</span>
</code></pre>
<p>Scala function </p>
<pre class="highlight"><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span> (</span>a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>) = a + b
</code></pre>
<p>is not curried, but Underscore comes to the rescue</p>
<pre class="highlight"><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">val</span> <span class="hljs-title">add3</span>:</span> (<span class="hljs-type">Int</span>) =&gt; <span class="hljs-type">Int</span> = add(<span class="hljs-number">3</span>, _)
<span class="hljs-function"><span class="hljs-keyword">val</span> <span class="hljs-title">sum</span> =</span> add3(<span class="hljs-number">5</span>) <span class="hljs-comment">// 8</span>
</code></pre>
<p>Note how I miss the type inference again.</p>
<p>The parameter order is very important in F#: the short syntax
will partially apply parameters from left to right. In Scala, you can
put <code>_</code> at any position, which gives you some flexibility.</p>
<h2 id="single-direction-dependency">Single-Direction Dependency</h2>
<p>F# compiler doesn&#39;t allow circular dependencies. You can&#39;t use a function 
before you&#39;ve defined it. Here is what Expert F# book has to say about
that:</p>
<blockquote>
<p>Managing dependencies and circularity is one of the most difficult 
and fundamental problems in good software design. The files in 
an F# project are presented to the F# compiler in a compilation 
order: constructs in the earlier files can&#39;t refer to declarations 
in the later files. This is a mechanism to enforce layered design, 
where software is carefully organized into layers, and where one 
layer doesn&#39;t refer to other layers in a cyclic way (...) to help you 
write code that is reusable and organized 
into components that are, where possible, independent and not 
combined into a &quot;tangle&quot; of &quot;spaghetti code&quot;.</p>
</blockquote>
<p>I think this is huge. F# forces you to structure your code in a way that
avoid mutual dependencies between different functions, types and modules.
This reduces the complexity and coupling, makes the developers avoid some
of the design pitfalls.</p>
<p>There&#39;s nothing like that in Scala. You are on your own.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Of course I did not cover all the distinctions, for instance active patterns, 
type providers, computation expressions in F# and type classes, higher 
kinded types, macros in Scala.</p>
<p>Obviously, both Scala and F# are very capable languages, and I am still
picking up the basics of them. While similar in many aspects, they made
several different choices along the language design trade-offs.</p>
<p>P.S. Overheard on Twitter:</p>
<blockquote>
<p>F# isn&#39;t a bad language, it&#39;s just attached to a bad platform... 
The opposite of Scala actually.</p>
</blockquote>
<p>UPDATE: Thanks everyone for the great comments; please check out
<a href="https://redd.it/4whxhj">this reddit</a> and <a href="https://lobste.rs/s/ewhrpt">lobste.rs</a>
to see more of them.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Mocking API calls in Aurelia</title>
        <link href="http://mikhail.io/2016/07/mocking-api-calls-in-aurelia"/>
        <updated>2016-07-27T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-07-27,/2016/07/mocking-api-calls-in-aurelia</id>
        <content type="html"><![CDATA[<p><a href="http://aurelia.io">Aurelia</a> is a modern and slick single-page application framework. 
&quot;Single-page application&quot; aspect means that it&#39;s loaded
into the browser once, and then the navigation happens on the client side and
all the data are loaded from a REST API endpoint.</p>
<p>Let&#39;s say that our front-end Aurelia app is hosted at
<code>myaureliaapp.com</code> while the REST API is hosted at
<code>myaureliaapp.com/api</code>. The REST API is a server-side application,
which can be implemented in .NET, Java, Node.JS etc., and it talks to
a database of some kinds.</p>
<p>For the front-end development purpose, it&#39;s usually useful to be able to
mock the connection to API with some static manually generated data. This
cuts the hard dependency between the client code, the backend code and database.
It&#39;s much easier to mock the exact data set which is needed for the current
development task.</p>
<p>Fortunately, it can be easily done, and here is how.</p>
<h2 id="identify-your-requests">Identify your requests</h2>
<p>Create a list of the requests that you need to mock. For our example let&#39;s
say you do the following requests from the application:</p>
<pre class="highlight"><code class="hljs groovy">GET <span class="hljs-regexp">/api/</span>products
GET <span class="hljs-regexp">/api/</span>products/{id}
POST <span class="hljs-regexp">/api/</span>products
</code></pre><h2 id="put-your-mock-data-into-files">Put your mock data into files</h2>
<p>Go to the root folder of your Aurelia app and create an <code>/api</code> folder. </p>
<p>Create a <code>/api/products</code> subfolder and put a new file called <code>GET.json</code>. This
file should contain the JSON of the product list, e.g.</p>
<pre class="highlight"><code class="hljs json">[ { "<span class="hljs-attribute">id</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>, "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Keyboard"</span></span>, "<span class="hljs-attribute">price</span>": <span class="hljs-value"><span class="hljs-string">"60$"</span> </span>},
  { "<span class="hljs-attribute">id</span>": <span class="hljs-value"><span class="hljs-number">2</span></span>, "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Mouse"</span></span>, "<span class="hljs-attribute">price</span>": <span class="hljs-value"><span class="hljs-string">"20$"</span> </span>},
  { "<span class="hljs-attribute">id</span>": <span class="hljs-value"><span class="hljs-number">3</span></span>, "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Headphones"</span></span>, "<span class="hljs-attribute">price</span>": <span class="hljs-value"><span class="hljs-string">"80$"</span> </span>}
]
</code></pre>
<p>Create a new file called <code>POST.json</code> in the same folder. POST response won&#39;t 
return any data, so the file can be as simple as</p>
<pre class="highlight"><code class="hljs json">{}
</code></pre>
<p>Create subfolders <code>1</code>, <code>2</code> and <code>3</code> under <code>products</code> and create a <code>GET.json</code> 
file in each of them. Every file contains the data for a specific product, e.g.</p>
<pre class="highlight"><code class="hljs json">{ "<span class="hljs-attribute">id</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>, 
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Keyboard"</span></span>, 
  "<span class="hljs-attribute">price</span>": <span class="hljs-value"><span class="hljs-string">"60$"</span></span>,
  "<span class="hljs-attribute">category</span>": <span class="hljs-value"><span class="hljs-string">"Computer Accessories"</span></span>,
  "<span class="hljs-attribute">brand</span>": <span class="hljs-value"><span class="hljs-string">"Mousytech"</span>
</span>}
</code></pre>
<h2 id="configure-browsersync-to-mock-your-api-calls">Configure BrowserSync to mock your API calls</h2>
<p>For the purpose of this post, I assume you are using 
<a href="https://github.com/aurelia/skeleton-navigation">Aurelia Skeleton Navigation</a>
starter kit, specifically 
<a href="https://github.com/aurelia/skeleton-navigation/tree/master/skeleton-esnext">the version with Gulp-based tasks and BrowserSync</a>.
If so, you should be familiar with <code>gulp serve</code> command, which serves your 
application at <code>http://localhost:9000</code>. We will extend this command to host
your API mock too.</p>
<p>Navigate to <code>/build/tasks</code> folder and edit the <code>serve.js</code> file. Change the 
definition of <code>serve</code> task to the following code:</p>
<pre class="highlight"><code class="hljs javascript">gulp.task(<span class="hljs-string">'serve'</span>, [<span class="hljs-string">'build'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span> </span>{
  browserSync({
    online: <span class="hljs-literal">false</span>,
    open: <span class="hljs-literal">false</span>,
    port: <span class="hljs-number">9000</span>,
    server: {
      baseDir: [<span class="hljs-string">'.'</span>],
      middleware: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res, next)</span> </span>{
        res.setHeader(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>);

        <span class="hljs-comment">// Mock API calls</span>
        <span class="hljs-keyword">if</span> (req.url.indexOf(<span class="hljs-string">'/api/'</span>) &gt; -<span class="hljs-number">1</span>) {
          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'[serve] responding '</span> + req.method + <span class="hljs-string">' '</span> + req.originalUrl);

          <span class="hljs-keyword">var</span> jsonResponseUri = req._parsedUrl.pathname + <span class="hljs-string">'/'</span> + req.method + <span class="hljs-string">'.json'</span>;

          <span class="hljs-comment">// Require file for logging purpose, if not found require will </span>
          <span class="hljs-comment">// throw an exception and middleware will cancel the retrieve action</span>
          <span class="hljs-keyword">var</span> jsonResponse = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../..'</span> + jsonResponseUri);

          <span class="hljs-comment">// Replace the original call with retrieving json file as reply</span>
          req.url = jsonResponseUri;
          req.method = <span class="hljs-string">'GET'</span>;
        }

        next();
      }
    }
  }, done);
});
</code></pre>
<h2 id="run-it">Run it</h2>
<p>Now just run <code>gulp serve</code> (or <code>gulp watch</code>, which does <code>serve</code> and then watches
files for changes). Every time your app makes an API call, you will see
a line in the gulp console:</p>
<pre class="highlight"><code class="hljs gradle">[serve] responding GET <span class="hljs-regexp">/api/</span>products
</code></pre><p>If you happen to make an invalid request with no mock defined, you will
get an error:</p>
<pre class="highlight"><code class="hljs vbnet">[serve] responding <span class="hljs-keyword">GET</span> /api/notproducts
<span class="hljs-keyword">Error</span>: Cannot find <span class="hljs-keyword">module</span> <span class="hljs-comment">'../../api/notproducts/GET.json'</span>
</code></pre><p>A complete example can be found in 
<a href="https://github.com/mikhailshilkov/mikhailio-samples/tree/master/aurelia-api-mocks">my github repository</a>.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Building a Poker Bot: Functional Fold as Decision Tree Pattern</title>
        <link href="http://mikhail.io/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern"/>
        <updated>2016-07-22T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-07-22,/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern</id>
        <content type="html"><![CDATA[<p><em>This is the fifth part of <strong>Building a Poker Bot</strong> series where I describe my experience developing bot software 
to play in online poker rooms. I&#39;m building the bot with .NET framework and F# language which makes the task relatively 
easy and very enjoyable. Here are the previous parts:</em></p>
<ul>
<li><a href="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/"><em>Building a Poker Bot: Card Recognition</em></a></li>
<li><a href="http://mikhail.io/2016/02/building-a-poker-bot-string-recognition/"><em>Building a Poker Bot: String and Number Recognition</em></a></li>
<li><a href="http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements/"><em>Building a Poker Bot: Mouse Movements</em></a></li>
<li><a href="http://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors/"><em>Building a Poker Bot with Akka.NET Actors</em></a></li>
</ul>
<p>In this post I describe a simple pattern to structure the complex decision making
code using partial function application and fold operation applied to a list of functions.</p>
<h2 id="context">Context</h2>
<p>Poker decisions are complex and depend on the multitude of parameters and attributes.
We can visualize the decision making process as a Decision Tree where leaf nodes are
decisions being made, and the branches are different conditions. Here is a simplistic
example of such a poker decision tree:</p>
<p><img src="http://mikhail.io/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern/simple-poker-decision-tree.png" alt="Simplistic Poker Decision Tree"></p>
<p>Now, if we need to implement a similar tree in code, the most straightforward way to
do that is to translate each condition to an <code>if</code> statement. This way, the nested
conditions will guide the application through the branches right to the point where
an appropriate decision can be returned.</p>
<p>This approach works for small cases, but in reality it does not scale particularly 
well in terms of the tree size. Namely, the two problems are:</p>
<p><strong>Tree depth</strong>. In many cases, you might need to pass ten or more conditions before
you find your way to the leaf. Obviously, ten levels of <code>if</code> statements are not
particularly readable and maintainable. We can try to split the sub-trees into
sub-functions, but that only gives a limited relief.</p>
<p><strong>Subtree correlation</strong>. Some tree branches deep down the hiereachy might be correlated
to each other. Say, you pass 10 levels of conditions and make a bet on flop. Now,
on turn, you would probably take quite a different decision path, but the logic
would be based on similar &#39;thinking&#39; in human terms. Ideally, we want to keep this
kind of related decisions together, while isolating them from the other unrelated
decision paths.</p>
<p>In fact, the decision tree should be generalized to the Decision <em>Graph</em> to allow
different decision branches to merge back at some point, e.g.</p>
<blockquote>
<p>If there is one Ace on flop, or an overcard came on turn or river</p>
<p>and stacks pre-flop were 20+ BB, or 12+ BB in limped pot</p>
<p>then bet 75% of the pot</p>
</blockquote>
<p>There are multiple paths to the same decisions.</p>
<h2 id="solution">Solution</h2>
<p><strong>Break the decision graph down</strong> vertically into smaller chunks. Each chunk should
represent multiple layers of conditions and lead to eventual decisions. All
conditions in sub-graph should be related to each other (high cohesion) and as 
isolated from other sub-graphs as possible (low coupling).</p>
<p>Here are two examples of such sub-graphs:</p>
<p><img src="http://mikhail.io/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern/decision-subgraphs.png" alt="Isolated Decision Sub-graphs"></p>
<p>Each sub-graph is very focused on very specific paths and ignores all the branches
which do not belong to this decision process. The idea is that those branches
will be handled by other sub-graphs.</p>
<p><strong>Represent each sub-graph as a function</strong> with arbitrary signature which accepts
all the parameters that are required for this sub-graph. Do not accept any parameters
which are not related. </p>
<p>The last parameter of each function should be a 
<a href="http://mikhail.io/2016/01/monads-explained-in-csharp/#maybe">Maybe</a> of Decision,
so should be the function&#39;s return type.</p>
<p><strong>Produce a flat list</strong> of all the sub-graph functions. Partially apply the parameters
to those functions to unify the signature of all of them.</p>
<p>Now, when making a decision, <strong>left-fold the list of functions</strong> with the data of
current poker hand. If a function returns <code>Some</code> value of decision, return it
as the decision produced from the graph.</p>
<h2 id="code-sample">Code sample</h2>
<p>We define a number of functions, each one of which represents one piece of decision 
logic. Then we put them all into the list:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> rules = [
  overtakeLimpedPot overtakyHand snapshot value history;
  increaseTurnBetEQvsAI snapshot;
  allInTurnAfterCheckRaiseInLimpedPot snapshot history;
  checkCallPairedTurnAfterCallWithSecondPairOnFlop snapshot value.Made history;
  bluffyCheckRaiseFlopInLimpedPotFlop bluffyCheckRaiseFlopsLimp snapshot value history;
  bluffyOvertakingRiver bluffyOvertaking snapshot history
]
</code></pre>
<p>The type of this list is <code>(Decision option -&gt; Decision option) list</code>.</p>
<p>Note how each individual function accepts different set of parameters. Current hand&#39;s
<code>snapshot</code> is used by all of them, while calculated hand <code>value</code> and previous
action <code>history</code> are used only by some of the functions. </p>
<p>Now, here is the definition of the facade decision making function:</p>
<pre class="highlight"><code class="hljs fs">rules |&gt; List.fold (<span class="hljs-keyword">fun</span> opt rule -&gt; rule opt) None
</code></pre>
<p>It calculates the decision by folding the list of rules and passing current decision
between them. <code>None</code> is the initial seed of the fold.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Vertical slices are an efficient way to break down the complex decision making
into smaller cohesive manageable parts. Once you get the parts right, it&#39;s easy
to compose them by folding a flat list of partially applied functions into a
<code>Maybe</code> of decision result.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Dependency Inversion Implies Interfaces Are Owned by High-level Modules</title>
        <link href="http://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules"/>
        <updated>2016-05-27T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-05-27,/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules</id>
        <content type="html"><![CDATA[<p>Dependency Inversion is one of the five principles of widely known and 
acknowledged S.O.L.I.D. design guidelines. This principle is very powerful
and useful when applied consistently. But in my experience, it&#39;s actually
quite easy to misunderstand the idea, or at least to mentally simplify it
to somewhat less profound technique of Dependency Injection.</p>
<p>In this post I will try to give my understanding of the principle, and 
the difference between <em>Inversion</em> and <em>Injection</em>.</p>
<p>Let&#39;s start with the Dependency Inversion principle definition. It was given
by Uncle Bob Martin, and consists of two parts.</p>
<h2 id="part-1-abstractions">Part 1: Abstractions</h2>
<blockquote>
<p>High-level modules should not depend on low-level modules. 
Both should depend on abstractions.</p>
</blockquote>
<p>Ok, this is easy to understand. High-level modules are also high-importance
modules, they are about the business domain and are not specific about
technical details. Low-level modules are about wiring those high-level
functions to execution environment, tools and third parties. </p>
<p>Thus, the implementation of high level policy should not depend on 
implementation of low level code, but rather on interfaces (or other
abstractions).</p>
<p>Let&#39;s take a look at an example. Our high-level business domain is about
planning and executing trips from geographical point A to point B. Our
low-level code talks to a service which knows how to calculate the time 
required for a vehicle to go from A to B:</p>
<p><img src="http://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules/uml-dependency-inversion-violated.png" alt="UML: dependency inversion violated"></p>
<p>So the following code <strong>violates</strong> the first part of the Dependency Inversion:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Mapping</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RouteCalculator</span>
    {
        <span class="hljs-function"><span class="hljs-keyword">public</span> TimeSpan <span class="hljs-title">CalculateDuration</span><span class="hljs-params">(
            <span class="hljs-keyword">double</span> fromLat, <span class="hljs-keyword">double</span> fromLng, <span class="hljs-keyword">double</span> toLat, <span class="hljs-keyword">double</span> toLng)</span>
        </span>{
            <span class="hljs-comment">// Call a 3rd party web service</span>
        }
    }
}

<span class="hljs-keyword">namespace</span> <span class="hljs-title">Planning</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TripPlanner</span>
    {
        <span class="hljs-function"><span class="hljs-keyword">public</span> DateTime <span class="hljs-title">ExpectedArrival</span><span class="hljs-params">(Trip trip)</span>
        </span>{
            <span class="hljs-keyword">var</span> calculator = <span class="hljs-keyword">new</span> RouteCalculator();
            <span class="hljs-keyword">var</span> duration = calculator.CalculateDuration(
                trip.Origin.Latitude, 
                trip.Origin.Longitude, 
                trip.Destination.Latitude, 
                trip.Destination.Longitude);
            <span class="hljs-keyword">return</span> trip.Start.Add(duration);
        }
    }
}
</code></pre>
<p>It&#39;s not compliant to the principle because the high-level code (<code>TripPlanner</code>)
explicitly depends on low-level service (<code>RouteCalculator</code>). Note that I&#39;ve put
them to distinct namespaces to emphasize the required separation.</p>
<p>To improve on that, we might introduce an interface to decouple the 
implementations:</p>
<p><img src="http://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules/uml-dependency-inversion-with-dependency-injection.png" alt="UML: dependency inversion with dependency injection"></p>
<p>In Trip Planner we accept the interface as constructor parameter, and we&#39;ll get the 
specific implementation at run time:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Mapping</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IRouteCalculator</span>
    {
        <span class="hljs-function">TimeSpan <span class="hljs-title">CalculateDuration</span><span class="hljs-params">(
            <span class="hljs-keyword">double</span> fromLat, <span class="hljs-keyword">double</span> fromLng, <span class="hljs-keyword">double</span> toLat, <span class="hljs-keyword">double</span> toLng)</span></span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RouteCalculator</span> : <span class="hljs-title">IRouteCalculator</span>
    {
        <span class="hljs-comment">// Same implementation as before...</span>
    }
}

<span class="hljs-keyword">namespace</span> <span class="hljs-title">Planning</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TripPlanner</span>
    {
        <span class="hljs-keyword">private</span> IRouteCalculator calculator;

        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TripPlanner</span><span class="hljs-params">(IRouteCalculator calculator)</span>
        </span>{
            <span class="hljs-keyword">this</span>.calculator = calculator;
        }

        <span class="hljs-function"><span class="hljs-keyword">public</span> DateTime <span class="hljs-title">ExpectedArrival</span><span class="hljs-params">(Trip trip)</span>
        </span>{
            <span class="hljs-keyword">var</span> duration = <span class="hljs-keyword">this</span>.calculator.CalculateDuration(
                trip.Origin.Latitude, 
                trip.Origin.Longitude, 
                trip.Destination.Latitude, 
                trip.Destination.Longitude);
            <span class="hljs-keyword">return</span> trip.Start.Add(duration);
        }
    }
}
</code></pre>
<p>This technique is called <em>dependency 
injection</em> or, more specifically, <em>constructor injection</em>. This way 
we can easily substitute the implementation later or inject a test 
double while unit testing.</p>
<p>But that&#39;s just one part of the principle. Let&#39;s move on to part 2.</p>
<h2 id="part-2-details">Part 2: Details</h2>
<p>The second part of the principle says</p>
<blockquote>
<p>Abstractions should not depend upon details. 
Details should depend upon abstractions.</p>
</blockquote>
<p>I find this wording unfortunate because it might be confusing. There are 
some valid examples which explain it with base and derived classes. 
But in our example we solved the part 1 with an interface. So now we are told that
the abstraction (interface) should not depend upon details (implementation).</p>
<p>That probably means that the interface should not leak any entities which
are specific to the given implementation, to make other implementation
equally possible.</p>
<p>While this is try, this second part of the principle may seem to be subordinate
to part one, reducing to an idea &quot;design your interfaces well&quot;. So 
many people tend to leave the part 2 out (
<a href="https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design#dependency-inversion-principle">example 1</a>,
<a href="http://www.codeproject.com/Articles/495019/Dependency-Inversion-Principle-and-the-Dependency">example 2</a>), focusing 
solely on part 1 - the Dependency Injection.</p>
<h2 id="interface-ownership">Interface Ownership</h2>
<p>But Dependency Inversion is <strong>not</strong> just Dependency Injection. So, to revive
the part 2 I would add the following statement to make it clearer:</p>
<blockquote>
<p><strong>Abstractions should be owned by higher-level modules and implemented by
lower-level modules.</strong></p>
</blockquote>
<p>This rule is violated in our last example. The interface is defined together
with implementation, and is basically just extracted from it. It&#39;s <strong>owned</strong>
by the mapping namespace. </p>
<p>To improve the design, we can transfer the interface ownership to domain
level:</p>
<p><img src="http://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules/uml-dependency-inversion.png" alt="UML: dependency inversion"></p>
<p>As you can see, I also renamed the interface. The name should reflect the way
how the domain experts would think of this abstraction. Here is the result:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Planning</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IDurationCalculator</span>
    {
        <span class="hljs-function">TimeSpan <span class="hljs-title">CalculateDuration</span><span class="hljs-params">(Hub origin, Hub destination)</span></span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TripPlanner</span>
    {
        <span class="hljs-keyword">private</span> IDurationCalculator calculator;

        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TripPlanner</span><span class="hljs-params">(IDurationCalculator calculator)</span>
        </span>{
            <span class="hljs-keyword">this</span>.calculator = calculator;
        }

        <span class="hljs-function"><span class="hljs-keyword">public</span> DateTime <span class="hljs-title">ExpectedArrival</span><span class="hljs-params">(Trip trip)</span>
        </span>{
            <span class="hljs-keyword">var</span> duration = <span class="hljs-keyword">this</span>.calculator.CalculateDuration(
                trip.Origin, trip.Destination);
            <span class="hljs-keyword">return</span> trip.Start.Add(duration);
        }
    }
}

<span class="hljs-keyword">namespace</span> <span class="hljs-title">Mapping</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RouteCalculator</span> : <span class="hljs-title">IRouteCalculator</span>
    {
        <span class="hljs-function"><span class="hljs-keyword">public</span> TimeSpan <span class="hljs-title">CalculateDuration</span><span class="hljs-params">(Hub origin, Hub destination)</span>
        </span>{
            <span class="hljs-comment">// Extract latitude and longitude from Hubs</span>
            <span class="hljs-comment">// Call a 3rd party web service</span>
        }
    }
}
</code></pre>
<p>Now, the interface is defined in <code>Planning</code> namespace, close to its <em>Client</em>,
not its <em>Implementation</em>. That&#39;s the dependency inversion in action. Even
more importantly, it&#39;s defined in terms of our domain - notice the use of
<code>Hub</code> in the interface instead of low-level <code>double</code>.</p>
<h2 id="why-high-level-code-should-own-interfaces">Why High Level Code Should Own Interfaces</h2>
<p>There are multiple benefits to this approach, here are the most important
advantages:</p>
<h3 id="concise-readable-high-level-code">Concise, readable high-level code</h3>
<p>The high-level domain code has the highest value, so the ultimate goal
is to keep it as clean as possible. The interface ownership enables us to
design the most concise interfaces to achieve this goal. We avoid any kind
of adaptation of domain entities to whatever lower-level details.</p>
<h3 id="better-abstractions">Better abstractions</h3>
<p>The interfaces themselves get better as well. They are closer to business,
so abstractions get more ubiquitous and better understood by everyone.</p>
<p>They tend to live longer, just because they are born from the domain side, 
not the infrastructure side.</p>
<h3 id="dependencies-in-outer-layers">Dependencies in outer layers</h3>
<p>Code organization tends to improve too. If an interface is defined in the 
same module as the implementation, the domain module now has
to reference the infrastructure module just to use the interface.</p>
<p>With domain-level interface, the reference goes in the other direction, so
dependencies are pushed up to the outer layers of application. </p>
<p>This principle is the foundation of domain-centric architectures
<a href="https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean architecture</a>,
<a href="http://alistair.cockburn.us/Hexagonal+architecture">Ports and Adapters</a> and the likes.</p>
<h3 id="less-cross-domain-dependencies">Less cross-domain dependencies</h3>
<p>In large systems, the business domains should be split into smaller sub-domains, or
bounded contexts. Still, sub-domains are not totally isolated and must 
cooperate to achieve the ultimate business goal. </p>
<p>It might be compelling to reference the interfaces of one sub-domain 
from another sub-domain and then say that the dependency is minimal because
they are hidden behind abstractions.</p>
<p>But coupling with abstractions is still coupling. Instead, each domain should
operate its own abstractions at the high level, and then different abstractions
should be wired together on lower level with techniques like adapters, facades,
context mapping etc.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Here is my working definition of Dependency Inversion principle:</p>
<blockquote>
<p>High-level modules should not depend on low-level modules. 
Both should depend on abstractions.</p>
<p>Abstractions should not depend upon details. 
Details should depend upon abstractions.</p>
<p>Abstractions should be owned by higher-level modules and implemented by
lower-level modules.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
        <title>Tweaking immutable objects with C# and Fody</title>
        <link href="http://mikhail.io/2016/05/tweaking-immutable-objects-with-csharp-and-fody"/>
        <updated>2016-05-13T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-05-13,/2016/05/tweaking-immutable-objects-with-csharp-and-fody</id>
        <content type="html"><![CDATA[<p>Immutable data structures provide a lot of benefits
to programmers, especially when representing domain 
<a href="https://lostechies.com/joeocampo/2007/04/23/a-discussion-on-domain-driven-design-value-objects/">value objects</a>. 
Immutability is an essential part of functional programming paradigm.
The concept is useful in object-oriented languages too, but you have
to pay some price to get this advantage.</p>
<p>In C# immutable classes are usually implemented with read-only
properties which are populated from constructor parameters. One of the 
disadvantages of this approach is the verbosity of creating a copy of an object
with one property value modified.</p>
<h2 id="example">Example</h2>
<p>Let&#39;s have a look at an illustration of this problem. Let&#39;s say we have a value
type representing poker player statistics:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerStats</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PlayerStats</span><span class="hljs-params">(
        <span class="hljs-keyword">int</span> hands, 
        <span class="hljs-keyword">int</span> daysOnline,
        Money won, 
        Money expectedValue)</span>
    </span>{
        <span class="hljs-keyword">this</span>.Hands = hands;
        <span class="hljs-keyword">this</span>.DaysOnline = daysOnline;
        <span class="hljs-keyword">this</span>.Won = won;
        <span class="hljs-keyword">this</span>.ExpectedValue = expectedValue;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Hands { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> DaysOnline { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Money Won { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Money ExpectedValue { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>We already see that it&#39;s quite verbose: basically we repeat each property name
five times. But the issue I&#39;m discussing today is related to how we create 
a new object based on another object. Let&#39;s say we need to make a copy of 
a given statistics, but with <code>Hands</code> property increased by 1:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> increasedHands = <span class="hljs-keyword">new</span> PlayerStats(
    existing.Hands + <span class="hljs-number">1</span>,
    existing.DaysOnline,
    existing.Won,
    existing.ExpectedValue);
</code></pre>
<p>Not as simple as we could hope. Also, there is some room for mistakes here. For 
instance, we could swap <code>Won</code> and <code>ExpectedValue</code> property calls
and compiler won&#39;t let us know because the types are the same. So we probably
want to use explicit constructor parameter names:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> increasedHands = <span class="hljs-keyword">new</span> PlayerStats(
    hands: existing.Hands + <span class="hljs-number">1</span>,
    daysOnline: existing.DaysOnline,
    won: existing.Won,
    expectedValue: existing.ExpectedValue);
</code></pre>
<p>But that leads to even more typing and repetition...</p>
<h2 id="inspiration">Inspiration</h2>
<p>F# is a functional-first language with immutability as first-class concept.
In F# value objects are usually modelled with Records, here is our example
reimplemented:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">PlayerStats</span> </span>= {
    Hands: int
    DaysOnline: int
    Won: Money
    ExpectedValue: Money
}
</code></pre>
<p>Creation of new objects based on other objects is also solved properly in F#,
thanks to the <strong><code>with</code></strong> keyword :</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> increasedHands = { existing <span class="hljs-keyword">with</span> Hands = existing.Hands + <span class="hljs-number">1</span> }
</code></pre>
<p>All the properties are copied from the source record except for the ones
explicitly mentioned in the expression.</p>
<h2 id="defining-with-in-c-">Defining With in C#</h2>
<p>There&#39;s no <strong><code>with</code></strong> operator in C#, but we can try to come up with an
alternative. We can define some fluent methods which would change
property values one by one (they don&#39;t change the original object, but
return a copy with changed value):</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithHands</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hands)</span> 
</span>{
    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">PlayerStats</span><span class="hljs-params">(
        hands: hands,
        daysOnline: existing.DaysOnline,
        won: existing.Won,
        expectedValue: existing.ExpectedValue)</span></span>;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithDaysOnline</span><span class="hljs-params">(<span class="hljs-keyword">int</span> daysOnline)</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithWon</span><span class="hljs-params">(Money won)</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithExpectedValue</span> <span class="hljs-params">(Money expectedValue)</span> </span>{ ... }
</code></pre>
<p>The method implementation is very tedious but the usage gets much cleaner:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> increasedHands = existing.WithHands(existing.Hands + <span class="hljs-number">1</span>);
</code></pre>
<p>One way to avoid repetitive code is to generate it.</p>
<h2 id="with-fody-plugin">With.Fody Plugin</h2>
<p>In <a href="http://mikhail.io/2015/12/weaving-your-domain-classes-with-fody/">one of my previous posts</a>
I described how C# value objects can be made less painful with 
<a href="https://github.com/Fody/Fody">Fody</a> - a tool which changes your assembly at
compilation time to provide some desired properties in automated and reliable
fashion.</p>
<p>Please welcome the new Fody plugin <a href="https://github.com/mikhailshilkov/With.Fody"><strong>With.Fody</strong></a> 
which auto-implements <code>With</code> method bodies for C# immutable classes.</p>
<p>Here is how to use this plugin for our imaginary example.</p>
<p>First, add a reference to NuGet pakages <code>Fody</code> and <code>With.Fody</code>.</p>
<p>Then, keep the <code>PlayerStats</code> class definition, but get rid of the bodies
of <code>WithXyz</code> methods. Keep the signature but return something trivial like
<code>null</code> or <code>this</code>:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithHands</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hands)</span> </span>=&gt; <span class="hljs-keyword">this</span>;
<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithDaysOnline</span><span class="hljs-params">(<span class="hljs-keyword">int</span> daysOnline)</span> </span>=&gt; <span class="hljs-keyword">this</span>;
<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithWon</span><span class="hljs-params">(Money won)</span> </span>=&gt; <span class="hljs-keyword">this</span>;
<span class="hljs-function"><span class="hljs-keyword">public</span> PlayerStats <span class="hljs-title">WithExpectedValue</span> <span class="hljs-params">(Money expectedValue)</span> </span>=&gt; <span class="hljs-keyword">this</span>;
</code></pre>
<p>Compile the project and you will see the following line in Build Output:</p>
<pre class="highlight"><code class="hljs oxygene">&gt;      Fody/<span class="hljs-keyword">With</span>:   Added <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">With</span>' <span class="hljs-title">to</span> <span class="hljs-title">type</span> '<span class="hljs-title">PlayerStats</span>'.
</span></code></pre><p>It means that the method bodies were re-implemented with calls to 
class constructor with proper parameter values.</p>
<p>The method stubs are needed to satisfy code completion tools like 
IntelliSense and Resharper, otherwise we could skip them altogether.</p>
<h2 id="single-with-for-multiple-properties">Single With() for Multiple Properties</h2>
<p>In case you avoid <a href="http://mikhail.io/2015/08/units-of-measurement-in-domain-design/">Primitive Obsession</a>
antipattern, you will often end up with classes which have unique types of 
properties, e.g.</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TripProfile</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TripProfile</span><span class="hljs-params">(
        Distance totalDistance,
        Speed averageSpeed,
        Volume fuelConsumed)</span>
    </span>{
        <span class="hljs-keyword">this</span>.TotalDistance = totalDistance;
        <span class="hljs-keyword">this</span>.AverageSpeed = averageSpeed;
        <span class="hljs-keyword">this</span>.FuelConsumed = fuelConsumed;
    }

    <span class="hljs-keyword">public</span> Distance TotalDistance { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Speed AverageSpeed { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Volume FuelConsumed { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>In this case, the plugin can be smart enough to figure out which property
you want to modify just by looking at the type of the argument. The single stub
method can look like this:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> TripProfile With&lt;T&gt;(T <span class="hljs-keyword">value</span>) =&gt; <span class="hljs-keyword">this</span>;
</code></pre>
<p>This would get compiled into 3 strongly typed <code>With</code> methods with <code>Distance</code>,
<code>Speed</code> and <code>Volume</code> arguments respectively. Resharper is still happy. And
if you make a mistake and try to call the generic <code>With</code> method with an
argument of wrong type (say <code>int</code>), the compiler will give you an error.</p>
<p>It is safe to call <code>With</code> methods in the same assembly where the class is defined:
the calls get adapted to the real implementation automatically.</p>
<h2 id="how-to-get-started-with-your-classes">How to Get Started with Your Classes</h2>
<p>Here are the requirements for the classes to be picked up by <strong><code>Fody.With</code></strong>:</p>
<ol>
<li>Have a single constructor.</li>
<li>The constructor should have more than one argument.</li>
<li>For each constructor agrument, there must be a gettable property with
same name (case insensitive).</li>
<li>At least one <code>With</code> stub must be defined as described above.</li>
</ol>
<p>You can check out more examples, look at the source code or raise an issue in
<a href="https://github.com/mikhailshilkov/With.Fody">With.Fody github repository</a>.</p>
<p>Give it a try and let me know what your think!</p>
]]></content>
    </entry>
    
    <entry>
        <title>T-SQL MERGE statement is underrated</title>
        <link href="http://mikhail.io/2016/04/t-sql-merge-statement-is-underrated"/>
        <updated>2016-04-15T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-04-15,/2016/04/t-sql-merge-statement-is-underrated</id>
        <content type="html"><![CDATA[<p>How many times did you write a SQL to <strong>save</strong> a row without knowing whether the same
primary key already exists or not? You just get an object in your data access layer and
you want to save all fields into the database. </p>
<p>But there is no SAVE statement in SQL, so effectively you need to come up with your 
implementation of &quot;INSERT or UPDATE&quot; command.</p>
<h2 id="example">Example</h2>
<p>Let&#39;s take a concrete example. You have a person object with just 3 fields, here is the
type definition:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>
{
    <span class="hljs-keyword">public</span> Guid Id { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Name { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Email { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
<p>Persons are entities, so we chose a GUID for the primary key column. We always generate
the unique identifier at client side and just want to save the <code>Person</code>.</p>
<h2 id="typical-solutions">Typical Solutions</h2>
<p>The typical T-SQL developer&#39;s toolbox contains <code>SELECT</code>, <code>INSERT</code>,
<code>UPDATE</code> and <code>DELETE</code> statements. <code>DELETE</code> is of no use here, but the combination of the other
three can be employed to complete the task. The most straightforward option is</p>
<pre class="highlight"><code class="hljs sql">IF NOT EXISTS(<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> Person <span class="hljs-keyword">WHERE</span> Id = @Id)
  <span class="hljs-keyword">INSERT</span> Person (Id, Name, Email) <span class="hljs-keyword">VALUES</span> (@Id, @Name, @Email)
<span class="hljs-keyword">ELSE</span>
  <span class="hljs-keyword">UPDATE</span> Person <span class="hljs-keyword">SET</span> Name = @Name <span class="hljs-keyword">AND</span> Email = @Email <span class="hljs-keyword">WHERE</span> Id = @Id
</span></code></pre>
<p>It&#39;s 4 lines of code instead of one, but it works. Being more fancy, we can reduce the code to
3 lines of code:</p>
<pre class="highlight"><code class="hljs sql"><span class="hljs-operator"><span class="hljs-keyword">UPDATE</span> Person <span class="hljs-keyword">SET</span> Name = @Name <span class="hljs-keyword">AND</span> Email = @Email <span class="hljs-keyword">WHERE</span> Id = @Id
<span class="hljs-keyword">IF</span> @@ROWCOUNT = <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span>
  <span class="hljs-keyword">INSERT</span> Person (Id, Name, Email) <span class="hljs-keyword">VALUES</span> (@Id, @Name, @Email)
</span></code></pre>
<p>It should also perform faster if you update more often then insert.</p>
<p>Solved? Not completely...</p>
<p>The problem is that sometimes it doesn&#39;t
work. By default, <code>SELECT</code> doesn&#39;t lock the table, so in race condition scenario there
may be another thread which would insert another row with same Id between the execution of
two statements (or delete the existing row for that matter). Ouch.</p>
<p>If you think that&#39;s just a theoretical problem... Well, it might be for our tiny shiny <code>Person</code>
table, but it will happen for the tables of decent sizes with complex update patterns.</p>
<h2 id="transactions">Transactions</h2>
<p>What do we do when the execution of two statements can cause race conditions with
unpredictable results? We use transactions! So, start a transaction before the statement,
then lock the table in <code>SELECT</code> and commit after all is done. It works, but quite some downsides
again:</p>
<ul>
<li>Lots of boilerplate code</li>
<li>Easy to make a mistake (Which lock do we need? <code>updlock</code>? <code>holdlock</code>? <code>tablockx</code>?)</li>
<li>You might get into a deadlock, so need to handle it gracefully</li>
</ul>
<h2 id="merge">MERGE</h2>
<p>Starting with SQL Server 2008, Microsoft introduced the <a href="https://msdn.microsoft.com/ru-ru/library/bb510625.aspx">MERGE</a>
statement. Generally, it&#39;s quite powerful and can be used to save all the different rows of a source
table into a target table. But we can also use it for our simple task of saving a person.</p>
<p><code>MERGE</code> is just one statement, so it&#39;s atomic and consistent. It performs very well. 
But the syntax is... oh my god, it&#39;s horrible. Your eyes might bleed:</p>
<pre class="highlight"><code class="hljs sql"><span class="hljs-operator"><span class="hljs-keyword">MERGE</span> Person <span class="hljs-keyword">AS</span> target
<span class="hljs-keyword">USING</span> (<span class="hljs-keyword">SELECT</span> @Id, @Name, @Email) <span class="hljs-keyword">AS</span> source (Id, Name, Email)
   <span class="hljs-keyword">ON</span> (target.Id = source.Id)
 <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">MATCHED</span> <span class="hljs-keyword">THEN</span> 
      <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">SET</span> Name = source.Name, Email = source.Email
 <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">MATCHED</span> <span class="hljs-keyword">THEN</span>
      <span class="hljs-keyword">INSERT</span> (Id, Name, Email) <span class="hljs-keyword">VALUES</span> (source.Id, source.Name, source.Email)
</span></code></pre>
<p>Yes, we repeat the name of each column 6 times. And we say <code>source</code> 7 times. And you can imagine
how the <code>MERGE</code> of a table with 50 columns would look like. And how painful it is to add a new column
to an existing statement written 2 years ago.</p>
<p>By the way, the deadlocks are still possible with <code>MERGE</code> statement, so you need to handle them
properly.</p>
<p>So the developers, even the ones who know about the <code>MERGE</code>, usually choose to use the good old <code>CRUD</code>
combination. But when isn&#39;t the syntax a problem?</p>
<h2 id="generate-it-">Generate It!</h2>
<p>More and more developers shift from writing the stored procedures to using ORMs. With full-blown
ORMs you don&#39;t need to care about particular SQL statements, but you get a bunch of other problems
related to <a href="https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch">Object-relational impedance mismatch</a>.</p>
<p>One possible approach is to use a mini-ORM, for instance <a href="https://github.com/StackExchange/dapper-dot-net">Dapper</a>. 
You do your work in your favourite 
general-purpose language, but stay &quot;close to the metal&quot;, or rather to SQL engine statements.</p>
<p>Here is how I invoke a <code>MERGE</code> statement for a Person object (given a connection from the pool):</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(...);
DapperAdapter.Merge(connection, person);
</code></pre>
<p>Voila! The implementation of generic <code>Merge</code> method takes care of the syntax complications.
Write once, use everywhere:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> Merge&lt;TEntity&gt;(IDbConnection dbConnection, TEntity entity) <span class="hljs-keyword">where</span> TEntity : <span class="hljs-keyword">class</span>
{
    <span class="hljs-keyword">var</span> props = entity.GetType().GetProperties().Select(p =&gt; p.Name).ToList();
    <span class="hljs-keyword">var</span> names = <span class="hljs-keyword">string</span>.Join(<span class="hljs-string">", "</span>, props);
    <span class="hljs-keyword">var</span> values = <span class="hljs-keyword">string</span>.Join(<span class="hljs-string">", "</span>, props.Select(n =&gt; <span class="hljs-string">"@"</span> + n));
    <span class="hljs-keyword">var</span> updates = <span class="hljs-keyword">string</span>.Join(<span class="hljs-string">", "</span>, props.Select(n =&gt; $<span class="hljs-string">"{n} = @{n}"</span>));
    dbConnection.Execute(
        $<span class="hljs-string">@"MERGE {entity.GetType().Name} as target
          USING (VALUES({values}))
          AS SOURCE ({names})
          ON target.Id = @Id
          WHEN matched THEN
            UPDATE SET {updates}
          WHEN not matched THEN
            INSERT({names}) VALUES({values});"</span>,
        entity);
}
</code></pre>
<p>Of course, it will only work if you use the convention of naming the <code>Person</code> properties
after the database table. In most cases, there will be a domain class <code>Person</code> and a property
bag class <code>PersonRow</code>, so you&#39;ll have to do the mapping between them. But that might be
easier than writing T-SQL code.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Don&#39;t let the bulky syntax scare you away from the <code>MERGE</code> T-SQL statement. Extend your 
toolbox, and use the tools wisely.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Building a Poker Bot with Akka.NET Actors</title>
        <link href="http://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors"/>
        <updated>2016-04-09T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2016-04-09,/2016/04/building-a-poker-bot-with-akka-net-actors</id>
        <content type="html"><![CDATA[<p><em>This is the fourth part of <strong>Building a Poker Bot</strong> series where I describe my experience developing bot software 
to play in online poker rooms. I&#39;m building the bot with .NET framework and F# language which makes the task relatively 
easy and very enjoyable. Here are the previous parts:</em></p>
<ul>
<li><a href="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/"><em>Building a Poker Bot: Card Recognition</em></a></li>
<li><a href="http://mikhail.io/2016/02/building-a-poker-bot-string-recognition/"><em>Building a Poker Bot: String and Number Recognition</em></a></li>
<li><a href="http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements/"><em>Building a Poker Bot: Mouse Movements</em></a></li>
</ul>
<p>This post lays out the most exciting part of the bot. I&#39;ll compose the recognition, flow, decision and mouse clicking
parts together into the bot application. The application is a console executable interacting with multiple 
windows of poker room software.</p>
<h2 id="flow">Flow</h2>
<p>The following picture shows the outline of the application data flow:</p>
<p><img src="http://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors/pokeractors.png" alt="Actor Diagram"></p>
<p><strong>Find Tables</strong> - Every half a second or so we scan all the windows and search for open poker tables among them.
For each poker table we make a screenshot and send those to recognition.</p>
<p><strong>Recognize Screen</strong> - Parse the data from the screenshot. Check whether it&#39;s our turn to make a play now, what
the <a href="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/">hole cards</a> and 
<a href="http://mikhail.io/2016/02/building-a-poker-bot-string-recognition/">stacks</a> are, produce the detailed
screen information and send it to decision maker.</p>
<p><strong>Make Decision</strong> - Understand if that&#39;s a new hand or there was a past history before. See
what the villains did and which new cards we got. Here the secret sauce comes to play and produces 
a move to be made. Send the action to the mouse clicker.</p>
<p><strong>Click Buttons</strong> - Based on the decision made, click the right buttons. It should be done with proper delays
and <a href="http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements/">human-like movements</a> so that the villain
and poker room don&#39;t understand that it&#39;s bot who is playing.</p>
<hr>
<h2 id="let-the-actors-play">Let the Actors Play</h2>
<p>Because of the multi-tabling, the application is intrinsically multi-threaded. At the same time,
the different parts of the flow are executed at different cadence:</p>
<ul>
<li>Finding tables is triggered by time and is single-threaded</li>
<li>Screen recognition, history detection and decision making run in sequence and can be executed in parallel
for multiple tables</li>
<li>Clicking the buttons is again single-threaded, as it must synchronize the outputs from the previous steps,
put them in sequence with appropriate delays</li>
</ul>
<p>Here are the other treats of the flow:</p>
<ul>
<li>It is reactive and event based</li>
<li>The flow is unidirectional, the output of one step goes to the input of the next step</li>
<li>Most steps are stateless, but the history state needs to be preserved and, ideally, isolated from the other
steps</li>
</ul>
<p>This list of features made me pick the Actor-based <a href="http://getakka.net">Akka.NET</a> framework to implement the flow.</p>
<p>For sure, the application could be done with a bunch of procedural code instead. 
But I found actors to be a useful modeling technique to be employed. 
It goes well with reactive nature of the application and builds the nice 
foundation for more complicated scenarios in the future.</p>
<p>Also, I was curious how F# and Akka.NET would work together.</p>
<h2 id="supervision-hierachy">Supervision Hierachy</h2>
<p>In Akka.NET each actor has a supervisor actor who is managing its lifecycle. All actors together form a
supervision tree. Here is the tree shown for the Player application:</p>
<p><img src="http://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors/actorhierachy.png" alt="Actor Hierachy"></p>
<p>There is just one copy of both Table Finder and Button Clicker actors and they are supervised by the root
User actor. </p>
<p>For each poker table a Recognizer actor gets created. These actors are managed by Table 
Finder. </p>
<p>Each Recognizer actor creates an instance of Decision actor who keeps the hand history
and makes decisions. </p>
<p>Finally, all decisions are sent to one centralized Button Clicker actor whose job is 
to click all the tables with proper delays and in order.</p>
<hr>
<h2 id="implementation-patterns">Implementation Patterns</h2>
<p>All actors are implemented with <a href="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/">Functional Actor Patterns</a>
which are described in <a href="http://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/">my previous post</a>.</p>
<p>The basic idea is that each actor is defined in functional style with these
building blocks:</p>
<ul>
<li>Type of incoming and, if needed, outgoing messages</li>
<li>A domain function with business logic</li>
<li>Actor function which puts those parts together</li>
<li>Expression to spawn an actor based on actor function</li>
</ul>
<p>Let&#39;s look at the examples to understand this structure better.</p>
<h2 id="table-finder">Table Finder</h2>
<p>Table Finder does not have any meaningful input message. It gets a message from
Akka.NET scheduling system just to be periodically activated.</p>
<p>The domain function is called <code>findWindows</code> and has the type <code>unit -&gt; WindowInfo seq</code>.
It returns the poker window screenshots and titles.</p>
<p>Actor function of type <code>int -&gt; seq&lt;string * WindowInfo&gt;</code> is used by the 
<a href="http://mikhail.test/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/#RouterSupervisor">Router-Supervisor</a> pattern to 
define the behavior. The ouput tuple defines an ID of an output actor and a
message to send to it:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> findActor msg = 
  findWindows ()
  |&gt; Seq.map (<span class="hljs-keyword">fun</span> x -&gt; (<span class="hljs-string">"recognizer-actor-"</span> + x.TableName, x))
</code></pre>
<p>Here is how I spawn the singleton instance of this actor:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> tableFinderRef = 
  actorOfRouteToChildren findActor (spawnChild recognizer)
  |&gt; spawn system <span class="hljs-string">"table-finder-actor"</span>
</code></pre>
<p>Where <code>spawnChild</code> is a helper function - essentially an adapter of standard
<code>spawn</code> function with proper parameter order:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> spawnChild childActor name (mailbox : Actor&lt;<span class="hljs-attribute">'a</span>&gt;) = 
  spawn mailbox.Context name childActor
</code></pre>
<p>We can also extend it to debug messages when new actors get created.</p>
<h2 id="recognizer">Recognizer</h2>
<p>Recognizer receives the <code>WindowInfo</code> produced by the Table Finder.</p>
<p>The domain function has the type of <code>Bitmap -&gt; Screen</code>. You can read more about table
recognition in <a href="http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/">Part 1</a> and
<a href="http://mikhail.io/2016/02/building-a-poker-bot-string-recognition/">Part 2</a>
of these series.</p>
<p>Actor function is an implementation of 
<a href="http://mikhail.test/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/#ConverterSupervisor">Converter-Supervisor</a> pattern. 
The output is a decision message for Decision Maker actor which is a supervised 
child of the Recognizer. Here is the actor function:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> recognizeActor (window : WindowInfo) =
  <span class="hljs-keyword">let</span> result = recognize window.Bitmap
  { WindowTitle = window.Title 
    TableName = window.TableName 
    Screen = result 
    Bitmap = window.Bitmap }
</code></pre>
<p>And here is the spawn function:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> recognizer = actorOfConvertToChild recognizeActor (spawnChild decider <span class="hljs-string">"decider"</span>)
</code></pre>
<p>Notice how this expression was used in Table Finder instantiation above.</p>
<h2 id="decision-maker">Decision Maker</h2>
<p>Decision Maker actor function is an implementation of 
<a href="http://mikhail.test/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/#StatefulConverter">Stateful Converter</a> pattern. It receives
a decision message from a Recognizer. The output is a click message for a 
singleton Clicker actor. It also needs to preserve some state between two calls.
In the minimalistic implementation this state holds the previous screen that
it received, so that if the same message is received twice, the later message is 
ignored.</p>
<p>This way the actor function has the type of 
<code>DecisionMessage -&gt; Screen option -&gt; ClickerMessage * Screen option</code> 
and looks like this:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> decisionActor msg lastScreen =
  <span class="hljs-keyword">let</span> screen = msg.Screen
  <span class="hljs-keyword">match</span> lastScreen <span class="hljs-keyword">with</span>
  | Some s <span class="hljs-keyword">when</span> s = screen -&gt; (None, lastScreen)
  | _ -&gt;
    <span class="hljs-keyword">let</span> action = decide screen
    <span class="hljs-keyword">let</span> outMsg = { WindowTitle = msg.WindowTitle; Clicks = action }
    (Some outMsg, Some screen)
</code></pre>
<p>Here is the spawn function:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> decider = actorOfStatefulConvert decisionActor None clickerRef
</code></pre>
<p>where <code>None</code> represents the initial state.</p>
<h2 id="button-clicker">Button Clicker</h2>
<p>Clicker actor has the simplest implementation because it does not send messages to other actors.
Here is the message that it receives from Decision Maker:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ClickTarget</span> </span>= (int * int * int * int)
<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ClickerMessage</span> </span>= {
  WindowTitle: string
  Clicks: ClickTarget[]
}
</code></pre>
<p>The domain function has the simple type <code>ClickerMessage -&gt; unit</code> with mouse
clicks as side effect. You can read more about the mouse movements in 
<a href="http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements/">Part 3</a>
of these series.</p>
<p><a href="http://mikhail.test/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/#MessageSink">Message Sink</a>
pattern is used for this actor, so actor function isn&#39;t
really needed. We spawn the singleton instance with the following statement:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-keyword">let</span> clickerRef = actorOfSink click |&gt; spawn system <span class="hljs-string">"clicker-actor"</span>
</code></pre>
<p>Actor goes under supervision by actor system with <code>click</code> as message handler.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The top layer of poker player application is composed of small single-purpose
actors which talk to each other by sending messages. </p>
<p>Thanks to succinct F# language and functional actor patterns this layer is
very thin, and thus easy to understand and maintain. </p>
<p>The business logic is isolated and by itself has no dependency on Akka.NET.</p>
]]></content>
    </entry>
    
</feed>