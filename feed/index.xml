<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Mikhail Shilkov</title>
    <link href="http://mikhail.io/feed/" rel="self"/>
    <link href="http://mikhail.io"/>
    <updated>2015-12-22T15:52:31.613Z</updated>
    <id>http://mikhail.io/</id>
    <author>
        <name>Mikhail Shilkov</name>
        <email></email>
    </author>

    
    <entry>
        <title>Weaving your domain classes with Fody</title>
        <link href="http://mikhail.io/2015/12/weaving-your-domain-classes-with-fody"/>
        <updated>2015-12-22T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-12-22,/2015/12/weaving-your-domain-classes-with-fody</id>
        <content type="html"><![CDATA[<p>When I model the business domain with C#, the resulting data structures tend to contain a lot of boilerplate code. It&#39;s repeated from class to class and it gets more difficult to see the essence of the model behind the repetitive craft. Here is a simplistic example, which illustrates the problem. Let&#39;s say we are modelling Trips, and for each <code>Trip</code> we need to keep track of <code>Origin</code>, <code>Destination</code> and <code>Vehicle</code> which executes the <code>Trip</code>, nothing else. Here is a code to create an sample trip:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> trip = <span class="hljs-keyword">new</span> Trip(
    origin: <span class="hljs-keyword">new</span> Location(<span class="hljs-string">"Paris"</span>, geoParis), 
    destination: <span class="hljs-keyword">new</span> Location(<span class="hljs-string">"Amsterdam"</span>, geoAmsterdam),
    vehicle: <span class="hljs-keyword">new</span> Vehicle(<span class="hljs-string">"TBL-12-H"</span>, Type.HeavyTruck)
</code></pre>
<p>Let&#39;s include these requirements as parts of our trip model:</p>
<ul>
<li>It has a constructor which accepts three arguments (see above)</li>
<li>It has 3 read-only properties which are assigned from constructor parameters</li>
<li>It should not allow null values to be assigned to these properties via constructor</li>
<li>It should be a Value object, that is two objects with same properties should be equal</li>
</ul>
<h2 id="initial-version">Initial version</h2>
<p>First, let&#39;s implement these requirement in a usual way:</p>
<pre class="highlight"><code class="hljs undefined">public class Trip : IEquatable&lt;Trip&gt;
{
    public Trip(Location origin, Location destination, Vehicle vehicle)
    {
        if (origin == null) throw new ArgumentNullException(nameof(origin));
        if (destination == null) throw new ArgumentNullException(nameof(destination));
        if (vehicle == null) throw new ArgumentNullException(nameof(vehicle));

        this.Origin = origin;
        this.Destination = destination;
        this.Vehicle = vehicle;
    }

    public Location Origin { get; }
    public Location Destination { get; }
    public Vehicle Vehicle { get; }

    public bool Equals(Trip other)
    {
        return Equals(this.Origin, other.Origin) 
            &amp;&amp; Equals(this.Destination, other.Destination) 
            &amp;&amp; Equals(this.Vehicle, other.Vehicle);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
        {
            return false;
        }
        if (ReferenceEquals(this, obj))
        {
            return true;
        }
        if (obj.GetType() != this.GetType())
        {
            return false;
        }
        return Equals((Trip)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = this.Origin.GetHashCode();
            hashCode = (hashCode * 397) ^ this.Destination.GetHashCode();
            hashCode = (hashCode * 397) ^ this.Vehicle.GetHashCode();
            return hashCode;
        }
    }

    public static bool operator ==(Trip tripA, Trip tripB)
    {
        return object.Equals(tripA, tripB);
    }

    public static bool operator !=(Trip tripA, Trip tripB)
    {
        return !object.Equals(tripA, tripB);
    }
}
</code></pre>
<p>That&#39;s a lot of code! It&#39;s very repetitive but it&#39;s also tricky: you can implement it incorrectly in some slight way that wouldn&#39;t be easy to catch until it silently fails one day. So imagine how many tests you need to validate it.</p>
<p>I implemented this code with help of Resharper, which makes it so much easier, but the code is still a heavy luggage to carry on. This class is hard to read and hard to change - every time you add a property you should not forget to update all the corresponding methods. </p>
<p>Are there other options?</p>
<h2 id="introducing-fody">Introducing Fody</h2>
<p><a href="https://github.com/Fody/Fody">Fody</a> is an extensible tool for weaving .NET assemblies. It means that you can use it to improve your code automatically at the time of compilation. Fody itself doesn&#39;t do much to the code, but it has a collection of plugins to actually change it. For this example I will use two of them: </p>
<ul>
<li><a href="https://github.com/Fody/NullGuard"><strong>NullGuard</strong></a> - guards all the input parameters, output parameters and return values of all types in a current assembly not to be null. If null value is passed or returned, the weaved code with throw an exception.</li>
<li><a href="https://github.com/Fody/Equals"><strong>Equals</strong></a> - you can mark a class with <code>[Equals]</code> attribute and Fody will implement <code>Equals()</code> and <code>GetHashCode()</code> methods and <code>==</code> operator for you by comparing all public properties of the annotated class.</li>
</ul>
<p>To install them just execute </p>
<pre class="highlight"><code class="hljs ps">PM&gt; Install-Package NullGuard.Fody
PM&gt; Install-Package Equals.Fody
</code></pre>
<p>The root of your project will now contain the following configuration file:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">Weavers</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">NullGuard</span> <span class="hljs-attribute">IncludeDebugAssert</span>=<span class="hljs-value">"false"</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">Equals</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">Weavers</span>&gt;</span>
</code></pre>
<p>(I&#39;ve added <code>IncludeDebugAssert</code> attribute manually to disable assert statements in debug mode)</p>
<p>Let&#39;s adjust our class to make use of the plugins:</p>
<pre class="highlight"><code class="hljs cs">[Equals]
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Trip</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Trip</span><span class="hljs-params">(Location origin, Location destination, Vehicle vehicle)</span>
    </span>{
        <span class="hljs-keyword">this</span>.Origin = origin;
        <span class="hljs-keyword">this</span>.Destination = destination;
        <span class="hljs-keyword">this</span>.Vehicle = vehicle;
    }

    <span class="hljs-keyword">public</span> Location Origin { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Location Destination { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">public</span> Vehicle Vehicle { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>And that&#39;s it! We still get the same functionality but the code is just trivial. Let&#39;s see how it works:</p>
<ul>
<li><code>Equals</code> attribute means that we want Fody plugin to implement all the equality-related boilerplate code for this class, including operators and <code>IEquatable&lt;T&gt;</code> implementation. So this plugin is in <em>opt-in</em> mode.</li>
<li>I used no attributes from <code>NullGuard</code> plugin. This plugin works in <em>opt-out</em> mode, i.e. it changes all the classes by default, and if you don&#39;t want it for some piece of code - you can always opt out. This default makes a lot of sense to me: I don&#39;t want any nulls in my code unless I really need them due to some external contracts.</li>
</ul>
<p>Let&#39;s open the resulting assembly in <a href="http://ilspy.net/">ILSpy</a> to see what it compiles to. Here is the constructor:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Trip</span><span class="hljs-params">(Location origin, Location destination, Vehicle vehicle)</span>
</span>{
    <span class="hljs-keyword">bool</span> flag = origin == <span class="hljs-keyword">null</span>;
    <span class="hljs-keyword">if</span> (flag)
    {
        <span class="hljs-function"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title">ArgumentNullException</span><span class="hljs-params">(<span class="hljs-string">"origin"</span>)</span></span>;
    }
    <span class="hljs-keyword">bool</span> flag2 = destination == <span class="hljs-keyword">null</span>;
    <span class="hljs-keyword">if</span> (flag2)
    {
        <span class="hljs-function"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title">ArgumentNullException</span><span class="hljs-params">(<span class="hljs-string">"destination"</span>)</span></span>;
    }
    <span class="hljs-keyword">bool</span> flag3 = vehicle == <span class="hljs-keyword">null</span>;
    <span class="hljs-keyword">if</span> (flag3)
    {
        <span class="hljs-function"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title">ArgumentNullException</span><span class="hljs-params">(<span class="hljs-string">"vehicle"</span>)</span></span>;
    }
    <span class="hljs-keyword">this</span>.&lt;Origin&gt;k__BackingField = origin;
    <span class="hljs-keyword">this</span>.&lt;Destination&gt;k__BackingField = destination;
    <span class="hljs-keyword">this</span>.&lt;Vehicle&gt;k__BackingField = vehicle;
}
</code></pre>
<p>It&#39;s bit more verbose but essentially equivalent to what I did manually before. By default null guard will be very strict, so you will see that even auto-property&#39;s return values are checked:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> Location Origin
{
    [CompilerGenerated]
    <span class="hljs-keyword">get</span>
    {
        Location expr_06 = <span class="hljs-keyword">this</span>.&lt;Origin&gt;k__BackingField;
        <span class="hljs-keyword">if</span> (expr_06 == <span class="hljs-keyword">null</span>)
        {
            <span class="hljs-function"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title">InvalidOperationException</span><span class="hljs-params">(<span class="hljs-string">"[NullGuard] Return value of property 'ETA.Domain.Location ETA.Domain.Trip::Origin()' is null."</span>)</span></span>;
        }
        <span class="hljs-keyword">return</span> expr_06;
    }
}
</code></pre>
<p>It doesn&#39;t make much sense to me, so I configured Fody on assembly level to check only arguments and return values:</p>
<pre class="highlight"><code class="hljs cs">[assembly: NullGuard(ValidationFlags.Arguments | ValidationFlags.ReturnValues)]
</code></pre>
<p>Here is a set of operations related to equality (I&#39;ll skip the body in sake of brevity):</p>
<pre class="highlight"><code class="hljs undefined">public class Trip : IEquatable&lt;Trip&gt;
{
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    private static bool EqualsInternal(Trip left, Trip right) { ... }
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    public override bool Equals(Trip other) { ... }
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    public override bool Equals(object obj) { ... }
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    public override int GetHashCode() { ... }
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    public static bool operator ==(Trip left, Trip right) { ... }
    [GeneratedCode("Equals.Fody", "1.4.6.0"), DebuggerNonUserCode]
    public static bool operator !=(Trip left, Trip right) { ... }
}
</code></pre>
<p>There is a catch (at least at the time of writing): the auto-generated <code>==</code> and <code>!=</code> operators won&#39;t work properly if you use them inside the same assembly where the type is defined. That&#39;s because the C# compiler will only use these operators properly if they are defined at compile time, and they only get defined after the compilation (weaving takes place after IL is produced). See <a href="https://github.com/Fody/Equals/issues/10">the issue on GitHub</a> for details.</p>
<h2 id="bonus-a-proper-solution">Bonus - a proper solution</h2>
<p>Here is how you actually should define similar types:</p>
<pre class="highlight"><code class="hljs fs"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">Trip</span> </span>= 
  { Origin : Location
    Destination : Location
    Vehicle : Vehicle }
</code></pre>
<p>No nulls are possible here and equality works out of the box. There&#39;s just one major detail: it&#39;s F#...</p>
]]></content>
    </entry>
    
    <entry>
        <title>Deploy your SPA to Azure</title>
        <link href="http://mikhail.io/2015/12/deploy-your-spa-to-azure"/>
        <updated>2015-12-14T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-12-14,/2015/12/deploy-your-spa-to-azure</id>
        <content type="html"><![CDATA[<p>In this post I want to share a simple tutorial on how to deploy your single page application into the Azure cloud.</p>
<h2 id="the-goal">The goal</h2>
<p>Here is the initial setup:</p>
<ul>
<li><p>I have a Single Page Application (SPA) done with HTML/JavaScript in a separate local Git repository</p>
</li>
<li><p>I have a ASP.NET 4.6 Web API service which serves the data for SPA in another local Git repository</p>
</li>
<li><p>Now I want to deploy both to the Azure cloud, and make it easy to deploy changes in the future</p>
</li>
</ul>
<h2 id="the-solution">The solution</h2>
<p>We will deploy our application to Azure Cloud Services / Web application.</p>
<ol>
<li><p>Go to <a href="https://portal.azure.com">Azure Portal</a> then <code>App Services -&gt; Add</code> and follow the wizard to create your Web app. Here is mine:
<img src="http://mikhail.io/2015/12/deploy-your-spa-to-azure/azurewebapp.jpg" alt="Azure web app"></p>
</li>
<li><p>Follow <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/">this guide</a> to create a new Git repository and setup continuous deployment from this repository to Azure web application. You are good once you see this working (step 6):
<img src="http://mikhail.io/2015/12/deploy-your-spa-to-azure/git-hello-git.png" alt="Hello git running in Azure"></p>
</li>
<li><p>Copy your SPA files into the root of the new Git repository, here is my repo after I did that:
<img src="http://mikhail.io/2015/12/deploy-your-spa-to-azure/spa-copied-to-repo.jpg" alt="SPA files in the repo">
and push them to <code>azure</code> remote. Now you should be able to browse to the web app and see your SPA screen, but with all calls to Web API failing.</p>
</li>
<li><p>Inside your new Git repository, create a sub-folder to host Web API services. My SPA expects them under <code>/api</code> folder, so that&#39;s the folder name that I created:
<img src="http://mikhail.io/2015/12/deploy-your-spa-to-azure/webapi-copied-to-repo.jpg" alt="Web API files in the repo"></p>
</li>
<li><p>Copy your binary compiled files of your Web API to <code>/api</code> sub-folder. This includes the bin folder, config files, asax files etc - whatever you would need in your local IIS deployment. DO NOT copy the sln/csproj files, otherwise the Azure will also try to do the compilation himself and will change the root of your web application to the folder with csproj files. So, my <code>/api</code> folder looks like this:
<img src="http://mikhail.io/2015/12/deploy-your-spa-to-azure/api-folder.jpg" alt="Web API folder contents"></p>
</li>
<li><p>Commit the changes and Git push to <code>azure</code> remote. Once the files are deployed, your SPA app should be up and running. Well done!</p>
</li>
<li><p>You don&#39;t want to copy the files manually all the time, so make a PowerShell script or gulp task to do that for you. Remember, your changes will be applied whenever you push a new version to <code>azure</code> remote of your Git repo.</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
        <title>Review of the course &quot;Modern, Modular JavaScript with SystemJS and jspm&quot;</title>
        <link href="http://mikhail.io/2015/11/review-of-jspm-course"/>
        <updated>2015-11-24T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-11-24,/2015/11/review-of-jspm-course</id>
        <content type="html"><![CDATA[<p>Recently I was playing with <a href="http://aurelia.io">Aurelia</a> SPA framework, which makes heavy use of jspm and SystemJS for modules/packaging. This package manager is new to me, and it looked a bit like magic sometimes. So when I saw a jspm course on Pluralsight, I decided to give it a try. And I did not regret: the course is great. It&#39;s so good, that I decided to write a review for it, even though I have never done that before. </p>
<p>So, the full course name is &quot;<a href="https://www.pluralsight.com/courses/javascript-systemjs-jspm">Modern, Modular JavaScript with SystemJS and jspm</a>&quot; by Wes Higbee. The topic sounds pretty narrow (compare to something like &quot;Building a Web App with ASP.NET 5, MVC 6, EF7 and AngularJS&quot;), but the video track is surprisingly long: 7.5 hours. And every hour is packed with well structured in-depth material which lays the topic out from A to Z.</p>
<p>The majority of online courses are focusing on just explaining the <em>What</em>&#39;s of a technology: where you get it, how you start quickly, how you solve typical tasks. Wes does not stop there: he is really focusing on <em>Why</em>&#39;s: not only why we should use ES2015 modules and jspm, but the complete logical flow from the best practices in other programming environments to the module patterns to the tools that enable us use the modern approaches in javascript today. The understanding of this reasoning chain sets the solid ground, and you actually start getting the What&#39;s deeper. </p>
<p>But Wes goes even further: he mixes the <em>How</em>&#39;s in. I love watching him breaking the stuff to show why it fails and how to fix it. The references to module dependency graphs and internals of the tools are insightful; that&#39;s how &quot;the magic&quot; transforms into the comprehension of modern open source tools and libraries. </p>
<p>Of course, just watching the course won&#39;t make me an expert in the topic. Now I need to put the knowledge into practice, ask more questions and find answers myself. But I will hopefully save hours of debugging and frustration and will maybe produce better products in the end. Wes and Pluralsight, I definitely need more of courses like this - focused, deep and engaging! </p>
<p>P.S. It was a bit awkward to watch the course in the office because of solitaire cards being shown on my screen. Not sure what my colleagues thought I was doing ;)</p>
]]></content>
    </entry>
    
    <entry>
        <title>Units of measurement in domain design</title>
        <link href="http://mikhail.io/2015/08/units-of-measurement-in-domain-design"/>
        <updated>2015-08-11T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-08-11,/2015/08/units-of-measurement-in-domain-design</id>
        <content type="html"><![CDATA[<p>If you have business application of any decent size, your most important code probably resides in domain logic.
When working with 3rd party code, you can always find an answer on stack overflow or official documentation, but your domain is all yours. Try to make it as simple and readable as possible, and it will always pay you back.</p>
<p>Today I want to discuss one aspect of writing clean domain code: units of measurement. It is important for any domain (or sub-domain) where you operate some physical measurements.</p>
<h2 id="problem-statement">Problem statement</h2>
<p>Our toy example will be about cars and fuel consumption. You receive some data about the trip of your car, e.g. an instance of</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ITrip</span>
{
    <span class="hljs-keyword">double</span> FuelUsed { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">double</span> Distance { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>Now you want to calculate the fuel consumption rate of your trip. You write</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> fuelRate = trip.FuelUsed / trip.Distance;
</code></pre>
<p>You get the value, but what is it? Let&#39;s say you want a value of liters per 100 kilometers. You can assume that <code>FuelUsed</code> is in liters, and <code>Distance</code> is in kilometers. To be more explicit you refactor your code</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ITrip</span>
{
    <span class="hljs-keyword">double</span> FuelUsedInLiters { <span class="hljs-keyword">get</span>; }
    <span class="hljs-keyword">double</span> DistanceInKilometers { <span class="hljs-keyword">get</span>; }
}

<span class="hljs-keyword">var</span> fuelRateLitersPer100Kilometers = trip.FuelUsedInLiters * <span class="hljs-number">100.0</span> / trip.DistanceInKilometers;
</code></pre>
<p>Now it&#39;s much more explicit, and probably good enough for such a small code example. For larger code bases, you will inevitably get into more problems:</p>
<ol>
<li><p>You will start measuring same things in different units. E.g. you will store the distance in meters in the database, so you&#39;ll have to multiply by 1000 somewhere in persistence layer.</p>
</li>
<li><p>If you need to convert metric to imperial and back, you will get lots of constants here and there.</p>
</li>
<li><p>String formatting will become a tedious task. Be sure to call a right formatter for each implicit unit.</p>
</li>
</ol>
<p>This does not work well. The code smell is called <a href="http://blog.ploeh.dk/2011/05/25/DesignSmellPrimitiveObsession/">Primitive Obsession</a> and we should avoid this in production-grade code. Instead, we want the succinctness of first example in combination with strong compile-time checks and well-defined operations.</p>
<h2 id="defining-the-units">Defining the units</h2>
<p>I tried several options like generic classes for units, but I ended up having a struct per measurement. The code is very boring and repetitive, but it provides me with the strongest compile-time checks and nice readability. If you are too bored with typing, you can do some code generation or just use 3rd party that suits you.
So, my end result looks like</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ITrip</span>
{
    Volume FuelUsed { <span class="hljs-keyword">get</span>; }
    Distance Distance { <span class="hljs-keyword">get</span>; }
}
</code></pre>
<p>Let&#39;s see how Distance is defined (Volume will be almost exactly same):</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> Distance
{
    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Distance</span><span class="hljs-params">(<span class="hljs-keyword">double</span> kilometers)</span>
    </span>{
        <span class="hljs-keyword">this</span>.Kilometers = kilometers;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Kilometers { <span class="hljs-keyword">get</span>; }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Meters =&gt; <span class="hljs-keyword">this</span>.Kilometers / <span class="hljs-number">1000.0</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Distance Zero = <span class="hljs-keyword">new</span> Distance(<span class="hljs-number">0.0</span>);

    ...
}
</code></pre>
<p>Several important things to notice here:</p>
<ol>
<li><p>It&#39;s a struct.</p>
</li>
<li><p>It&#39;s immutable. Once an instance is created, its properties can&#39;t be changed anymore.</p>
</li>
<li><p>Constructor is private. I don&#39;t actually want people to create instances directly: <code>new Distance(123)</code> reads pretty horribly, keep reading to see better options.
Of course, default constructor is still public, but you can only create a zero value with it.</p>
</li>
<li><p>Better way of creating zero distance is to call Zero static field.</p>
</li>
</ol>
<h2 id="instantiation">Instantiation</h2>
<p>So, how do we create measurement objects?</p>
<h3 id="factory-method">Factory method</h3>
<p>The classic way is a set of static factory methods:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Distance <span class="hljs-title">FromKilometers</span><span class="hljs-params">(<span class="hljs-keyword">double</span> kilometers)</span>
</span>{
    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">Distance</span><span class="hljs-params">(kilometers)</span></span>;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Distance <span class="hljs-title">FromMeters</span><span class="hljs-params">(<span class="hljs-keyword">double</span> meters)</span>
</span>{
    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">Distance</span><span class="hljs-params">(kilometers / <span class="hljs-number">1000.0</span>)</span></span>;
}
</code></pre>
<p>Usage is as simple as <code>var distance = Distance.FromMeters(234);</code></p>
<h3 id="extension-method">Extension method</h3>
<p>Imagine you have the following code which converts an integer value of a database result into our units</p>
<pre class="highlight"><code class="hljs cs">trip.Distance = Distance.FromMeters(database.ReadInt32(<span class="hljs-string">"TotalDistance"</span>)
                        .GetDefaultOrEmpty());
</code></pre>
<p>Such a long expression reads better with a fluent interface like</p>
<pre class="highlight"><code class="hljs cs">trip.Distance = database.ReadInt32(<span class="hljs-string">"TotalDistance"</span>)
                        .GetDefaultOrEmpty()
                        .MetersToDistance();
</code></pre>
<p><code>MetersToDistance</code> in this case is an extension method:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DistanceExtensions</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Distance <span class="hljs-title">MetersToDistance</span><span class="hljs-params">(<span class="hljs-keyword">this</span> <span class="hljs-keyword">double</span> meters)</span>
    </span>{
        <span class="hljs-keyword">return</span> Distance.FromMeters(meters);
    }
}
</code></pre>
<h3 id="operator-with-static-class-using">Operator with static class using</h3>
<p>C# 6 brings us a new language construct. Now we can import a static helper class</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">using</span> <span class="hljs-keyword">static</span> Units.Constants;
</code></pre>
<p>And then we can write something like</p>
<pre class="highlight"><code class="hljs swift"><span class="hljs-keyword">var</span> <span class="hljs-built_in">distance</span> = <span class="hljs-number">10.0</span> * km;
</code></pre><p>where liter is defined in that static class:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Constants</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Distance km = Distance.FromKilometers(<span class="hljs-number">1.0</span>);
}
</code></pre>
<p>This may not look like idiomatic C#, but I think it&#39;s very good at least for writing unit tests:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> target = <span class="hljs-keyword">new</span> Trip
{
    DistanceOnFoot = <span class="hljs-number">5</span> * km,
    DistanceOnBicycle = <span class="hljs-number">10</span> * km,
    DistanceOnCar = <span class="hljs-number">30</span> * km
};
target.TotalDistance.Should().Be((<span class="hljs-number">30</span> + <span class="hljs-number">10</span> + <span class="hljs-number">5</span>) * km);
</code></pre>
<p>For this to compile you just need to define the operator overload:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Distance <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>, Distance distance)
{
    <span class="hljs-keyword">return</span> Distance.FromKilometers(<span class="hljs-keyword">value</span> * distance.Kilometers);
}
</code></pre>
<h2 id="conversion-and-printing">Conversion and printing</h2>
<p>More advanced unit conversions are easy with unit classes. A common use case would be to convert metric units to imperial system. All you need to do is to add another calculated property</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-comment">// Distance class</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> MilesInKilometer = <span class="hljs-number">0.621371192</span>;
<span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> FeetInMeter = = <span class="hljs-number">3.2808399</span>;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Miles =&gt; <span class="hljs-keyword">this</span>.Kilometers * MilesInKilometer;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> Feet =&gt; <span class="hljs-keyword">this</span>.Meters * FeetInMeter;
</code></pre>
<p>Another common task is printing (formatting) unit values into string. While you can (and should) implement some basic version of it in <code>ToString()</code> method, I advise against doing all the formatting inside the unit class. The formatting scenarios can be quite complex:</p>
<ul>
<li>Format based on user preferences (metric/imperial)</li>
<li>Pick units based on the value (e.g. 30 m but 1.2 km, not 1200 m)</li>
<li>Localization to different languages</li>
<li>Rounding to some closest value</li>
</ul>
<p>If you do all that in the unit class, it&#39;s going to violate the single responsibility principle. Just create a separate class for formatting and put all those rules there.</p>
<h2 id="unit-derivation">Unit derivation</h2>
<p>Once you write more unit classes, you will definitely want to derive the calculation result of two units into the third one. In our example, we want to divide <code>Volume</code> of fuel used by <code>Distance</code> to get fuel <code>ConsumptionRate</code>.</p>
<p>There&#39;s no magic that you could do here. You will have to define <code>ConsumptionRate</code> class the same way you defined the other two, and then just overload the operation</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConsumptionRate <span class="hljs-keyword">operator</span>/(Volume volume, Distance distance)
{
    <span class="hljs-keyword">return</span> ConsumptionRate
        .FromLitersPer100Kilometers(volume.Liters * <span class="hljs-number">100.0</span> / distance.Kilometers);
}
</code></pre>
<p>Of course, you&#39;ll have to define all the required combinations explicitly.</p>
<p>If you defined Constants as described above, you&#39;ll be able to instantiate values in your tests in the following way:</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">var</span> fuelRate = <span class="hljs-number">7.5</span> * lit / (<span class="hljs-number">100</span> * km);
</code></pre>
<h2 id="should-i-use-3rd-party-libraries-for-that-">Should I use 3rd party libraries for that?</h2>
<p>It depends. Of course, people implemented all this functionality about 1 million times before you, so there are numerous libraries on GitHub.</p>
<p>I would say, if you start a new project and you don&#39;t have a strong opinion about the unit code, just go grab the library and try to use it.</p>
<p>At the same time, for existing code base, it might be easier to introduce your own implementation which would resemble something that you already use.</p>
<p>Also, I have another reason for my own implementation. I&#39;m using units all over the code base of domain logic, the very heart of the software, the exact place where I want full control. I find it a bit awkward to introduce a 3rd party dependency in domain layer.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Aurelia element animation with custom attribute</title>
        <link href="http://mikhail.io/2015/07/aurelia-element-animation-with-custom-attribute"/>
        <updated>2015-07-28T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-07-28,/2015/07/aurelia-element-animation-with-custom-attribute</id>
        <content type="html"><![CDATA[<p>I&#39;ve been exploring <a href="http://aurelia.io">Aurelia</a> javascript UI framework recently to get some experience needed
for our next big project. One thing that I couldn&#39;t implement out of the box was a kind 
of animation.</p>
<p>I have a grid of values bound to View Model. View Model communicates to server, receives
any updates of data and the grid got immediately updated, all that works great with Aurelia.
Now I want to highlight the cell which has just received an updated value with a small
background animation, like this:</p>
<p><img src="http://mikhail.io/2015/07/aurelia-element-animation-with-custom-attribute/animation.gif" alt="Updated cell animation"></p>
<p>Aurelia has a library called <a href="https://github.com/aurelia/animator-css">aurelia-animator-css</a> with a helper
class to run CSS animation. If you use it directly in your View Model, you will end up with the code like</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">this</span>.newMessageReceived =
    msg =&gt; {
        <span class="hljs-keyword">this</span>.data.filter(i =&gt; i.id === msg.id).forEach(t =&gt; {
            <span class="hljs-keyword">let</span> editedItemIdx = <span class="hljs-keyword">this</span>.data.indexOf(i);
            <span class="hljs-keyword">var</span> elem = <span class="hljs-keyword">this</span>.element.querySelectorAll(<span class="hljs-string">'tbody tr'</span>)[editedItemIdx + <span class="hljs-number">1</span>]
                                   .querySelectorAll(<span class="hljs-string">'td'</span>)[<span class="hljs-number">3</span>];

            <span class="hljs-keyword">this</span>.animator.addClass(elem, <span class="hljs-string">'background-animation'</span>).then(() =&gt; {
                <span class="hljs-keyword">this</span>.animator.removeClass(elem, <span class="hljs-string">'background-animation'</span>);
            });
        });
    };
</code></pre>
<p>So we get a new message, find the related item in our data, then find the index of that data. Then we use this
index in query selector to get the exact row that needs animation, find the cell by hard coded index, and 
finally use animator to highlight the background.</p>
<p>Ouch... That smells. We spoiled our view model with view details, and all this code is very ugly and fragile.</p>
<p>Good news: we can improve the solution with the Aurelia&#39;s feature called Custom Attributes. Let&#39;s create a new
javascript file and call it <code>animateonchange.js</code>:</p>
<pre class="highlight"><code class="hljs javascript">import {customAttribute} from <span class="hljs-string">'aurelia-framework'</span>;

@customAttribute(<span class="hljs-string">'animateonchange'</span>)
export <span class="hljs-keyword">class</span> AnimateOnChangeCustomAttribute {

}
</code></pre>
<p>I declared a class for our new attribute, so far it&#39;s empty. I imported customAttribute decorator from
Aurelia framework: that the way we can define a name for our custom attribute. This can be avoided: if I
change the name to <code>AnimateonchangeCustomAttribute</code>, Aurelia will infer the name from class name, but I want
to stay explicit and keep the class name readable. Note that capital letters are not allowed in attribute name.</p>
<p>Now, let&#39;s declare the constructor of the new class and inject all the dependencies:</p>
<pre class="highlight"><code class="hljs javascript">import {inject, customAttribute} from <span class="hljs-string">'aurelia-framework'</span>;
import {CssAnimator} from <span class="hljs-string">'aurelia-animator-css'</span>;

@customAttribute(<span class="hljs-string">'animateonchange'</span>)
@inject(Element, CssAnimator)
export <span class="hljs-keyword">class</span> AnimateOnChangeCustomAttribute {

    constructor(element, animator) {
        <span class="hljs-keyword">this</span>.element = element;
        <span class="hljs-keyword">this</span>.animator = animator;
    }

}
</code></pre>
<p>I used dependency injection to get attribute&#39;s element and CSS animator and save them into class fields.
Here&#39;s how to use them:</p>
<pre class="highlight"><code class="hljs javascript">import {inject, customAttribute} from <span class="hljs-string">'aurelia-framework'</span>;
import {CssAnimator} from <span class="hljs-string">'aurelia-animator-css'</span>;

@customAttribute(<span class="hljs-string">'animateonchange'</span>)
@inject(Element, CssAnimator)
export <span class="hljs-keyword">class</span> AnimateOnChangeCustomAttribute {
    constructor(element, animator) {
        <span class="hljs-keyword">this</span>.element = element;
        <span class="hljs-keyword">this</span>.animator = animator;
        <span class="hljs-keyword">this</span>.initialValueSet = <span class="hljs-literal">false</span>;
    }

    valueChanged(newValue){
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.initialValueSet) {
            <span class="hljs-keyword">this</span>.animator.addClass(<span class="hljs-keyword">this</span>.element, <span class="hljs-string">'background-animation'</span>).then(() =&gt; {
                <span class="hljs-keyword">this</span>.animator.removeClass(<span class="hljs-keyword">this</span>.element, <span class="hljs-string">'background-animation'</span>);
            });
        }
        <span class="hljs-keyword">this</span>.initialValueSet = <span class="hljs-literal">true</span>;
    }
}
</code></pre>
<p>The new method <code>valueChanged</code> will be called every time the bound value changes. I want to ignore the
first value (it&#39;s not an update yet), so I did that with <code>initialValueSet</code> flag. Then I just run CSS 
animator. No DOM-related queries!</p>
<p>Here is how we use the custom attribute from a view:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">template</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">require</span> <span class="hljs-attribute">from</span>=<span class="hljs-value">"./animateonchange"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">require</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">table</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"table"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span> <span class="hljs-attribute">repeat.for</span>=<span class="hljs-value">"item of data"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>${item.value1}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>${item.value2}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">td</span> <span class="hljs-attribute">animateonchange.bind</span>=<span class="hljs-value">"item.value3ToUpdate"</span>&gt;</span>${item.value3ToUpdate}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>${item.value4}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">table</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-title">template</span>&gt;</span>
</code></pre>
<p>First, we use <code>require</code> element to import custom attribute definition (make sure the path is correct
and no <code>.js</code> extension is present).</p>
<p>Second, we use <code>animateonchange.bind</code> to bind the value to the custom attributes. And it works!</p>
<p>Of course, you need to define the CSS class, e.g.</p>
<pre class="highlight"><code class="hljs css"><span class="hljs-class">.background-animation-add</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">-webkit-animation</span>:<span class="hljs-value"> changeBack <span class="hljs-number">0.5s</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">animation</span>:<span class="hljs-value"> changeBack <span class="hljs-number">0.5s</span></span></span>;
<span class="hljs-rule">}</span></span>
<span class="hljs-class">.background-animation-remove</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">-webkit-animation</span>:<span class="hljs-value"> fadeIn <span class="hljs-number">0.5s</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">animation</span>:<span class="hljs-value"> fadeIn <span class="hljs-number">0.5s</span></span></span>;
<span class="hljs-rule">}</span></span>
<span class="hljs-at_rule">@<span class="hljs-keyword">-webkit-keyframes</span> changeBack </span>{
    0% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> white</span></span>; <span class="hljs-rule">}</span></span>
    50% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> lightgreen</span></span>; <span class="hljs-rule">}</span></span>
    100% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> white</span></span>; <span class="hljs-rule">}</span></span>
}
<span class="hljs-at_rule">@<span class="hljs-keyword">keyframes</span> changeBack </span>{
    0% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> white</span></span>; <span class="hljs-rule">}</span></span>
    50% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> lightgreen</span></span>; <span class="hljs-rule">}</span></span>
    100% <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> white</span></span>; <span class="hljs-rule">}</span></span>
}
</code></pre>
<p>Here is a <a href="http://plnkr.co/edit/oa0Kb1hf6D9M2jl22vWD">plunkr link to a complete example</a></p>
<p>Happy coding!</p>
<p>Useful links:</p>
<ul>
<li><p><a href="http://aurelia.io/docs.html#custom-attributes">Aurelia Custom Attributes documentation</a></p>
</li>
<li><p><a href="http://blog.durandal.io/2015/07/17/animating-apps-with-aurelia-part-1/">Animating Apps with Aurelia - Part 1 by Rob Eisenberg</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
        <title>Peer code review Why's, How's and What's</title>
        <link href="http://mikhail.io/2015/05/peer-code-review-whys-hows-and-whats"/>
        <updated>2015-05-27T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-05-27,/2015/05/peer-code-review-whys-hows-and-whats</id>
        <content type="html"><![CDATA[<p>This post is a short summary on why do code reviews, what the steps are and what should actually be reviewed. The text was created to set some common ground for my team, which was just starting to conduct code reviews in a consistent way. By any means, this text is not a complete guide but rather a checklist and a starting point for discussion.</p>
<h2 id="why-s">WHY&#39;s</h2>
<p>So, why spend time on code reviews at all? The most important reasons are listed below:</p>
<p><strong>To find bugs</strong>, to spot and fix defects early in the process;</p>
<p><strong>To spread knowledge</strong>, to share understanding of the code base as team members learn from each other and increase team cohesiveness;</p>
<p><strong>To agree on rules</strong>, to maintain a level of consistency in design and implementation;</p>
<p><strong>To improve as the team</strong>, to identify common defects across the team thus reduce rework;</p>
<p><strong>To get second opinion</strong>, to add a different perspective, &quot;another set of eyes&quot; adds objectivity.</p>
<h2 id="how-s">HOW&#39;s</h2>
<p>Which steps should I take during code reviews? This depends a lot on the tools being used, of course. We use the following set of tools: task management tool (<em>Atlassian JIRA</em>), IDE (<em>Visual Studio</em>), source control log (Git log viewer of taste) and code review tool (<em>Atlassian Crucible/FishEye</em>). 
You should do the following during your code review process:</p>
<p><strong>Understand the scope</strong>, read the task description, user story, commit or pull request message;</p>
<p><strong>Get the code</strong>, pull the latest code to your hard drive and in your IDE, create a review item in code review tool, make sure that all changes are included;</p>
<p><strong>Read and understand</strong> all the changes by navigating them in your tools;</p>
<p><strong>Ask the author</strong> if something is unclear;</p>
<p><strong>Go through the checklist</strong> (below) and make your peer judgement;</p>
<p><strong>Put your comments</strong> to code review tool, as written comments are usually preferred over verbal;</p>
<p><strong>Merge the code</strong> into main repository or integration branch, if you agree with the proposed changes;</p>
<p><strong>Report the result back</strong> to the team by moving the task to rejected or accepted state, according to your team&#39;s workflow.</p>
<h2 id="what-s">WHAT&#39;s</h2>
<p>Here is the approximate checklist of what should be reviewed during the code review. Start at the top and go down to the bottom.</p>
<p><strong>Readiness</strong>: Is the change under review submitted correctly, are all tests green?</p>
<p><strong>Functionality</strong>: Does the code work? Does it perform its intended function, is the logic correct etc. You don&#39;t have to test all scenarios, but you should at least think of possible scenarios and whether the code addresses all of them in your opinion.</p>
<p><strong>Readability</strong>: Is all the code easy to understand? When you read the code, is it easy to understand every detail of it without spending a lot of time and effort?</p>
<p><strong>Testabity</strong>: Is the code testable? I.e. not too many dependencies, unable to initialize objects with stubs or mocks, test frameworks can use methods etc.</p>
<p><strong>No duplication</strong>: Is there any redundant or duplicate code? Do you see some possibility to refactor it to reduce duplication? </p>
<p><strong>Reuse</strong>: Did the author reuse existing classes and libraries for solving common tasks? Is the naming and code structure consistent with similar existing blocks of solution? Can any of the code be replaced with library functions?</p>
<p><strong>Design</strong>: Do you agree with the design and structure of code blocks? Think of coupling and cohesion, SOLID principles, dependency chains etc.</p>
<p><strong>Unit tests</strong>: Do tests exist and are they comprehensive? Are all the changes covered by unit tests? Do they conform to unit testing guidelines? Can you think of more tests which are missing?</p>
<p><strong>Readability of tests</strong>: Are tests short and readable? Do they reveal any design problems?</p>
<p><strong>Error handling</strong>: Is exception handling and logging consistent? Are they tested?</p>
<p><strong>Public contracts</strong>: Could the code violate backwards compatibility when we have to keep it?</p>
<p><strong>No leftovers</strong>: Do you see any code which is commented out or any TODOs? Can any logging or debugging code be removed without loosing functionality?</p>
<p><strong>Code style</strong>: Does it conform to your agreed programming practices and coding style? Do ReSharper and static code analysis tools give no errors and warnings?</p>
<p><strong>Documentation</strong>: Was the documentation updated in case the change touches public API?</p>
<p><strong>Comments</strong>: Are all comments valid? Do you see any dummy comments which are unreadable and were created just to make ReSharper happy?</p>
<p><strong>Performance</strong>: Do you see any potential performance problems that have to be solved before the first version of this code is accepted? When applicable, measure the CPU load, memory, or traffic consumption caused by new code.</p>
<p><strong>High level tests</strong>: When applicable, are integration and/or end-to-end tests created?</p>
<p><strong>Data migration</strong>: When applicable, was database migration script updated?</p>
<p>Am I missing anything important? Probably yes, so please share your suggestions in the comments. 
Happy reviews!</p>
]]></content>
    </entry>
    
    <entry>
        <title>Unit testing null parameter checks</title>
        <link href="http://mikhail.io/2015/04/unit-testing-null-parameter-checks"/>
        <updated>2015-04-08T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-04-08,/2015/04/unit-testing-null-parameter-checks</id>
        <content type="html"><![CDATA[<p>We use constructor dependency injection throughout our application. This means that most service classes have constructors, which accept all dependencies in form of interfaces. They are then saved to private fields to be used while class methods are executed. Here is an example (all examples below are in C#):</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">VeryUsefulClass</span> : <span class="hljs-title">IVeryUsefulClass</span>
{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> ISomething something;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> ISomethingElse somethingElse;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VeryUsefulClass</span><span class="hljs-params">(ISomething something, ISomethingElse somethingElse)</span>
    </span>{
        <span class="hljs-keyword">this</span>.something = something;
        <span class="hljs-keyword">this</span>.somethingElse = somethingElse;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> AwesomeResponse <span class="hljs-title">DoUsefullStaff</span><span class="hljs-params">(ImportantRequest request)</span>
    </span>{
        <span class="hljs-keyword">this</span>.something.DoSomething();
        <span class="hljs-keyword">this</span>.somethingElse.DoSomethingElse();
        <span class="hljs-keyword">return</span> ...;
    }
}
</code></pre><p>We also use TDD, which means we must write unit tests for every aspect of our code. So I want to discuss one specific aspect: guarding the constructor parameters from null values and testing this guard. Here is one possible way to write such tests (with NUnit and Moq):</p>
<pre class="highlight"><code class="hljs cs">[TestFixture]
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">VeryUsefulClassTests</span>
{
    [Test]
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WhenSomethingIsNullConstructorThrowsNullException</span><span class="hljs-params">()</span>
    </span>{
        Assert.ThrowsException&lt;ArgumentNullException&gt;(() =&gt; 
            <span class="hljs-keyword">new</span> VeryUsefulClass(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Mock&lt;ISomethingElse&gt;.Object));
    }

    [Test]
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WhenSomethingElseIsNullConstructorThrowsNullException</span><span class="hljs-params">()</span>
    </span>{
        Assert.ThrowsException&lt;ArgumentNullException&gt;(() =&gt; 
            <span class="hljs-keyword">new</span> VeryUsefulClass(<span class="hljs-keyword">new</span> Mock&lt;ISomething&gt;.Object, <span class="hljs-keyword">null</span>));
    }

    [Test]
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ImportantRequestProducesAwesomeResponse</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">var</span> target = <span class="hljs-keyword">new</span> VeryUsefulClass(<span class="hljs-keyword">new</span> Mock&lt;ISomething&gt;.Object, 
            <span class="hljs-keyword">new</span> Mock&lt;ISomethingElse&gt;.Object);
        ...
    }

    ...
}
</code></pre><p>The tests are small and each one tests just one thing. But it looks like we have a bit too much duplication and &quot;noise&quot;: too much service code around real code under test. </p>
<h2 id="make-it-better">Make it better</h2>
<p>Now let&#39;s say we need to introduce another dependency into our useful class: ISomethingNew. The constructor signature will change to</p>
<pre class="highlight"><code class="hljs r">public VeryUsefulClass(ISomething something, 
    ISomethingElse somethingElse, 
    ISomethingNew somethingNew)
{
    <span class="hljs-keyword">...</span>
}
</code></pre><p>So, how many places do we have to change in our test class? One per each test, which includes one per each constructor parameter. Quite a lot! If we have a class with many dependencies, we are in trouble. So, before introducing the new dependency, let&#39;s refactor the tests. First, let&#39;s declare all mocks as private fields and create them in set-up method:</p>
<pre class="highlight"><code class="hljs cs">[TestFixture]
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">VeryUsefulClassTests</span>
{
    <span class="hljs-keyword">private</span> Mock&lt;ISomething&gt; something;
    <span class="hljs-keyword">private</span> Mock&lt;ISomethingElse&gt; somethingElse;

    [SetUp]
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetUp</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">this</span>.something = <span class="hljs-keyword">new</span> Mock&lt;ISomething&gt;();
        <span class="hljs-keyword">this</span>.somethingElse = <span class="hljs-keyword">new</span> Mock&lt;ISomethingElse&gt;();
    }
...
</code></pre><p>This way the same clean mocks will be available for each and every test. To make use of them, let&#39;s create GetTarget method which will create an instance of class under test</p>
<pre class="highlight"><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> VeryUsefulClass <span class="hljs-title">GetTarget</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">VeryUsefulClass</span><span class="hljs-params">(<span class="hljs-keyword">this</span>.something.Object, <span class="hljs-keyword">this</span>.somethingElse.Object)</span></span>;
}
</code></pre><p>Now we are ready to rewrite our test methods with less duplication</p>
<pre class="highlight"><code class="hljs cs">[Test]
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WhenSomethingIsNullConstructorThrowsNullException</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">this</span>.something = <span class="hljs-keyword">null</span>;
    Assert.ThrowsException&lt;ArgumentNullException&gt;(() =&gt; <span class="hljs-keyword">this</span>.GetTarget());
}

[Test]
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WhenSomethingElseIsNullConstructorThrowsNullException</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">this</span>.somethingElse = <span class="hljs-keyword">null</span>;
    Assert.ThrowsException&lt;ArgumentNullException&gt;(() =&gt; <span class="hljs-keyword">this</span>.GetTarget());
}

[Test]
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ImportantRequestProducesAwesomeResponse</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">var</span> target = <span class="hljs-keyword">this</span>.GetTarget();
    ...
}
</code></pre><p>So, how many constructor calls do we have to change when we introduce a new dependency now? Just one for the complete test class!</p>
<p>I strongly believe that readability of your test classes is very important. If you make your tests short, expressive and easy to read, your tests will have much higher value: not only the safety net for classes, but also nice documentation which is easy to use and support.</p>
<h2 id="make-it-shine">Make it shine</h2>
<p>I&#39;m still not quite satisfied with the amount of code we have to write for such a simple thing as the validation of ArgumentNullException being thrown from constructors. Imagine this: we have hundreds or thousands of classes which follow this same pattern, and we end up writing thousands tests which look almost exactly the same... </p>
<p>I solved it with a simple helper method:</p>
<pre class="highlight"><code class="hljs undefined">public void ConstructorMustThrowArgumentNullException(Type type)
{
    foreach (var constructor in type.GetConstructors())
    {
        var parameters = constructor.GetParameters();
        var mocks = parameters.Select(
            p =&gt;
                {
                    Type mockType = typeof(Mock&lt;&gt;).MakeGenericType(
                        new[] { p.ParameterType });
                    return (Mock)Activator.CreateInstance(mockType);
                }).ToArray();

        for (int i = 0; i &lt; parameters.Length; i++)
        {
            var mocksCopy = mocks.Select(m =&gt; m.Object).ToArray();
            mocksCopy[i] = null;
            try
            {
                constructor.Invoke(mocksCopy);
                Assert.Fail("ArgumentNullException expected for parameter {0} of 
                             constructor, but no exception was thrown", 
                             parameters[i].Name);
            }
            catch (TargetInvocationException ex)
            {
                Assert.AreEqual(typeof(ArgumentNullException), 
                    ex.InnerException.GetType(), 
                    string.Format("ArgumentNullException expected for parameter {0} of 
                        constructor, but exception of type {1} was thrown", 
                        parameters[i].Name, ex.InnerException.GetType()));
            }
        }
    }
}
</code></pre>
<p>It accepts a type as its only input parameter (obviously, it&#39;s easy to make it generic or an extension method). Then, using the reflection, it iterates through the input parameters of a constructor, and passes one null value and mocks all other parameters. It expects ArgumentNullException to be thrown on each call.</p>
<p>You could write one test for all classes in a namespace or in assembly, if the pattern is applied consistently there! And it will let you know when one of your new classes violates the common rule, with zero extra effort.</p>
<p>Does anyone know the library which would do that without me inventing the bicycle myself?</p>
<p>Happy coding!</p>
]]></content>
    </entry>
    
    <entry>
        <title>The Green Hackfest - my first hackathon</title>
        <link href="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon"/>
        <updated>2015-03-15T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-03-15,/2015/03/the-green-hackfest-my-first-hackathon</id>
        <content type="html"><![CDATA[<p>In this post I&#39;d like to share my experience about the first hackathon that I took part in. It was called <a href="http://the-hackfest.com/past-hacks/green-hackfest-utrecht-2014.html">The Green Hackfest</a> and took place in Utrecht, the Netherlands on 10-12 October 2014.</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/hackfest_banner.jpg" alt="Green Hackfest"></p>
<p>A brief introduction on what hackathon is. A hackathon, or a hackfest in this case (people used these words interchangeably), is an event for programmers, engineers, designers and entrepreneurs where they can get together, form teams and work on solving problems in creative way. The time is very limited, usually from 12 to 24 hours, but in this case we had a &#39;marathon&#39; of 48 hours. At the start, teams get the challenge definitions and in the end they must pitch their ideas, prototypes and mock-ups to the judges to win the prizes. The participants are traditionally called hackers, which does not mean that they hack bank networks and that kind of stuff, but they rather strive to overcome the usual limitation in whatever area they are competing.</p>
<p>I will start with the most useful part - I&#39;ll give several pieces of advice for those who are preparing to their first hackathon. And then I&#39;ll get to the description of what was happening this time, so expect quite some photos.</p>
<h2 id="what-i-learnt">What I learnt</h2>
<p>So, in case you are going to take part in one of those hackathons, here is what I can advise you:</p>
<ul>
<li><p>Definitely go. It will be quite a new experience for you, well worth the time.</p>
</li>
<li><p>Take a laptop with your favourite working environment and any other devices that might be useful. Apart from this and some small personal things, you won&#39;t probably need anything else.</p>
</li>
<li><p>Don&#39;t be late. Otherwise you may miss the important parts: briefs and team formation.</p>
</li>
<li><p>Don&#39;t worry if you don&#39;t have a team before the event, that&#39;s normal.</p>
</li>
<li><p>Always compete for a prize. Even if it&#39;s not particularly important for you, it will help you align your actions and get more drive and fun.</p>
</li>
<li><p>Don&#39;t be shy, talk to people. If you don&#39;t know how to start, just join some other discussion by saying hello and your name. Ask what people think about briefs, what their background is, what are they going to do next and so on. Don&#39;t be afraid to get out of comfort zone.</p>
</li>
<li><p>Be nice, smile, make jokes, be open and willing to help others, listen to them.</p>
</li>
<li><p>Try to join someone who has complementing background for your skills, not someone with the same skill set. If you are a software developer, search for designers, entrepreneurs and pitch speakers.</p>
</li>
<li><p>Don&#39;t come with anything done in advance. You are welcome to bring relevant ideas, but don&#39;t bring implementations. The briefs will be too specific for you to fit. And, in any case, it will be transparent to everyone whether you did your prototype on-site or beforehand. You won&#39;t have fun if you start cheating.</p>
</li>
<li><p>Focus on pitch preparation quite early. Think through your demo, and focus on making it shiny and impressive, and don&#39;t spend much time on anything else. During last hour, practice your speech and check that you fit into time limit.</p>
</li>
<li><p>If you are suggested to use a specific technology, use it, you might then compete for two prizes instead of one, which double your chances.</p>
</li>
<li><p>If you stay overnight, have some sleep. Take a sleeping bag or a mat with you.</p>
</li>
<li><p>Keep your prototype focused. You only need one impressive idea, not 10 boring ideas.</p>
</li>
<li><p>There will be someone from sponsors and technology partners to support you. Reach to them and take advice from people who are willing to help you.</p>
</li>
<li><p>Have fun!</p>
</li>
</ul>
<h2 id="how-we-scored-at-green-hackfest">How we scored at Green Hackfest</h2>
<p>So we gathered together on Friday evening, and stayed in the hackspace until Sunday night. Participants are provided with all the infrastructure during this time: power plugs, Wi-Fi, tables &amp; chairs, food, drinks and sleeping room. All free of charge.</p>
<p>The whole story starts with introduction from hosts and then with briefs from sponsors. Here is Richard Kastelein, the event organizer, giving his kick-off speech:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Richard_Kastelein.jpg" alt="Richard Kastelein"></p>
<p>This way we got the tasks for these 2 days. There were several tasks, so everyone could choose which one suits them the best. Some folks were late, so they were having troubles afterwards to get the idea of what&#39;s expected from them.</p>
<p>I think there were about 70 participants in beginning, and about 50 of them made it to the end. Most people came alone or in pair; and I think there were two pre-formed teams of several people. </p>
<p>Most people were Dutch, but a lot were not. Many international students, scientists and entrepreneurs live in the Netherlands these days, and they were all welcome. So, while some teams were speaking Dutch within the group, English was the default language for other communication all the time, which is very handy. Some participants came to the Netherlands specifically to take part in this event: I remember guys from UK, Belgium and even Serbia.</p>
<p>I am the software developer and I expected the majority of hackers to be developers too, mostly on experienced side. But I was quite wrong. Many people were from entrepreneurial background, coming from ventures on early stage, or research environments. Many folks were students with no career set yet. In result, I was the only person who was able to write code in our team, and one of the most experienced programmers overall (my guess).</p>
<p>So the first task for everyone was to build a team for yourself. There was no formal procedure for that. You just meet people, ask what they think about the challenges and try to start the discussion, then go to someone else, and repeat. Sooner or later, you should find someone with whom you are ready to spend the next 45 hours working on a project. The normal team is of 2 to 5 people, and you should ideally join diverse skills. So if you are a developer, search for entrepreneurs or other idea generators, and also someone with design skills.</p>
<p>This time we had the following briefs, all of them were more or less related to green tech:</p>
<ul>
<li><p>Crowdfunding challenge: find new applications for an existing crowdfunding platform</p>
</li>
<li><p>Optimize manufacturing line based on monitoring data to use less energy without compromising the production schedule</p>
</li>
<li><p>Make people in Utrecht use more bicycles instead of cars (tough task, as Utrecht is one of the cities were pretty much everyone is already using bicycles)</p>
</li>
<li><p>Visualize the sustainability of electric car stations</p>
</li>
<li><p>Show off anything with IBM BlueMix platform</p>
</li>
</ul>
<p>And there was the main prize for the best overall Hack Green.</p>
<p>Here is the prize structure:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Prize_structure.jpg" alt="Prize structure"></p>
<p>(the student award was eventually transformed to IBM technology award)</p>
<p>Quite quickly I decided that Ebbits brief looks the most promising. First, it provided some test data and API to play with, so we had at least something to start with. Second, it did not sound as romantic as some other topics, so I hoped that not many teams would pick it. And last but not least, there were 3 prizes for this same brief, so any of the top 3 teams were going to cash!</p>
<p>Here is the manager from Ebbits presenting his manufacturing brief:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Manufacturing_brief.jpg" alt="Manufacturing brief"></p>
<p>So I joined several discussions until I found folks who were thinking more or less on the same page, and were equally enthusiastic about smart factory challenge.</p>
<p>The hackspace was available for the whole 48 hours of the hackfest. There was one big open space containing many open cabins with tables, couches and chairs inside:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Hackspace_cabin.jpg" alt="Hackspace four guys 2"></p>
<p>So usually one team could fit into one cabin:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Hackspace_one_team.jpg" alt="Hackspace three guys"></p>
<p>Not too much space, but enough to put two or three laptops + cups or beers aside:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Hackspace_tables.jpg" alt="Hackspace one guy"></p>
<p>The gathering area was located in the centre of this room. People got together for all briefs, intermediate meet-ups, final pitches and prizes.</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Hackspace_hall.jpg" alt="Hackspace"></p>
<p>These guys had won the previous hackfest of same series, and I think they didn&#39;t speak to anyone, so nobody knew what they were doing:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Last_winners.jpg" alt="Hackspace four guys"></p>
<p>We took the large space behind the scene, and also got a big white board for brainstorming:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Hackfest_our_team.jpg" alt="Hackspace our team"></p>
<p>Wi-Fi was free and fast enough for the participants. Power plugs were everywhere, sometimes hanging from the ceiling:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Hackspace_wires.jpg" alt="Hackspace our team 2"></p>
<p>Food and beverages (including beer) were also provided in effectively unlimited quantities. Breakfasts, lunches, dinners plus night snacks - all for free for hackers. Biological green food for green hack fest:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Food.jpg" alt="Food"></p>
<p>There were two sleeping areas as well. I don&#39;t have any photos of those, but they were really basic: just separate empty rooms where you could put a sleeping bag and take a nap. I&#39;m not sure how many teams slayed late in the night, but we were lazy and went to sleep at midnight or so :)</p>
<p>In terms of prize winning odds, the most important part of the whole process is the final pitch. Each team had just 2 minutes to make a demo and do the speech. The demo doesn&#39;t need to show off a finished product, but everyone had to prepare prototypes, some pieces of working UI. Powerpoint slides were not enough. After the demo, the jury had 3 to 5 minutes to ask questions, and then the next team takes over. There was a training on how to pitch effectively, but I skipped that one.</p>
<p>So, you should leave quite some time before the pitch starts to actually prepare your demo. Focus on what you will say, and implement only the features that will be demoed, don&#39;t waste your time on anything else. Try showing something relatively small, specific and easy to understand, but also give a short overview of how you can see this can be expanded. Highlight the strengths of your team and why you are good candidates to do the job that you started.</p>
<p>During the pitch, the team is standing next to a big screen. One member is showing the demo on his laptop, while another member explains the whole story behind. Here is how it looked like:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Pitch.jpg" alt="Pitch"></p>
<p>There were four Judges in the jury, consisting of sponsor representatives and serial entrepreneurs. Here are those smart powerful guys:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Judges.jpg" alt="Judges"></p>
<p>We ended up taking the second place in our category. As we chose to participate in a category with 3 prizes, we scored 1000 euros! This is our photo with the sponsor and our prize:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Our_prize.jpg" alt="Our prize"></p>
<p>And this is the best overall hack team, congratulations to them:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/Winners.jpg" alt="Winners"></p>
<p>Here are all the hackers who stayed at the fest until the very end:</p>
<p><img src="http://mikhail.io/2015/03/the-green-hackfest-my-first-hackathon/All_hackers.jpg" alt="All hackers"></p>
<p>Enjoyable experience, thanks everyone for sharing it.</p>
]]></content>
    </entry>
    
    <entry>
        <title>How I fixed a bug in SQL Server</title>
        <link href="http://mikhail.io/2015/02/how-i-fixed-a-bug-in-sql-server"/>
        <updated>2015-02-17T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-02-17,/2015/02/how-i-fixed-a-bug-in-sql-server</id>
        <content type="html"><![CDATA[<p>Well, not really... I just reported it to Microsoft and then it got fixed. Anyway, here is the story.</p>
<p>Our production databases were migrated from SQL Server 2012 to SQL Server 2014. Among other improvements in the latter, <a href="http://blogs.msdn.com/b/psssql/archive/2014/04/01/sql-server-2014-s-new-cardinality-estimator-part-1.aspx">the new cardinality estimator was introduced</a>. In two words, cardinality estimator is a piece of SQL functionality which estimates how many rows the engine might get for a specific query or a query part. The new estimator is supposed to be smarter than the old one, of course. It takes more factors into account, and thus should give better results with some query plans. But &quot;new&quot; also means &quot;less tested&quot;...</p>
<p>Immediately after migration we found out that one of the stored procedures got much slower than before. That stored procedure was retrieving thousands of rows from a queue, and then did a series of transformations which took ages to complete. During the investigation we found that the query plan is far from being optimal, with massive scans of partitioned tables; and the reason was in ridiculously high estimations on one of the tables. That table was of moderate size (millions of rows), our query touched only some hundreds rows, while the estimate was... millions!</p>
<p>Here is a repro to show this issue on any test database (database must be in SQL Server 2014 compatibility mode):</p>
<pre class="highlight"><code class="hljs sql"><span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [dbo].[Store](
    Id <span class="hljs-built_in">int</span> <span class="hljs-keyword">IDENTITY</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    City <span class="hljs-built_in">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-keyword">Size</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    Name <span class="hljs-built_in">varchar</span>(<span class="hljs-keyword">max</span>) <span class="hljs-literal">NULL</span>,
    <span class="hljs-keyword">CONSTRAINT</span> [PK_Store] <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> CLUSTERED ([Id] <span class="hljs-keyword">ASC</span>)
 ) 

 <span class="hljs-keyword">GO</span>

 <span class="hljs-keyword">CREATE</span> NONCLUSTERED <span class="hljs-keyword">INDEX</span> [IX_Store] <span class="hljs-keyword">ON</span> [dbo].[Store]
(
    City <span class="hljs-keyword">ASC</span>,
    <span class="hljs-keyword">Size</span> <span class="hljs-keyword">ASC</span>
)

<span class="hljs-keyword">GO</span>
 <span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> Store
<span class="hljs-keyword">INSERT</span> Store 
<span class="hljs-keyword">SELECT</span> i % <span class="hljs-number">101</span>, i % <span class="hljs-number">11</span>, <span class="hljs-string">'Store '</span> + <span class="hljs-keyword">CAST</span>(i <span class="hljs-keyword">AS</span> <span class="hljs-built_in">VARCHAR</span>)
  <span class="hljs-keyword">FROM</span> 
 (<span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">100000</span> ROW_NUMBER() OVER (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> s1.[object_id]) <span class="hljs-keyword">AS</span> i
  <span class="hljs-keyword">FROM</span> sys.all_objects  s1, sys.all_objects  s2) numbers
<span class="hljs-keyword">GO</span>

<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> StoreRequest (City <span class="hljs-built_in">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>, <span class="hljs-keyword">Size</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>)

<span class="hljs-keyword">GO</span>
<span class="hljs-keyword">DELETE</span> StoreRequest
<span class="hljs-keyword">INSERT</span> StoreRequest <span class="hljs-keyword">values</span> (<span class="hljs-number">55</span>, <span class="hljs-number">1</span>)
<span class="hljs-keyword">INSERT</span> StoreRequest <span class="hljs-keyword">values</span> (<span class="hljs-number">66</span>, <span class="hljs-number">2</span>)

<span class="hljs-keyword">GO</span>

 <span class="hljs-keyword">SELECT</span> s.City
   <span class="hljs-keyword">FROM</span> StoreRequest <span class="hljs-keyword">AS</span> r
        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> Store <span class="hljs-keyword">AS</span> s  <span class="hljs-keyword">WITH</span>(<span class="hljs-keyword">INDEX</span>(IX_Store), FORCESEEK) 
                    <span class="hljs-keyword">ON</span> s.City = r.City <span class="hljs-keyword">AND</span> s.<span class="hljs-keyword">Size</span> = r.<span class="hljs-keyword">Size</span>
  <span class="hljs-keyword">WHERE</span> r.<span class="hljs-keyword">Size</span> &lt;&gt; <span class="hljs-number">1</span> <span class="hljs-keyword">OR</span> s.City &lt;&gt; <span class="hljs-number">55</span>
</span></code></pre><p>In this script I create two tables: Store with 100k rows and StoreRequest with 2 rows. And then I make a query where I join them on two columns. The WHERE clause contains two restrictions: one for each of the tables with OR clause in between. It sounds more complicated than it really is.</p>
<p>INDEX and FORCESEEK hints are there to force the engine to use this index to be able to see the statistics. Otherwise it considers the index to be too heavy to use. And that is why:</p>
<p><img src="http://mikhail.io/2015/02/how-i-fixed-a-bug-in-sql-server/2014estimates.png" alt="Execution plan in SQL Server 2014"></p>
<p>You see the significant error in Estimated Number of Rows vs Actual Number of Rows. The estimator actually thinks that the query is going to yield half of all rows in that table!</p>
<p>Good news: it&#39;s actually easy to fix that problem in this case. We should just change the WHERE clause to use same table for both sides of OR condition:</p>
<pre class="highlight"><code class="hljs stylus"> SELECT s<span class="hljs-class">.City</span>
   FROM StoreRequest AS r
        INNER JOIN Store AS s  <span class="hljs-function"><span class="hljs-title">WITH</span><span class="hljs-params">(INDEX(IX_Store)</span></span>, FORCESEEK) 
                    ON s<span class="hljs-class">.City</span> = r<span class="hljs-class">.City</span> AND s<span class="hljs-class">.Size</span> = r<span class="hljs-class">.Size</span>
  WHERE s<span class="hljs-class">.Size</span> &lt;&gt; <span class="hljs-number">1</span> OR s<span class="hljs-class">.City</span> &lt;&gt; <span class="hljs-number">55</span>
</code></pre><p>Estimator is able to handle this situation correctly:</p>
<p><img src="http://mikhail.io/2015/02/how-i-fixed-a-bug-in-sql-server/2014estimates_good.png" alt="Execution plan in SQL Server 2014 as it should be"></p>
<p>Same fix worked for our production query. That query was much more complicated so it took more time to find the reason.</p>
<p>To prove that this bug is fresh for the new cardinality estimator, we can switch the original query to the legacy cardinality estimator with flag 9481:</p>
<pre class="highlight"><code class="hljs stylus"> SELECT s<span class="hljs-class">.City</span>
   FROM StoreRequest AS r
        INNER JOIN Store AS s  <span class="hljs-function"><span class="hljs-title">WITH</span><span class="hljs-params">(INDEX(IX_Store)</span></span>, FORCESEEK) 
                    ON s<span class="hljs-class">.City</span> = r<span class="hljs-class">.City</span> AND s<span class="hljs-class">.Size</span> = r<span class="hljs-class">.Size</span>
  WHERE r<span class="hljs-class">.Size</span> &lt;&gt; <span class="hljs-number">1</span> OR s<span class="hljs-class">.City</span> &lt;&gt; <span class="hljs-number">55</span>
 <span class="hljs-function"><span class="hljs-title">OPTION</span><span class="hljs-params">(QUERYTRACEON <span class="hljs-number">9481</span>)</span></span> 
</code></pre><p>And then we get this:</p>
<p><img src="http://mikhail.io/2015/02/how-i-fixed-a-bug-in-sql-server/2012estimates.png" alt="Execution plan in SQL Server 2012"></p>
<p>Which is as good as the best attempt of SQL Server 2014 and much-much better than the worst one.</p>
<p>I posted this repro to <a href="https://connect.microsoft.com/SQLServer/feedback/details/1086125/cardinality-estimator-2014-is-off-with-or-in-where-clause">SQL Server forum</a>. Here is the comment that I got from Erland Sommarskog, SQL Server MVP:</p>
<blockquote>
<p>The estimate here is clearly incorrect. SQL Server knows the density of Size and City. It knows the cardinality of the temp table. The density information gives how many rows the join will produce. The WHERE clause will then remove a certain number of rows. With no statistics for the temp table, it does not know how many, but it will apply some standard guess.</p>
<p>50000 is a completely bogus number, because the join cannot produce that many rows, and SQL Server is able to compute the join with out the WHERE clause decently. (Well, it estimates 90, when the number is 180.) No, this is obviously a case of the cardinality estimator giving up completely.</p>
<p>It is worth noting that both these WHERE clauses gives reasonable estimates:</p>
<pre class="highlight"><code class="hljs stylus">WHERE r<span class="hljs-class">.Size</span> &lt;&gt; <span class="hljs-number">11</span> OR r<span class="hljs-class">.City</span> &lt;&gt; <span class="hljs-number">550</span>
WHERE s<span class="hljs-class">.Size</span> &lt;&gt; <span class="hljs-number">11</span> OR s<span class="hljs-class">.City</span> &lt;&gt; <span class="hljs-number">550</span>
</code></pre><p>Whereas these two gives the spooky 50000:</p>
<pre class="highlight"><code class="hljs stylus">WHERE s<span class="hljs-class">.Size</span> &lt;&gt; <span class="hljs-number">11</span> OR r<span class="hljs-class">.City</span> &lt;&gt; <span class="hljs-number">550</span>
WHERE r<span class="hljs-class">.Size</span> &lt;&gt; <span class="hljs-number">11</span> OR s<span class="hljs-class">.City</span> &lt;&gt; <span class="hljs-number">550</span>
</code></pre><ul>
<li>Erland Sommarskog</li>
</ul>
</blockquote>
<p>Then I also posted it to <a href="https://connect.microsoft.com/SQLServer/feedback/details/1086125/cardinality-estimator-2014-is-off-with-or-in-where-clause">SQL Server feedback issue tracker</a> and after a couple of weeks got a reply from Microsoft employee:</p>
<blockquote>
<p>Thank you for reporting this issue. I am happy to let you know that we have a fix for this problem, which will be available in one of the upcoming servicing releases for SQL Server 2014 (the details will be published in a KB).</p>
<ul>
<li>Thanks, Alexey, SQL Development</li>
</ul>
</blockquote>
<p>Thanks to Erlang and Alexey for their help. I look forward to the servicing release!
Happy coding!</p>
]]></content>
    </entry>
    
    <entry>
        <title>How we do message processing</title>
        <link href="http://mikhail.io/2015/02/how-we-do-message-processing"/>
        <updated>2015-02-05T00:00:00.000Z</updated>
        <id>tag:mikhail.io,2015-02-05,/2015/02/how-we-do-message-processing</id>
        <content type="html"><![CDATA[<p>Our team develops a back-end system that processes messages from mobile devices. The devices collect information from complex machines and send messages to our data center. In this article I want to share our approaches to building such processing software. The ideas are quite general and can be applied to any system of the following architecture:
<img src="http://mikhail.io/2015/02/how-we-do-message-processing/architecture.jpg" alt="System architecture"></p>
<p>The devices use communication channels to send messages to our gateway - the input point of our application. The application&#39;s goal is to understand what came in, do the required actions and save the information into the database for further processing. Let&#39;s consider the database to be the end point of processing. Sounds easy, right? But some difficulties appear with the growth of amount and diversity of incoming messages; so let&#39;s look at some of them.</p>
<p>A few words on the target load level. Our system processes the messages from tens of thousands of devices, and we get from several hundreds to a thousand messages per second. If you numbers are different by orders of magnitude, it might be the case that your problems are going to look completely different and you&#39;ll need a different set of tools to solve them.</p>
<p>Apart from the number of messages itself, there is a problem of irregularity and peak times. The application must be ready for relatively short peaks which might be about ten times higher than the average expectation. To address this problem we organize the system as a sequence of queues and corresponding processors.</p>
<p>The input gateway doesn&#39;t do much of real job: it just receives a message from a client and puts it into the queue. This operation is very cheap, thus the gateway is capable of accepting a vast number of messages per second. Afterwards a separate process retrieves several messages - the amount it wants to get - from the queue and does the hard work. The processing happens asynchronously while the load on the system remains limited. Perhaps the time in the queue grows at peaks, but that&#39;s it.</p>
<p>Normally the message processing is non-trivial and consists of several actions. Here we get to the next logical step: we break down the job into several stages, each one having a separate queue and a dedicated processor. The queues and processors are independent and may reside on separate physical servers; and we can tune and scale them independently:
<img src="http://mikhail.io/2015/02/how-we-do-message-processing/sequence.jpg" alt="Sequence-based architecture"></p>
<p>The first queue contains the messages from devices as-is, without decoding or transforming them. The first processor decodes them and puts them into the second queue. The second processor could, for instance, call a third-party service and enrich the message with some relevant information, and the third processor could save that information into the database.</p>
<p>These are the basics, so what do we still need to consider?</p>
<h3 id="define-your-values">Define your values</h3>
<ol>
<li><p>Simplicity of creation, change and support</p>
<p> Asynchronous distributed message processing brings quite some extra complexity into the software product. You should constantly work on reducing this price. The code gets optimized to be, at first place, readable and straightforward for all the team members, cheap to be changed and supported. If nobody but the author can decrypt the code, no great architecture will make the team happy.</p>
<p> This statements looks obvious, but it might take quite some time and effort before the team starts to consistently implement this principle and not just declare it. Do the regular refactoring whenever you feel you can make the code a bit better and simpler. All the source code should get reviewed and the most critical parts are better to be developed in pair.</p>
</li>
<li><p>Fault tolerance</p>
<p> It makes sense to define your policies of hardware or subsystem failures handling from the very beginning. They will differ for different products. It might be the case that someone can throw away all the messages that come in during 5 minutes of a server reboot.</p>
<p> In our system we don&#39;t want to lose messages. If a particular service is not currently available, a database call times out, or there is a random processing error, it must not result in information loss. The affected messages must be saved inside the queue and will be processed right after the problem is fixed.</p>
<p> Suppose your code on one server calls a web service on another server in synchronous manner. If the second server is not available, the processing will fail, and you can&#39;t do anything but log the error. In case of asynchronous processing the message will wait for the second server to go live again.</p>
</li>
<li><p>Performance</p>
<p> Processing rate per second, latency, load on the servers - all these are important parameters of application performance. That&#39;s why we choose the architecture to be flexible.</p>
<p> Although, don&#39;t pay TOO much attention to optimization from the very beginning. Usually the majority of performance issues is created by relatively small pieces of code. Unfortunately people tend to be very bad at predicting where exactly those issues are going to appear. People write <a href="http://carlos.bueno.org/optimization/">books on pre-mature optimization</a>. So make sure that your architecture allows you to fine-tune the system and forget about optimization until the first load testing.</p>
<p> At the same time, and for this reason, start running the load tests early on, and then include them into your standard testing procedure. Start optimizing only when the tests reveal a specific performance problem.</p>
</li>
</ol>
<h3 id="fine-tune-your-mindset">Fine tune your mindset</h3>
<ol>
<li><p>Operate queues and asynchronous processors</p>
<p> I already described this above. Our main tools are queues and processors. While the classic approach is &quot;get request, call remote code, wait for response, return it back to the originator&quot;, now we should always use &quot;get a message from a queue, process it, send a message to another queue&quot;. The right mix of these two approaches should enable both scalability and ease of development.</p>
</li>
<li><p>Break the processing down into several stages</p>
<p> If message processing is complex enough to be split into several stages, do that by creating several queues and processors. Make sure that you don&#39;t make it too complex to understand by unneeded fragmentation: the right balance is important. Quite often you will see a split which feels natural for developers. If not, try thinking of possible failure points. If there are multiple reasons why a processor may fail, consider its breakdown.</p>
</li>
<li><p>Don&#39;t mix decoding and processing</p>
<p> Usually the messages arrive encoded with a protocol which can be binary, XML, JSON, etc. Decode them into your native format as soon as possible. This will help you solve two problems. First, you might need to support multiple protocols; and after decoding you unify the format of all further messages. Second, logging and debugging gets simpler.</p>
</li>
<li><p>Make the queues topology configurable</p>
<p> Structure your code in a way that allows you to change the configuration of queues relatively easy. Splitting a processor into two parts should not result in tons of refactoring. Don&#39;t make your code depend on a specific queue mechanism implementation: tomorrow you might want to change it.</p>
</li>
<li><p>Do batch processing</p>
<p> Normally it makes sense to receive messages from a queue in batches, not one by one. The services that you use might accept arrays for faster processing and in this case one call will always be faster than a handful of small ones. One insertion of 100 rows into database is faster than 100 remote insertions.</p>
</li>
</ol>
<h3 id="create-tooling">Create tooling</h3>
<ol>
<li><p>Implement total monitoring</p>
<p> Invest into monitoring tools. It should be easy to see the charts of throughput, average processing time, queue size and time since last message with breakdown by queue.
<img src="http://mikhail.io/2015/02/how-we-do-message-processing/monitoring.jpg" alt="Queue monitoring"></p>
<p> We use monitoring tools not only on production and staging environments but also on testing servers and even developer&#39;s machines. Carefully baked charts are helpful during debug and load testing procedures.</p>
</li>
<li><p>Test everything</p>
<p> Message processing systems are perfect fields to apply fully automated testing. Input data protocols are well-defined and there is no human interaction. Cover your code with unit tests. Make your queues pluggable so that you could mock your real queues out with test in-memory queues to run quick intercommunication tests. Finally, create full-blown integration tests which should be run on staging environment (and preferably also on production).</p>
</li>
<li><p>Store the failed messages</p>
<p> Usually you don&#39;t want one erroneous message to stop the complete queue processing. Being able to diagnose the problem is equally important. So put all the failed messages into a specialized storage and put a spotlight on it. Make a tool to move messages back to the relevant queue as soon as the failure reason is addressed.</p>
<p> Same or similar mechanism can be used to store the messages to be processed at some point of time in the future. Keep them in that special storage and check periodically if now is time to proceed.</p>
</li>
<li><p>Automate the deployment</p>
<p> Application setup and update must require just one or two clicks. Strive for frequent updates on production; ideally - automated deployment on every commit to the dedicated branch. Deployment scripts or tools will help developers maintain their personal and testing environments up-to-date.</p>
</li>
</ol>
<h3 id="wrapping-up">Wrapping up</h3>
<p>Clean and understandable architecture provides developers with a good means of communication, helps figure out the similar vision and concepts. Architecture metaphor expressed in form of a picture or short document will bring you closer to smart design, will help find errors or plan a refactoring.</p>
<p>Happy message processing!</p>
]]></content>
    </entry>
    
</feed>